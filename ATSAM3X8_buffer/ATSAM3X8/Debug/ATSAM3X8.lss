
ATSAM3X8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031dc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00002a80  20070000  000831dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00002548  20072a80  00085c5c  00022a80  2**2
                  ALLOC
  3 .stack        0000a000  20074fc8  000881a4  00022a80  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00022a80  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00022aa9  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b74f  00000000  00000000  00022b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fc7  00000000  00000000  0003e251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005ada  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c40  00000000  00000000  00047cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c08  00000000  00000000  00048932  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a881  00000000  00000000  0004953a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013059  00000000  00000000  00063dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006232f  00000000  00000000  00076e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000022b4  00000000  00000000  000d9144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 ef 07 20 5d 1a 08 00 59 1a 08 00 59 1a 08 00     ... ]...Y...Y...
   80010:	59 1a 08 00 59 1a 08 00 59 1a 08 00 00 00 00 00     Y...Y...Y.......
	...
   8002c:	59 1a 08 00 59 1a 08 00 00 00 00 00 59 1a 08 00     Y...Y.......Y...
   8003c:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   8004c:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   8005c:	59 1a 08 00 59 1a 08 00 59 1a 08 00 00 00 00 00     Y...Y...Y.......
   8006c:	21 16 08 00 31 16 08 00 41 16 08 00 51 16 08 00     !...1...A...Q...
	...
   80084:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   80094:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   800a4:	00 00 00 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     ....Y...Y...Y...
   800b4:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   800c4:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   800d4:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...
   800e4:	59 1a 08 00 59 1a 08 00 59 1a 08 00 59 1a 08 00     Y...Y...Y...Y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20072a80 	.word	0x20072a80
   80110:	00000000 	.word	0x00000000
   80114:	000831dc 	.word	0x000831dc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000831dc 	.word	0x000831dc
   80154:	20072a84 	.word	0x20072a84
   80158:	000831dc 	.word	0x000831dc
   8015c:	00000000 	.word	0x00000000

00080160 <efc_get_result>:
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
	return p_efc->EEFC_FRR;
   80160:	68c0      	ldr	r0, [r0, #12]
}
   80162:	4770      	bx	lr

00080164 <efc_init>:
{
   80164:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   80166:	0212      	lsls	r2, r2, #8
   80168:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   8016c:	4311      	orrs	r1, r2
   8016e:	f003 f82b 	bl	831c8 <__efc_write_fmr_veneer>
}
   80172:	2000      	movs	r0, #0
   80174:	bd08      	pop	{r3, pc}
	...

00080178 <efc_perform_command>:
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80178:	f1a1 030e 	sub.w	r3, r1, #14
   8017c:	2b01      	cmp	r3, #1
   8017e:	d802      	bhi.n	80186 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80180:	f04f 30ff 	mov.w	r0, #4294967295
   80184:	4770      	bx	lr
{
   80186:	b510      	push	{r4, lr}
   80188:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8018a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8018e:	fab3 f383 	clz	r3, r3
   80192:	095b      	lsrs	r3, r3, #5
   80194:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80196:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80198:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8019c:	2400      	movs	r4, #0
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <efc_perform_command+0x54>)
   801a0:	701c      	strb	r4, [r3, #0]
	return flags;
   801a2:	9c01      	ldr	r4, [sp, #4]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   801a4:	0212      	lsls	r2, r2, #8
   801a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   801aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   801ae:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   801b0:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   801b2:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   801b6:	f003 f803 	bl	831c0 <__efc_perform_fcr_veneer>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   801ba:	b12c      	cbz	r4, 801c8 <efc_perform_command+0x50>
		cpu_irq_enable();
   801bc:	2201      	movs	r2, #1
   801be:	4b03      	ldr	r3, [pc, #12]	; (801cc <efc_perform_command+0x54>)
   801c0:	701a      	strb	r2, [r3, #0]
   801c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   801c6:	b662      	cpsie	i
}
   801c8:	b002      	add	sp, #8
   801ca:	bd10      	pop	{r4, pc}
   801cc:	20072238 	.word	0x20072238

000801d0 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   801d0:	b538      	push	{r3, r4, r5, lr}
   801d2:	4604      	mov	r4, r0
   801d4:	460d      	mov	r5, r1
	efc_init(EFC, ul_mode, ul_fws);
   801d6:	460a      	mov	r2, r1
   801d8:	4601      	mov	r1, r0
   801da:	4805      	ldr	r0, [pc, #20]	; (801f0 <flash_init+0x20>)
   801dc:	f7ff ffc2 	bl	80164 <efc_init>

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   801e0:	462a      	mov	r2, r5
   801e2:	4621      	mov	r1, r4
   801e4:	4803      	ldr	r0, [pc, #12]	; (801f4 <flash_init+0x24>)
   801e6:	f7ff ffbd 	bl	80164 <efc_init>
#endif

	return FLASH_RC_OK;
}
   801ea:	2000      	movs	r0, #0
   801ec:	bd38      	pop	{r3, r4, r5, pc}
   801ee:	bf00      	nop
   801f0:	400e0a00 	.word	0x400e0a00
   801f4:	400e0c00 	.word	0x400e0c00

000801f8 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   801f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   801fa:	2802      	cmp	r0, #2
   801fc:	d902      	bls.n	80204 <flash_is_gpnvm_set+0xc>
		return FLASH_RC_INVALID;
   801fe:	2511      	movs	r5, #17
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
		return FLASH_RC_YES;
	}

	return FLASH_RC_NO;
}
   80200:	4628      	mov	r0, r5
   80202:	bd38      	pop	{r3, r4, r5, pc}
   80204:	4604      	mov	r4, r0
	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80206:	2200      	movs	r2, #0
   80208:	210d      	movs	r1, #13
   8020a:	4808      	ldr	r0, [pc, #32]	; (8022c <flash_is_gpnvm_set+0x34>)
   8020c:	f7ff ffb4 	bl	80178 <efc_perform_command>
   80210:	4605      	mov	r5, r0
   80212:	b108      	cbz	r0, 80218 <flash_is_gpnvm_set+0x20>
		return FLASH_RC_ERROR;
   80214:	2510      	movs	r5, #16
   80216:	e7f3      	b.n	80200 <flash_is_gpnvm_set+0x8>
	ul_gpnvm_bits = efc_get_result(EFC);
   80218:	4804      	ldr	r0, [pc, #16]	; (8022c <flash_is_gpnvm_set+0x34>)
   8021a:	f7ff ffa1 	bl	80160 <efc_get_result>
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   8021e:	2301      	movs	r3, #1
   80220:	fa03 f404 	lsl.w	r4, r3, r4
   80224:	4220      	tst	r0, r4
   80226:	d0eb      	beq.n	80200 <flash_is_gpnvm_set+0x8>
		return FLASH_RC_YES;
   80228:	461d      	mov	r5, r3
   8022a:	e7e9      	b.n	80200 <flash_is_gpnvm_set+0x8>
   8022c:	400e0a00 	.word	0x400e0a00

00080230 <flash_set_gpnvm>:
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80230:	2802      	cmp	r0, #2
   80232:	d902      	bls.n	8023a <flash_set_gpnvm+0xa>
		return FLASH_RC_INVALID;
   80234:	2311      	movs	r3, #17
}
   80236:	4618      	mov	r0, r3
   80238:	4770      	bx	lr
{
   8023a:	b510      	push	{r4, lr}
   8023c:	4604      	mov	r4, r0
	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   8023e:	f7ff ffdb 	bl	801f8 <flash_is_gpnvm_set>
   80242:	2801      	cmp	r0, #1
   80244:	d009      	beq.n	8025a <flash_set_gpnvm+0x2a>
	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80246:	4622      	mov	r2, r4
   80248:	210b      	movs	r1, #11
   8024a:	4805      	ldr	r0, [pc, #20]	; (80260 <flash_set_gpnvm+0x30>)
   8024c:	f7ff ff94 	bl	80178 <efc_perform_command>
   80250:	4603      	mov	r3, r0
   80252:	b100      	cbz	r0, 80256 <flash_set_gpnvm+0x26>
	return FLASH_RC_ERROR;
   80254:	2310      	movs	r3, #16
}
   80256:	4618      	mov	r0, r3
   80258:	bd10      	pop	{r4, pc}
		return FLASH_RC_OK;
   8025a:	2300      	movs	r3, #0
   8025c:	e7fb      	b.n	80256 <flash_set_gpnvm+0x26>
   8025e:	bf00      	nop
   80260:	400e0a00 	.word	0x400e0a00

00080264 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80264:	b508      	push	{r3, lr}
	return flash_set_gpnvm(0);
   80266:	2000      	movs	r0, #0
   80268:	f7ff ffe2 	bl	80230 <flash_set_gpnvm>
}
   8026c:	bd08      	pop	{r3, pc}

0008026e <flash_is_security_bit_enabled>:
 * \retval 1 If the security bit is currently set.
 * \retval 0 If the security bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_security_bit_enabled(void)
{
   8026e:	b508      	push	{r3, lr}
	return flash_is_gpnvm_set(0);
   80270:	2000      	movs	r0, #0
   80272:	f7ff ffc1 	bl	801f8 <flash_is_gpnvm_set>
}
   80276:	bd08      	pop	{r3, pc}

00080278 <byte_revert>:
 * return reverted data
 * revert byte
 */
static unsigned char byte_revert(unsigned char x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
   80278:	1043      	asrs	r3, r0, #1
   8027a:	f003 0355 	and.w	r3, r3, #85	; 0x55
   8027e:	0040      	lsls	r0, r0, #1
   80280:	f020 0055 	bic.w	r0, r0, #85	; 0x55
   80284:	b240      	sxtb	r0, r0
   80286:	4303      	orrs	r3, r0
   80288:	b2db      	uxtb	r3, r3
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
   8028a:	1098      	asrs	r0, r3, #2
   8028c:	f000 0033 	and.w	r0, r0, #51	; 0x33
   80290:	009b      	lsls	r3, r3, #2
   80292:	f023 0333 	bic.w	r3, r3, #51	; 0x33
   80296:	b25b      	sxtb	r3, r3
   80298:	4303      	orrs	r3, r0
   8029a:	b2db      	uxtb	r3, r3
	
	return((x >> 4) | (x << 4));
   8029c:	0918      	lsrs	r0, r3, #4
   8029e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
   802a2:	b2c0      	uxtb	r0, r0
   802a4:	4770      	bx	lr
	...

000802a8 <crc32_caculate>:
	if ( ptr != NULL ) {
   802a8:	b128      	cbz	r0, 802b6 <crc32_caculate+0xe>
{
   802aa:	b430      	push	{r4, r5}
   802ac:	4604      	mov	r4, r0
   802ae:	2200      	movs	r2, #0
   802b0:	f04f 30ff 	mov.w	r0, #4294967295
   802b4:	e00d      	b.n	802d2 <crc32_caculate+0x2a>
	crc = 0xFFFFFFFFul;
   802b6:	f04f 30ff 	mov.w	r0, #4294967295
}
   802ba:	43c0      	mvns	r0, r0
   802bc:	4770      	bx	lr
			crc = (crc >> 8) ^ crc32_tab[ (crc ^ (unsigned long) *ptr++) & 0x000000FFul ];
   802be:	7823      	ldrb	r3, [r4, #0]
   802c0:	4043      	eors	r3, r0
   802c2:	b2db      	uxtb	r3, r3
   802c4:	4d05      	ldr	r5, [pc, #20]	; (802dc <crc32_caculate+0x34>)
   802c6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   802ca:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
		for (i = 0; i < len; i++) {
   802ce:	3201      	adds	r2, #1
			crc = (crc >> 8) ^ crc32_tab[ (crc ^ (unsigned long) *ptr++) & 0x000000FFul ];
   802d0:	3401      	adds	r4, #1
		for (i = 0; i < len; i++) {
   802d2:	428a      	cmp	r2, r1
   802d4:	d3f3      	bcc.n	802be <crc32_caculate+0x16>
}
   802d6:	43c0      	mvns	r0, r0
   802d8:	bc30      	pop	{r4, r5}
   802da:	4770      	bx	lr
   802dc:	00082d84 	.word	0x00082d84

000802e0 <check_erom_buf>:
 *
 * return -1:error 0:success
 * check erom buf
 */
static int check_erom_buf(void)
{
   802e0:	b510      	push	{r4, lr}
	unsigned long crc32 = 0;
	
	if (chip_data.erom_crc32 == 0x00000000)
   802e2:	f242 4348 	movw	r3, #9288	; 0x2448
   802e6:	4a08      	ldr	r2, [pc, #32]	; (80308 <check_erom_buf+0x28>)
   802e8:	58d4      	ldr	r4, [r2, r3]
   802ea:	b15c      	cbz	r4, 80304 <check_erom_buf+0x24>
		return 0;
	
	crc32 = crc32_caculate(chip_data.erom, chip_data.erom_len);
   802ec:	4610      	mov	r0, r2
   802ee:	8891      	ldrh	r1, [r2, #4]
   802f0:	3008      	adds	r0, #8
   802f2:	f7ff ffd9 	bl	802a8 <crc32_caculate>
	if (crc32 != chip_data.erom_crc32)
   802f6:	4284      	cmp	r4, r0
   802f8:	d101      	bne.n	802fe <check_erom_buf+0x1e>
		return -1;
		
	return 0;
   802fa:	2000      	movs	r0, #0
}
   802fc:	bd10      	pop	{r4, pc}
		return -1;
   802fe:	f04f 30ff 	mov.w	r0, #4294967295
   80302:	bd10      	pop	{r4, pc}
		return 0;
   80304:	2000      	movs	r0, #0
   80306:	bd10      	pop	{r4, pc}
   80308:	20072b68 	.word	0x20072b68

0008030c <check_eerom_buf>:
 *
 * return -1:error 0:success
 * check eerom buf
 */
static int check_eerom_buf(void)
{
   8030c:	b510      	push	{r4, lr}
	unsigned long crc32 = 0;

	if (chip_data.eeprom_crc32 == 0x00000000)
   8030e:	f242 434c 	movw	r3, #9292	; 0x244c
   80312:	4a08      	ldr	r2, [pc, #32]	; (80334 <check_eerom_buf+0x28>)
   80314:	58d4      	ldr	r4, [r2, r3]
   80316:	b154      	cbz	r4, 8032e <check_eerom_buf+0x22>
		return 0;
		
	crc32 = crc32_caculate(chip_data.eeprom, chip_data.eeprom_len);
   80318:	88d1      	ldrh	r1, [r2, #6]
   8031a:	4807      	ldr	r0, [pc, #28]	; (80338 <check_eerom_buf+0x2c>)
   8031c:	f7ff ffc4 	bl	802a8 <crc32_caculate>
	if (crc32 != chip_data.eeprom_crc32)
   80320:	4284      	cmp	r4, r0
   80322:	d101      	bne.n	80328 <check_eerom_buf+0x1c>
		return -1;
	
	return 0;
   80324:	2000      	movs	r0, #0
}
   80326:	bd10      	pop	{r4, pc}
		return -1;
   80328:	f04f 30ff 	mov.w	r0, #4294967295
   8032c:	bd10      	pop	{r4, pc}
		return 0;
   8032e:	2000      	movs	r0, #0
   80330:	bd10      	pop	{r4, pc}
   80332:	bf00      	nop
   80334:	20072b68 	.word	0x20072b68
   80338:	20074b90 	.word	0x20074b90

0008033c <revert>:
{
   8033c:	b570      	push	{r4, r5, r6, lr}
   8033e:	b082      	sub	sp, #8
	volatile unsigned char reverted = 0;
   80340:	2300      	movs	r3, #0
   80342:	f88d 3007 	strb.w	r3, [sp, #7]
	if (data == NULL)
   80346:	b188      	cbz	r0, 8036c <revert+0x30>
   80348:	4605      	mov	r5, r0
   8034a:	460e      	mov	r6, r1
   8034c:	461c      	mov	r4, r3
   8034e:	e008      	b.n	80362 <revert+0x26>
		  reverted = byte_revert(data[i]);
   80350:	5d28      	ldrb	r0, [r5, r4]
   80352:	f7ff ff91 	bl	80278 <byte_revert>
   80356:	f88d 0007 	strb.w	r0, [sp, #7]
		  data[i] = reverted;
   8035a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   8035e:	552b      	strb	r3, [r5, r4]
	for (unsigned int i = 0; i < len; i++) {
   80360:	3401      	adds	r4, #1
   80362:	42b4      	cmp	r4, r6
   80364:	d3f4      	bcc.n	80350 <revert+0x14>
	return 0;
   80366:	2000      	movs	r0, #0
}
   80368:	b002      	add	sp, #8
   8036a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   8036c:	f04f 30ff 	mov.w	r0, #4294967295
   80370:	e7fa      	b.n	80368 <revert+0x2c>
	...

00080374 <uart_ops_recv>:
 * return none
 * read ops data from uart
 */

int uart_ops_recv(void)
{
   80374:	b510      	push	{r4, lr}
   80376:	b082      	sub	sp, #8
	volatile status_code_t status = STATUS_OK;
   80378:	2300      	movs	r3, #0
   8037a:	f88d 3007 	strb.w	r3, [sp, #7]
	unsigned int crc32 = 0;
	
	/* store data to mdi buf */
	uart_ops.data = mdi.buf;
   8037e:	4a3d      	ldr	r2, [pc, #244]	; (80474 <uart_ops_recv+0x100>)
   80380:	4b3d      	ldr	r3, [pc, #244]	; (80478 <uart_ops_recv+0x104>)
   80382:	605a      	str	r2, [r3, #4]
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data)) {
   80384:	493c      	ldr	r1, [pc, #240]	; (80478 <uart_ops_recv+0x104>)
   80386:	483d      	ldr	r0, [pc, #244]	; (8047c <uart_ops_recv+0x108>)
   80388:	f000 fabc 	bl	80904 <uart_read>
   8038c:	2800      	cmp	r0, #0
   8038e:	d1f9      	bne.n	80384 <uart_ops_recv+0x10>
	
	status = usart_serial_getchar((Usart *)UART, &uart_ops.ops, DISABLE);
   80390:	2300      	movs	r3, #0
   80392:	f88d 3007 	strb.w	r3, [sp, #7]
	status = usart_serial_read_packet((Usart *)UART, uart_ops.addresses, 2, ENABLE);
   80396:	2301      	movs	r3, #1
   80398:	2202      	movs	r2, #2
   8039a:	4939      	ldr	r1, [pc, #228]	; (80480 <uart_ops_recv+0x10c>)
   8039c:	4837      	ldr	r0, [pc, #220]	; (8047c <uart_ops_recv+0x108>)
   8039e:	f000 f9e9 	bl	80774 <usart_serial_read_packet>
   803a2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (status == ERR_TIMEOUT)
   803a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803aa:	b25b      	sxtb	r3, r3
   803ac:	f113 0f03 	cmn.w	r3, #3
   803b0:	d049      	beq.n	80446 <uart_ops_recv+0xd2>
		return -1;
	status = usart_serial_read_packet((Usart *)UART, uart_ops.lens, 2, ENABLE);
   803b2:	2301      	movs	r3, #1
   803b4:	2202      	movs	r2, #2
   803b6:	4933      	ldr	r1, [pc, #204]	; (80484 <uart_ops_recv+0x110>)
   803b8:	4830      	ldr	r0, [pc, #192]	; (8047c <uart_ops_recv+0x108>)
   803ba:	f000 f9db 	bl	80774 <usart_serial_read_packet>
   803be:	f88d 0007 	strb.w	r0, [sp, #7]
	if (status == ERR_TIMEOUT)
   803c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803c6:	b25b      	sxtb	r3, r3
   803c8:	f113 0f03 	cmn.w	r3, #3
   803cc:	d03e      	beq.n	8044c <uart_ops_recv+0xd8>
		return -1;
	
	if (uart_ops.len > 0) {
   803ce:	4b2a      	ldr	r3, [pc, #168]	; (80478 <uart_ops_recv+0x104>)
   803d0:	891a      	ldrh	r2, [r3, #8]
   803d2:	2a00      	cmp	r2, #0
   803d4:	d03d      	beq.n	80452 <uart_ops_recv+0xde>
		if (uart_ops.len > BUF_SIZE)
   803d6:	f242 0320 	movw	r3, #8224	; 0x2020
   803da:	429a      	cmp	r2, r3
   803dc:	d83c      	bhi.n	80458 <uart_ops_recv+0xe4>
			return -1;
			
		if ((uart_ops.ops != WRITE_ER_BUF) && (uart_ops.ops != WRITE_EE_BUF) && 
   803de:	4b26      	ldr	r3, [pc, #152]	; (80478 <uart_ops_recv+0x104>)
   803e0:	781b      	ldrb	r3, [r3, #0]
   803e2:	2b2b      	cmp	r3, #43	; 0x2b
   803e4:	d005      	beq.n	803f2 <uart_ops_recv+0x7e>
   803e6:	2b3b      	cmp	r3, #59	; 0x3b
   803e8:	d003      	beq.n	803f2 <uart_ops_recv+0x7e>
   803ea:	2b2c      	cmp	r3, #44	; 0x2c
   803ec:	d001      	beq.n	803f2 <uart_ops_recv+0x7e>
			(uart_ops.ops != VERIFY_ER_BUF) && (uart_ops.ops != VERIFY_EE_BUF)) 
   803ee:	2b3c      	cmp	r3, #60	; 0x3c
   803f0:	d135      	bne.n	8045e <uart_ops_recv+0xea>
			return -1;
		
		status = usart_serial_read_packet((Usart *)UART, uart_ops.data, uart_ops.len, ENABLE);
   803f2:	2301      	movs	r3, #1
   803f4:	4920      	ldr	r1, [pc, #128]	; (80478 <uart_ops_recv+0x104>)
   803f6:	6849      	ldr	r1, [r1, #4]
   803f8:	4820      	ldr	r0, [pc, #128]	; (8047c <uart_ops_recv+0x108>)
   803fa:	f000 f9bb 	bl	80774 <usart_serial_read_packet>
   803fe:	f88d 0007 	strb.w	r0, [sp, #7]
		if (status == ERR_TIMEOUT)
   80402:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80406:	b25b      	sxtb	r3, r3
   80408:	f113 0f03 	cmn.w	r3, #3
   8040c:	d02a      	beq.n	80464 <uart_ops_recv+0xf0>
			return -1;
		status = usart_serial_read_packet((Usart *)UART, uart_ops.crc32s, 4, ENABLE);
   8040e:	2301      	movs	r3, #1
   80410:	2204      	movs	r2, #4
   80412:	491d      	ldr	r1, [pc, #116]	; (80488 <uart_ops_recv+0x114>)
   80414:	4819      	ldr	r0, [pc, #100]	; (8047c <uart_ops_recv+0x108>)
   80416:	f000 f9ad 	bl	80774 <usart_serial_read_packet>
   8041a:	f88d 0007 	strb.w	r0, [sp, #7]
		if (status == ERR_TIMEOUT)
   8041e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80422:	b25b      	sxtb	r3, r3
   80424:	f113 0f03 	cmn.w	r3, #3
   80428:	d01f      	beq.n	8046a <uart_ops_recv+0xf6>
			return -1;		
		if (uart_ops.crc32 == 0x00000000)
   8042a:	4b13      	ldr	r3, [pc, #76]	; (80478 <uart_ops_recv+0x104>)
   8042c:	68dc      	ldr	r4, [r3, #12]
   8042e:	b1fc      	cbz	r4, 80470 <uart_ops_recv+0xfc>
			return 0;
		crc32 = crc32_caculate(uart_ops.data, uart_ops.len);
   80430:	8919      	ldrh	r1, [r3, #8]
   80432:	6858      	ldr	r0, [r3, #4]
   80434:	f7ff ff38 	bl	802a8 <crc32_caculate>
		if (crc32 != uart_ops.crc32)
   80438:	4284      	cmp	r4, r0
   8043a:	d101      	bne.n	80440 <uart_ops_recv+0xcc>
			return -1;
	}
	
	return 0;
   8043c:	2000      	movs	r0, #0
   8043e:	e009      	b.n	80454 <uart_ops_recv+0xe0>
			return -1;
   80440:	f04f 30ff 	mov.w	r0, #4294967295
   80444:	e006      	b.n	80454 <uart_ops_recv+0xe0>
		return -1;
   80446:	f04f 30ff 	mov.w	r0, #4294967295
   8044a:	e003      	b.n	80454 <uart_ops_recv+0xe0>
		return -1;
   8044c:	f04f 30ff 	mov.w	r0, #4294967295
   80450:	e000      	b.n	80454 <uart_ops_recv+0xe0>
	return 0;
   80452:	2000      	movs	r0, #0
}
   80454:	b002      	add	sp, #8
   80456:	bd10      	pop	{r4, pc}
			return -1;
   80458:	f04f 30ff 	mov.w	r0, #4294967295
   8045c:	e7fa      	b.n	80454 <uart_ops_recv+0xe0>
			return -1;
   8045e:	f04f 30ff 	mov.w	r0, #4294967295
   80462:	e7f7      	b.n	80454 <uart_ops_recv+0xe0>
			return -1;
   80464:	f04f 30ff 	mov.w	r0, #4294967295
   80468:	e7f4      	b.n	80454 <uart_ops_recv+0xe0>
			return -1;		
   8046a:	f04f 30ff 	mov.w	r0, #4294967295
   8046e:	e7f1      	b.n	80454 <uart_ops_recv+0xe0>
			return 0;
   80470:	2000      	movs	r0, #0
   80472:	e7ef      	b.n	80454 <uart_ops_recv+0xe0>
   80474:	200701dc 	.word	0x200701dc
   80478:	20072b54 	.word	0x20072b54
   8047c:	400e0800 	.word	0x400e0800
   80480:	20072b56 	.word	0x20072b56
   80484:	20072b5c 	.word	0x20072b5c
   80488:	20072b60 	.word	0x20072b60

0008048c <uart_ops_handler>:
 * return -1:error 0:success
 * handle uart ops
 */

int uart_ops_handler(void)
{
   8048c:	b530      	push	{r4, r5, lr}
   8048e:	b083      	sub	sp, #12
	volatile unsigned char ops = uart_ops.ops;
   80490:	4b90      	ldr	r3, [pc, #576]	; (806d4 <uart_ops_handler+0x248>)
   80492:	781b      	ldrb	r3, [r3, #0]
   80494:	f88d 3007 	strb.w	r3, [sp, #7]
	volatile enum UART_STATUS_E status = SUCCESS;
   80498:	2306      	movs	r3, #6
   8049a:	f88d 3006 	strb.w	r3, [sp, #6]
	int ret = 0;
	
	switch(ops)	{
   8049e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   804a2:	3b09      	subs	r3, #9
   804a4:	2b34      	cmp	r3, #52	; 0x34
   804a6:	f200 8110 	bhi.w	806ca <uart_ops_handler+0x23e>
   804aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   804ae:	0035      	.short	0x0035
   804b0:	0062004c 	.word	0x0062004c
   804b4:	00e600a7 	.word	0x00e600a7
   804b8:	010e010e 	.word	0x010e010e
   804bc:	010e010e 	.word	0x010e010e
   804c0:	010e010e 	.word	0x010e010e
   804c4:	010e010e 	.word	0x010e010e
   804c8:	010e010e 	.word	0x010e010e
   804cc:	010e010e 	.word	0x010e010e
   804d0:	007e010e 	.word	0x007e010e
   804d4:	00fc00bd 	.word	0x00fc00bd
   804d8:	010e010e 	.word	0x010e010e
   804dc:	010e010e 	.word	0x010e010e
   804e0:	010e010e 	.word	0x010e010e
   804e4:	010e010e 	.word	0x010e010e
   804e8:	010e010e 	.word	0x010e010e
   804ec:	010e010e 	.word	0x010e010e
   804f0:	0057010e 	.word	0x0057010e
   804f4:	00db009c 	.word	0x00db009c
   804f8:	010e010e 	.word	0x010e010e
   804fc:	010e010e 	.word	0x010e010e
   80500:	010e010e 	.word	0x010e010e
   80504:	010e010e 	.word	0x010e010e
   80508:	010e010e 	.word	0x010e010e
   8050c:	010e010e 	.word	0x010e010e
   80510:	0073010e 	.word	0x0073010e
   80514:	00f100b2 	.word	0x00f100b2
	case CONNECT:
		ret = rom_ops.connect();
   80518:	4b6f      	ldr	r3, [pc, #444]	; (806d8 <uart_ops_handler+0x24c>)
   8051a:	681b      	ldr	r3, [r3, #0]
   8051c:	4798      	blx	r3
		status = ret < 0 ? CONNECT_ERR : SUCCESS;
   8051e:	2800      	cmp	r0, #0
   80520:	db0f      	blt.n	80542 <uart_ops_handler+0xb6>
   80522:	2306      	movs	r3, #6
   80524:	f88d 3006 	strb.w	r3, [sp, #6]
	default:
		status = COMMAND_ERR;
		break;	
	}
	
	usart_serial_putchar((Usart *)UART, status);
   80528:	f89d 4006 	ldrb.w	r4, [sp, #6]
   8052c:	b2e4      	uxtb	r4, r4
		while (uart_write((Uart*)p_usart, c)!=0);
   8052e:	4621      	mov	r1, r4
   80530:	486a      	ldr	r0, [pc, #424]	; (806dc <uart_ops_handler+0x250>)
   80532:	f000 f9de 	bl	808f2 <uart_write>
   80536:	2800      	cmp	r0, #0
   80538:	d1f9      	bne.n	8052e <uart_ops_handler+0xa2>
	
	return status;
   8053a:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   8053e:	b003      	add	sp, #12
   80540:	bd30      	pop	{r4, r5, pc}
		status = ret < 0 ? CONNECT_ERR : SUCCESS;
   80542:	2390      	movs	r3, #144	; 0x90
   80544:	e7ee      	b.n	80524 <uart_ops_handler+0x98>
		ret = rom_ops.erase();
   80546:	4b64      	ldr	r3, [pc, #400]	; (806d8 <uart_ops_handler+0x24c>)
   80548:	685b      	ldr	r3, [r3, #4]
   8054a:	4798      	blx	r3
		status = ret < 0 ? ERASE_ERR : SUCCESS;
   8054c:	2800      	cmp	r0, #0
   8054e:	db03      	blt.n	80558 <uart_ops_handler+0xcc>
   80550:	2306      	movs	r3, #6
   80552:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   80556:	e7e7      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? ERASE_ERR : SUCCESS;
   80558:	23a0      	movs	r3, #160	; 0xa0
   8055a:	e7fa      	b.n	80552 <uart_ops_handler+0xc6>
		ret = rom_ops.write_erom_buf();
   8055c:	4b5e      	ldr	r3, [pc, #376]	; (806d8 <uart_ops_handler+0x24c>)
   8055e:	689b      	ldr	r3, [r3, #8]
   80560:	4798      	blx	r3
		status = ret < 0 ? WRITE_ER_BUF_ERR : SUCCESS;
   80562:	2800      	cmp	r0, #0
   80564:	db03      	blt.n	8056e <uart_ops_handler+0xe2>
   80566:	2306      	movs	r3, #6
   80568:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   8056c:	e7dc      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? WRITE_ER_BUF_ERR : SUCCESS;
   8056e:	23b2      	movs	r3, #178	; 0xb2
   80570:	e7fa      	b.n	80568 <uart_ops_handler+0xdc>
		ret = check_erom_buf();
   80572:	f7ff feb5 	bl	802e0 <check_erom_buf>
		if (ret == 0) 
   80576:	4603      	mov	r3, r0
   80578:	b128      	cbz	r0, 80586 <uart_ops_handler+0xfa>
		status = ret < 0 ? PROGRAM_ER_ERR : SUCCESS;
   8057a:	2b00      	cmp	r3, #0
   8057c:	db08      	blt.n	80590 <uart_ops_handler+0x104>
   8057e:	2306      	movs	r3, #6
   80580:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   80584:	e7d0      	b.n	80528 <uart_ops_handler+0x9c>
			ret = rom_ops.program_erom();
   80586:	4b54      	ldr	r3, [pc, #336]	; (806d8 <uart_ops_handler+0x24c>)
   80588:	68db      	ldr	r3, [r3, #12]
   8058a:	4798      	blx	r3
   8058c:	4603      	mov	r3, r0
   8058e:	e7f4      	b.n	8057a <uart_ops_handler+0xee>
		status = ret < 0 ? PROGRAM_ER_ERR : SUCCESS;
   80590:	23b0      	movs	r3, #176	; 0xb0
   80592:	e7f5      	b.n	80580 <uart_ops_handler+0xf4>
		ret = rom_ops.write_eerom_buf();
   80594:	4b50      	ldr	r3, [pc, #320]	; (806d8 <uart_ops_handler+0x24c>)
   80596:	691b      	ldr	r3, [r3, #16]
   80598:	4798      	blx	r3
		status = ret < 0 ? WRITE_EE_BUF_ERR : SUCCESS;
   8059a:	2800      	cmp	r0, #0
   8059c:	db03      	blt.n	805a6 <uart_ops_handler+0x11a>
   8059e:	2306      	movs	r3, #6
   805a0:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   805a4:	e7c0      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? WRITE_EE_BUF_ERR : SUCCESS;
   805a6:	23b3      	movs	r3, #179	; 0xb3
   805a8:	e7fa      	b.n	805a0 <uart_ops_handler+0x114>
		ret = check_eerom_buf();
   805aa:	f7ff feaf 	bl	8030c <check_eerom_buf>
		if (ret == 0) {
   805ae:	4604      	mov	r4, r0
   805b0:	b128      	cbz	r0, 805be <uart_ops_handler+0x132>
		status = ret < 0 ? PROGRAM_EE_ERR : SUCCESS;
   805b2:	2c00      	cmp	r4, #0
   805b4:	db15      	blt.n	805e2 <uart_ops_handler+0x156>
   805b6:	2306      	movs	r3, #6
   805b8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   805bc:	e7b4      	b.n	80528 <uart_ops_handler+0x9c>
			memcpy(mdi.buf, chip_data.eeprom, EEROM_SIZE);
   805be:	4c48      	ldr	r4, [pc, #288]	; (806e0 <uart_ops_handler+0x254>)
   805c0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   805c4:	462a      	mov	r2, r5
   805c6:	4947      	ldr	r1, [pc, #284]	; (806e4 <uart_ops_handler+0x258>)
   805c8:	4620      	mov	r0, r4
   805ca:	f001 fb77 	bl	81cbc <memcpy>
			ret = revert(mdi.buf, EEROM_SIZE);
   805ce:	4629      	mov	r1, r5
   805d0:	4620      	mov	r0, r4
   805d2:	f7ff feb3 	bl	8033c <revert>
   805d6:	4604      	mov	r4, r0
			ret |= rom_ops.program_eerom();
   805d8:	4b3f      	ldr	r3, [pc, #252]	; (806d8 <uart_ops_handler+0x24c>)
   805da:	695b      	ldr	r3, [r3, #20]
   805dc:	4798      	blx	r3
   805de:	4304      	orrs	r4, r0
   805e0:	e7e7      	b.n	805b2 <uart_ops_handler+0x126>
		status = ret < 0 ? PROGRAM_EE_ERR : SUCCESS;
   805e2:	23b1      	movs	r3, #177	; 0xb1
   805e4:	e7e8      	b.n	805b8 <uart_ops_handler+0x12c>
		ret = rom_ops.verify_erom_buf();
   805e6:	4b3c      	ldr	r3, [pc, #240]	; (806d8 <uart_ops_handler+0x24c>)
   805e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   805ea:	4798      	blx	r3
		status = ret < 0 ? VERIFY_ER_BUF_ERR : SUCCESS;
   805ec:	2800      	cmp	r0, #0
   805ee:	db03      	blt.n	805f8 <uart_ops_handler+0x16c>
   805f0:	2306      	movs	r3, #6
   805f2:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   805f6:	e797      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? VERIFY_ER_BUF_ERR : SUCCESS;
   805f8:	23c2      	movs	r3, #194	; 0xc2
   805fa:	e7fa      	b.n	805f2 <uart_ops_handler+0x166>
		ret = rom_ops.verify_erom();
   805fc:	4b36      	ldr	r3, [pc, #216]	; (806d8 <uart_ops_handler+0x24c>)
   805fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80600:	4798      	blx	r3
		status = ret < 0 ? VERIFY_ER_ERR : SUCCESS;
   80602:	2800      	cmp	r0, #0
   80604:	db03      	blt.n	8060e <uart_ops_handler+0x182>
   80606:	2306      	movs	r3, #6
   80608:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   8060c:	e78c      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? VERIFY_ER_ERR : SUCCESS;
   8060e:	23c0      	movs	r3, #192	; 0xc0
   80610:	e7fa      	b.n	80608 <uart_ops_handler+0x17c>
		ret = rom_ops.verify_eerom_buf();
   80612:	4b31      	ldr	r3, [pc, #196]	; (806d8 <uart_ops_handler+0x24c>)
   80614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80616:	4798      	blx	r3
		status = ret < 0 ? VERIFY_EE_BUF_ERR : SUCCESS;
   80618:	2800      	cmp	r0, #0
   8061a:	db03      	blt.n	80624 <uart_ops_handler+0x198>
   8061c:	2306      	movs	r3, #6
   8061e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   80622:	e781      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? VERIFY_EE_BUF_ERR : SUCCESS;
   80624:	23c3      	movs	r3, #195	; 0xc3
   80626:	e7fa      	b.n	8061e <uart_ops_handler+0x192>
		ret = check_eerom_buf();
   80628:	f7ff fe70 	bl	8030c <check_eerom_buf>
		if (ret == 0) {
   8062c:	4604      	mov	r4, r0
   8062e:	b128      	cbz	r0, 8063c <uart_ops_handler+0x1b0>
		status = ret < 0 ? VERIFY_EE_ERR : SUCCESS;
   80630:	2c00      	cmp	r4, #0
   80632:	db15      	blt.n	80660 <uart_ops_handler+0x1d4>
   80634:	2306      	movs	r3, #6
   80636:	f88d 3006 	strb.w	r3, [sp, #6]
		break;	
   8063a:	e775      	b.n	80528 <uart_ops_handler+0x9c>
			memcpy(mdi.buf, chip_data.eeprom, EEROM_SIZE);
   8063c:	4c28      	ldr	r4, [pc, #160]	; (806e0 <uart_ops_handler+0x254>)
   8063e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   80642:	462a      	mov	r2, r5
   80644:	4927      	ldr	r1, [pc, #156]	; (806e4 <uart_ops_handler+0x258>)
   80646:	4620      	mov	r0, r4
   80648:	f001 fb38 	bl	81cbc <memcpy>
			ret = revert(mdi.buf, EEROM_SIZE);
   8064c:	4629      	mov	r1, r5
   8064e:	4620      	mov	r0, r4
   80650:	f7ff fe74 	bl	8033c <revert>
   80654:	4604      	mov	r4, r0
			ret |= rom_ops.verify_eerom();
   80656:	4b20      	ldr	r3, [pc, #128]	; (806d8 <uart_ops_handler+0x24c>)
   80658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8065a:	4798      	blx	r3
   8065c:	4304      	orrs	r4, r0
   8065e:	e7e7      	b.n	80630 <uart_ops_handler+0x1a4>
		status = ret < 0 ? VERIFY_EE_ERR : SUCCESS;
   80660:	23c1      	movs	r3, #193	; 0xc1
   80662:	e7e8      	b.n	80636 <uart_ops_handler+0x1aa>
		ret = rom_ops.read_erom_buf();
   80664:	4b1c      	ldr	r3, [pc, #112]	; (806d8 <uart_ops_handler+0x24c>)
   80666:	699b      	ldr	r3, [r3, #24]
   80668:	4798      	blx	r3
		status = ret < 0 ? READ_ER_BUF_ERR : SUCCESS;
   8066a:	2800      	cmp	r0, #0
   8066c:	db03      	blt.n	80676 <uart_ops_handler+0x1ea>
   8066e:	2306      	movs	r3, #6
   80670:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   80674:	e758      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? READ_ER_BUF_ERR : SUCCESS;
   80676:	23d2      	movs	r3, #210	; 0xd2
   80678:	e7fa      	b.n	80670 <uart_ops_handler+0x1e4>
		ret = rom_ops.read_erom();
   8067a:	4b17      	ldr	r3, [pc, #92]	; (806d8 <uart_ops_handler+0x24c>)
   8067c:	69db      	ldr	r3, [r3, #28]
   8067e:	4798      	blx	r3
		status = ret < 0 ? READ_ER_ERR : SUCCESS;
   80680:	2800      	cmp	r0, #0
   80682:	db03      	blt.n	8068c <uart_ops_handler+0x200>
   80684:	2306      	movs	r3, #6
   80686:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   8068a:	e74d      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? READ_ER_ERR : SUCCESS;
   8068c:	23d0      	movs	r3, #208	; 0xd0
   8068e:	e7fa      	b.n	80686 <uart_ops_handler+0x1fa>
		ret = rom_ops.read_eerom_buf();
   80690:	4b11      	ldr	r3, [pc, #68]	; (806d8 <uart_ops_handler+0x24c>)
   80692:	6a1b      	ldr	r3, [r3, #32]
   80694:	4798      	blx	r3
		status = ret < 0 ? READ_EE_BUF_ERR : SUCCESS;
   80696:	2800      	cmp	r0, #0
   80698:	db03      	blt.n	806a2 <uart_ops_handler+0x216>
   8069a:	2306      	movs	r3, #6
   8069c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   806a0:	e742      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? READ_EE_BUF_ERR : SUCCESS;
   806a2:	23d3      	movs	r3, #211	; 0xd3
   806a4:	e7fa      	b.n	8069c <uart_ops_handler+0x210>
		ret = revert(uart_ops.data, uart_ops.len);
   806a6:	4b0b      	ldr	r3, [pc, #44]	; (806d4 <uart_ops_handler+0x248>)
   806a8:	8919      	ldrh	r1, [r3, #8]
   806aa:	6858      	ldr	r0, [r3, #4]
   806ac:	f7ff fe46 	bl	8033c <revert>
   806b0:	4604      	mov	r4, r0
		ret |= rom_ops.read_eerom();
   806b2:	4b09      	ldr	r3, [pc, #36]	; (806d8 <uart_ops_handler+0x24c>)
   806b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   806b6:	4798      	blx	r3
		status = ret < 0 ? READ_EE_ERR : SUCCESS;
   806b8:	ea54 0300 	orrs.w	r3, r4, r0
   806bc:	d403      	bmi.n	806c6 <uart_ops_handler+0x23a>
   806be:	2306      	movs	r3, #6
   806c0:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   806c4:	e730      	b.n	80528 <uart_ops_handler+0x9c>
		status = ret < 0 ? READ_EE_ERR : SUCCESS;
   806c6:	23d1      	movs	r3, #209	; 0xd1
   806c8:	e7fa      	b.n	806c0 <uart_ops_handler+0x234>
		status = COMMAND_ERR;
   806ca:	2366      	movs	r3, #102	; 0x66
   806cc:	f88d 3006 	strb.w	r3, [sp, #6]
		break;	
   806d0:	e72a      	b.n	80528 <uart_ops_handler+0x9c>
   806d2:	bf00      	nop
   806d4:	20072b54 	.word	0x20072b54
   806d8:	20072200 	.word	0x20072200
   806dc:	400e0800 	.word	0x400e0800
   806e0:	200701dc 	.word	0x200701dc
   806e4:	20074b90 	.word	0x20074b90

000806e8 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
   806e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806ea:	4604      	mov	r4, r0
   806ec:	460f      	mov	r7, r1
   806ee:	4616      	mov	r6, r2
	while (len) {
   806f0:	e007      	b.n	80702 <usart_serial_write_packet+0x1a>
   806f2:	4629      	mov	r1, r5
   806f4:	4620      	mov	r0, r4
   806f6:	f000 f8fc 	bl	808f2 <uart_write>
   806fa:	2800      	cmp	r0, #0
   806fc:	d1f9      	bne.n	806f2 <usart_serial_write_packet+0xa>
		usart_serial_putchar(usart, *data);
		len--;
   806fe:	3e01      	subs	r6, #1
		data++;
   80700:	3701      	adds	r7, #1
	while (len) {
   80702:	b35e      	cbz	r6, 8075c <usart_serial_write_packet+0x74>
		usart_serial_putchar(usart, *data);
   80704:	783d      	ldrb	r5, [r7, #0]
	if (UART == (Uart*)p_usart) {
   80706:	4b16      	ldr	r3, [pc, #88]	; (80760 <usart_serial_write_packet+0x78>)
   80708:	429c      	cmp	r4, r3
   8070a:	d0f2      	beq.n	806f2 <usart_serial_write_packet+0xa>
	if (USART0 == p_usart) {
   8070c:	4b15      	ldr	r3, [pc, #84]	; (80764 <usart_serial_write_packet+0x7c>)
   8070e:	429c      	cmp	r4, r3
   80710:	d00f      	beq.n	80732 <usart_serial_write_packet+0x4a>
	if (USART1 == p_usart) {
   80712:	4b15      	ldr	r3, [pc, #84]	; (80768 <usart_serial_write_packet+0x80>)
   80714:	429c      	cmp	r4, r3
   80716:	d013      	beq.n	80740 <usart_serial_write_packet+0x58>
	if (USART2 == p_usart) {
   80718:	4b14      	ldr	r3, [pc, #80]	; (8076c <usart_serial_write_packet+0x84>)
   8071a:	429c      	cmp	r4, r3
   8071c:	d017      	beq.n	8074e <usart_serial_write_packet+0x66>
	if (USART3 == p_usart) {
   8071e:	4b14      	ldr	r3, [pc, #80]	; (80770 <usart_serial_write_packet+0x88>)
   80720:	429c      	cmp	r4, r3
   80722:	d1ec      	bne.n	806fe <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   80724:	4629      	mov	r1, r5
   80726:	4620      	mov	r0, r4
   80728:	f000 f8f6 	bl	80918 <usart_write>
   8072c:	2800      	cmp	r0, #0
   8072e:	d1f9      	bne.n	80724 <usart_serial_write_packet+0x3c>
   80730:	e7e5      	b.n	806fe <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   80732:	4629      	mov	r1, r5
   80734:	4620      	mov	r0, r4
   80736:	f000 f8ef 	bl	80918 <usart_write>
   8073a:	2800      	cmp	r0, #0
   8073c:	d1f9      	bne.n	80732 <usart_serial_write_packet+0x4a>
   8073e:	e7de      	b.n	806fe <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   80740:	4629      	mov	r1, r5
   80742:	4620      	mov	r0, r4
   80744:	f000 f8e8 	bl	80918 <usart_write>
   80748:	2800      	cmp	r0, #0
   8074a:	d1f9      	bne.n	80740 <usart_serial_write_packet+0x58>
   8074c:	e7d7      	b.n	806fe <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   8074e:	4629      	mov	r1, r5
   80750:	4620      	mov	r0, r4
   80752:	f000 f8e1 	bl	80918 <usart_write>
   80756:	2800      	cmp	r0, #0
   80758:	d1f9      	bne.n	8074e <usart_serial_write_packet+0x66>
   8075a:	e7d0      	b.n	806fe <usart_serial_write_packet+0x16>
	}
	return STATUS_OK;
}
   8075c:	2000      	movs	r0, #0
   8075e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80760:	400e0800 	.word	0x400e0800
   80764:	40098000 	.word	0x40098000
   80768:	4009c000 	.word	0x4009c000
   8076c:	400a0000 	.word	0x400a0000
   80770:	400a4000 	.word	0x400a4000

00080774 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len, uint8_t timeout)
{
   80774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80778:	b082      	sub	sp, #8
   8077a:	4604      	mov	r4, r0
   8077c:	460d      	mov	r5, r1
   8077e:	4617      	mov	r7, r2
   80780:	4698      	mov	r8, r3
	int status = 0;
	
	while (len) {
   80782:	e031      	b.n	807e8 <usart_serial_read_packet+0x74>
	if (UART == (Uart*)p_usart) {
   80784:	4e2a      	ldr	r6, [pc, #168]	; (80830 <usart_serial_read_packet+0xbc>)
		while (uart_read((Uart*)p_usart, data)) {
   80786:	4629      	mov	r1, r5
   80788:	4620      	mov	r0, r4
   8078a:	f000 f8bb 	bl	80904 <uart_read>
   8078e:	b138      	cbz	r0, 807a0 <usart_serial_read_packet+0x2c>
			if (timeout != 0) {
   80790:	f1b8 0f00 	cmp.w	r8, #0
   80794:	d0f7      	beq.n	80786 <usart_serial_read_packet+0x12>
				if (--times <= 0) {
   80796:	3e01      	subs	r6, #1
   80798:	d1f5      	bne.n	80786 <usart_serial_read_packet+0x12>
					status = ERR_TIMEOUT;
   8079a:	f06f 0602 	mvn.w	r6, #2
   8079e:	e02a      	b.n	807f6 <usart_serial_read_packet+0x82>
	status_code_t status = STATUS_OK;
   807a0:	2600      	movs	r6, #0
   807a2:	e028      	b.n	807f6 <usart_serial_read_packet+0x82>
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_read(p_usart, &val));
   807a4:	a901      	add	r1, sp, #4
   807a6:	4620      	mov	r0, r4
   807a8:	f000 f8c1 	bl	8092e <usart_read>
   807ac:	2800      	cmp	r0, #0
   807ae:	d1f9      	bne.n	807a4 <usart_serial_read_packet+0x30>
		*data = (uint8_t)(val & 0xFF);
   807b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   807b4:	702b      	strb	r3, [r5, #0]
   807b6:	e021      	b.n	807fc <usart_serial_read_packet+0x88>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_read(p_usart, &val));
   807b8:	a901      	add	r1, sp, #4
   807ba:	4620      	mov	r0, r4
   807bc:	f000 f8b7 	bl	8092e <usart_read>
   807c0:	2800      	cmp	r0, #0
   807c2:	d1f9      	bne.n	807b8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   807c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   807c8:	702b      	strb	r3, [r5, #0]
   807ca:	e01a      	b.n	80802 <usart_serial_read_packet+0x8e>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_read(p_usart, &val));
   807cc:	a901      	add	r1, sp, #4
   807ce:	4620      	mov	r0, r4
   807d0:	f000 f8ad 	bl	8092e <usart_read>
   807d4:	2800      	cmp	r0, #0
   807d6:	d1f9      	bne.n	807cc <usart_serial_read_packet+0x58>
		*data = (uint8_t)(val & 0xFF);
   807d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   807dc:	702b      	strb	r3, [r5, #0]
   807de:	e013      	b.n	80808 <usart_serial_read_packet+0x94>
		status = usart_serial_getchar(usart, data, timeout);
		if (status < 0)
   807e0:	2e00      	cmp	r6, #0
   807e2:	db22      	blt.n	8082a <usart_serial_read_packet+0xb6>
			return ERR_TIMEOUT;
		len--;
   807e4:	3f01      	subs	r7, #1
		data++;
   807e6:	3501      	adds	r5, #1
	while (len) {
   807e8:	b1df      	cbz	r7, 80822 <usart_serial_read_packet+0xae>
	uint32_t val = 0;
   807ea:	2300      	movs	r3, #0
   807ec:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   807ee:	4b11      	ldr	r3, [pc, #68]	; (80834 <usart_serial_read_packet+0xc0>)
   807f0:	429c      	cmp	r4, r3
   807f2:	d0c7      	beq.n	80784 <usart_serial_read_packet+0x10>
	status_code_t status = STATUS_OK;
   807f4:	2600      	movs	r6, #0
	if (USART0 == p_usart) {
   807f6:	4b10      	ldr	r3, [pc, #64]	; (80838 <usart_serial_read_packet+0xc4>)
   807f8:	429c      	cmp	r4, r3
   807fa:	d0d3      	beq.n	807a4 <usart_serial_read_packet+0x30>
	if (USART1 == p_usart) {
   807fc:	4b0f      	ldr	r3, [pc, #60]	; (8083c <usart_serial_read_packet+0xc8>)
   807fe:	429c      	cmp	r4, r3
   80800:	d0da      	beq.n	807b8 <usart_serial_read_packet+0x44>
	if (USART2 == p_usart) {
   80802:	4b0f      	ldr	r3, [pc, #60]	; (80840 <usart_serial_read_packet+0xcc>)
   80804:	429c      	cmp	r4, r3
   80806:	d0e1      	beq.n	807cc <usart_serial_read_packet+0x58>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80808:	4b0e      	ldr	r3, [pc, #56]	; (80844 <usart_serial_read_packet+0xd0>)
   8080a:	429c      	cmp	r4, r3
   8080c:	d1e8      	bne.n	807e0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8080e:	a901      	add	r1, sp, #4
   80810:	4620      	mov	r0, r4
   80812:	f000 f88c 	bl	8092e <usart_read>
   80816:	2800      	cmp	r0, #0
   80818:	d1f9      	bne.n	8080e <usart_serial_read_packet+0x9a>
		*data = (uint8_t)(val & 0xFF);
   8081a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8081e:	702b      	strb	r3, [r5, #0]
   80820:	e7de      	b.n	807e0 <usart_serial_read_packet+0x6c>
	}
	return STATUS_OK;
   80822:	2000      	movs	r0, #0
}
   80824:	b002      	add	sp, #8
   80826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ERR_TIMEOUT;
   8082a:	f06f 0002 	mvn.w	r0, #2
   8082e:	e7f9      	b.n	80824 <usart_serial_read_packet+0xb0>
   80830:	0007a120 	.word	0x0007a120
   80834:	400e0800 	.word	0x400e0800
   80838:	40098000 	.word	0x40098000
   8083c:	4009c000 	.word	0x4009c000
   80840:	400a0000 	.word	0x400a0000
   80844:	400a4000 	.word	0x400a4000

00080848 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80848:	b570      	push	{r4, r5, r6, lr}
   8084a:	460d      	mov	r5, r1
   8084c:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
   8084e:	4606      	mov	r6, r0
   80850:	b158      	cbz	r0, 8086a <_read+0x22>
		return -1;
   80852:	f04f 36ff 	mov.w	r6, #4294967295
   80856:	e00a      	b.n	8086e <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   80858:	4b06      	ldr	r3, [pc, #24]	; (80874 <_read+0x2c>)
   8085a:	6818      	ldr	r0, [r3, #0]
   8085c:	4b06      	ldr	r3, [pc, #24]	; (80878 <_read+0x30>)
   8085e:	681b      	ldr	r3, [r3, #0]
   80860:	4629      	mov	r1, r5
   80862:	4798      	blx	r3
		ptr++;
   80864:	3501      	adds	r5, #1
		nChars++;
   80866:	3601      	adds	r6, #1
	for (; len > 0; --len) {
   80868:	3c01      	subs	r4, #1
   8086a:	2c00      	cmp	r4, #0
   8086c:	dcf4      	bgt.n	80858 <_read+0x10>
	}
	return nChars;
}
   8086e:	4630      	mov	r0, r6
   80870:	bd70      	pop	{r4, r5, r6, pc}
   80872:	bf00      	nop
   80874:	20074fc0 	.word	0x20074fc0
   80878:	20074fb8 	.word	0x20074fb8

0008087c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8087c:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8087e:	3801      	subs	r0, #1
   80880:	2802      	cmp	r0, #2
   80882:	d80f      	bhi.n	808a4 <_write+0x28>
   80884:	4614      	mov	r4, r2
   80886:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
   80888:	b18c      	cbz	r4, 808ae <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8088a:	4b0a      	ldr	r3, [pc, #40]	; (808b4 <_write+0x38>)
   8088c:	6818      	ldr	r0, [r3, #0]
   8088e:	1c4e      	adds	r6, r1, #1
   80890:	4b09      	ldr	r3, [pc, #36]	; (808b8 <_write+0x3c>)
   80892:	681b      	ldr	r3, [r3, #0]
   80894:	7809      	ldrb	r1, [r1, #0]
   80896:	4798      	blx	r3
   80898:	2800      	cmp	r0, #0
   8089a:	db06      	blt.n	808aa <_write+0x2e>
			return -1;
		}
		++nChars;
   8089c:	3501      	adds	r5, #1
	for (; len != 0; --len) {
   8089e:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   808a0:	4631      	mov	r1, r6
   808a2:	e7f1      	b.n	80888 <_write+0xc>
		return -1;
   808a4:	f04f 35ff 	mov.w	r5, #4294967295
   808a8:	e001      	b.n	808ae <_write+0x32>
			return -1;
   808aa:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
   808ae:	4628      	mov	r0, r5
   808b0:	bd70      	pop	{r4, r5, r6, pc}
   808b2:	bf00      	nop
   808b4:	20074fc0 	.word	0x20074fc0
   808b8:	20074fbc 	.word	0x20074fbc

000808bc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   808bc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   808be:	23ac      	movs	r3, #172	; 0xac
   808c0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   808c2:	680b      	ldr	r3, [r1, #0]
   808c4:	684a      	ldr	r2, [r1, #4]
   808c6:	fbb3 f3f2 	udiv	r3, r3, r2
   808ca:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   808cc:	1e5c      	subs	r4, r3, #1
   808ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   808d2:	4294      	cmp	r4, r2
   808d4:	d80b      	bhi.n	808ee <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   808d6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   808d8:	688b      	ldr	r3, [r1, #8]
   808da:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808dc:	f240 2302 	movw	r3, #514	; 0x202
   808e0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808e4:	2350      	movs	r3, #80	; 0x50
   808e6:	6003      	str	r3, [r0, #0]

	return 0;
   808e8:	2000      	movs	r0, #0
}
   808ea:	bc10      	pop	{r4}
   808ec:	4770      	bx	lr
		return 1;
   808ee:	2001      	movs	r0, #1
   808f0:	e7fb      	b.n	808ea <uart_init+0x2e>

000808f2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808f2:	6943      	ldr	r3, [r0, #20]
   808f4:	f013 0f02 	tst.w	r3, #2
   808f8:	d002      	beq.n	80900 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808fa:	61c1      	str	r1, [r0, #28]
	return 0;
   808fc:	2000      	movs	r0, #0
   808fe:	4770      	bx	lr
		return 1;
   80900:	2001      	movs	r0, #1
}
   80902:	4770      	bx	lr

00080904 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80904:	6943      	ldr	r3, [r0, #20]
   80906:	f013 0f01 	tst.w	r3, #1
   8090a:	d003      	beq.n	80914 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8090c:	6983      	ldr	r3, [r0, #24]
   8090e:	700b      	strb	r3, [r1, #0]
	return 0;
   80910:	2000      	movs	r0, #0
   80912:	4770      	bx	lr
		return 1;
   80914:	2001      	movs	r0, #1
}
   80916:	4770      	bx	lr

00080918 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80918:	6943      	ldr	r3, [r0, #20]
   8091a:	f013 0f02 	tst.w	r3, #2
   8091e:	d004      	beq.n	8092a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80920:	f3c1 0108 	ubfx	r1, r1, #0, #9
   80924:	61c1      	str	r1, [r0, #28]
	return 0;
   80926:	2000      	movs	r0, #0
   80928:	4770      	bx	lr
		return 1;
   8092a:	2001      	movs	r0, #1
}
   8092c:	4770      	bx	lr

0008092e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8092e:	6943      	ldr	r3, [r0, #20]
   80930:	f013 0f01 	tst.w	r3, #1
   80934:	d005      	beq.n	80942 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80936:	6983      	ldr	r3, [r0, #24]
   80938:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8093c:	600b      	str	r3, [r1, #0]

	return 0;
   8093e:	2000      	movs	r0, #0
   80940:	4770      	bx	lr
		return 1;
   80942:	2001      	movs	r0, #1
}
   80944:	4770      	bx	lr

00080946 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   80946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8094a:	6043      	str	r3, [r0, #4]
   8094c:	4770      	bx	lr
	...

00080950 <recv_byte>:
{
	static unsigned int bit = 0;
	static unsigned char data = 0;
	
	/* check if bits is error */
	if (bit >= MDI_RCV_BITS)
   80950:	4b3b      	ldr	r3, [pc, #236]	; (80a40 <recv_byte+0xf0>)
   80952:	681b      	ldr	r3, [r3, #0]
   80954:	2b08      	cmp	r3, #8
   80956:	d902      	bls.n	8095e <recv_byte+0xe>
		bit = 0;
   80958:	2200      	movs	r2, #0
   8095a:	4b39      	ldr	r3, [pc, #228]	; (80a40 <recv_byte+0xf0>)
   8095c:	601a      	str	r2, [r3, #0]
	
	if (mdi.status == INIT)	{
   8095e:	4b39      	ldr	r3, [pc, #228]	; (80a44 <recv_byte+0xf4>)
   80960:	785b      	ldrb	r3, [r3, #1]
   80962:	2b09      	cmp	r3, #9
   80964:	d01f      	beq.n	809a6 <recv_byte+0x56>
{
   80966:	b510      	push	{r4, lr}
   80968:	b082      	sub	sp, #8
		bit = 0;
		return data;
	}
	
	/* bit 0 is start bit */
	if (bit == 0) {
   8096a:	4b35      	ldr	r3, [pc, #212]	; (80a40 <recv_byte+0xf0>)
   8096c:	681b      	ldr	r3, [r3, #0]
   8096e:	bb1b      	cbnz	r3, 809b8 <recv_byte+0x68>
		delay_us(5);
   80970:	201e      	movs	r0, #30
   80972:	f002 fc21 	bl	831b8 <__portable_delay_cycles_veneer>
		pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80976:	2201      	movs	r2, #1
   80978:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8097c:	4832      	ldr	r0, [pc, #200]	; (80a48 <recv_byte+0xf8>)
   8097e:	f000 fd6e 	bl	8145e <pio_set_input>
		mdi.status = BUSY;
   80982:	220b      	movs	r2, #11
   80984:	4b2f      	ldr	r3, [pc, #188]	; (80a44 <recv_byte+0xf4>)
   80986:	705a      	strb	r2, [r3, #1]
		data = 0;
   80988:	2300      	movs	r3, #0
   8098a:	4a30      	ldr	r2, [pc, #192]	; (80a4c <recv_byte+0xfc>)
   8098c:	7013      	strb	r3, [r2, #0]
		bit = 0;
   8098e:	4a2c      	ldr	r2, [pc, #176]	; (80a40 <recv_byte+0xf0>)
   80990:	6013      	str	r3, [r2, #0]
		pio_clear(PIOA, PIO_PA14);
		pio_set(PIOA, PIO_PA14);
	}
	
	/* check if one byte received */
	if (++bit >= MDI_RCV_BITS) {
   80992:	4a2b      	ldr	r2, [pc, #172]	; (80a40 <recv_byte+0xf0>)
   80994:	6813      	ldr	r3, [r2, #0]
   80996:	3301      	adds	r3, #1
   80998:	6013      	str	r3, [r2, #0]
   8099a:	2b08      	cmp	r3, #8
   8099c:	d827      	bhi.n	809ee <recv_byte+0x9e>
		pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
		delay_us(5);
		mdi.status = DONE;
	}
	
	return data;	
   8099e:	4b2b      	ldr	r3, [pc, #172]	; (80a4c <recv_byte+0xfc>)
   809a0:	7818      	ldrb	r0, [r3, #0]
}
   809a2:	b002      	add	sp, #8
   809a4:	bd10      	pop	{r4, pc}
		mdi.status = IDLE;
   809a6:	220a      	movs	r2, #10
   809a8:	4b26      	ldr	r3, [pc, #152]	; (80a44 <recv_byte+0xf4>)
   809aa:	705a      	strb	r2, [r3, #1]
		bit = 0;
   809ac:	2200      	movs	r2, #0
   809ae:	4b24      	ldr	r3, [pc, #144]	; (80a40 <recv_byte+0xf0>)
   809b0:	601a      	str	r2, [r3, #0]
		return data;
   809b2:	4b26      	ldr	r3, [pc, #152]	; (80a4c <recv_byte+0xfc>)
   809b4:	7818      	ldrb	r0, [r3, #0]
   809b6:	4770      	bx	lr
		data |= pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB26) << (bit - 1);
   809b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   809bc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   809c0:	4821      	ldr	r0, [pc, #132]	; (80a48 <recv_byte+0xf8>)
   809c2:	f000 fd01 	bl	813c8 <pio_get>
   809c6:	4b1e      	ldr	r3, [pc, #120]	; (80a40 <recv_byte+0xf0>)
   809c8:	681b      	ldr	r3, [r3, #0]
   809ca:	3b01      	subs	r3, #1
   809cc:	4098      	lsls	r0, r3
   809ce:	4a1f      	ldr	r2, [pc, #124]	; (80a4c <recv_byte+0xfc>)
   809d0:	7813      	ldrb	r3, [r2, #0]
   809d2:	4318      	orrs	r0, r3
   809d4:	7010      	strb	r0, [r2, #0]
		pio_clear(PIOA, PIO_PA14);
   809d6:	4c1e      	ldr	r4, [pc, #120]	; (80a50 <recv_byte+0x100>)
   809d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   809dc:	4620      	mov	r0, r4
   809de:	f000 fcf1 	bl	813c4 <pio_clear>
		pio_set(PIOA, PIO_PA14);
   809e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   809e6:	4620      	mov	r0, r4
   809e8:	f000 fcea 	bl	813c0 <pio_set>
   809ec:	e7d1      	b.n	80992 <recv_byte+0x42>
	unsigned long timeout = 0;
   809ee:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   809f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809f4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   809f8:	4815      	ldr	r0, [pc, #84]	; (80a50 <recv_byte+0x100>)
   809fa:	f000 fce5 	bl	813c8 <pio_get>
   809fe:	2801      	cmp	r0, #1
   80a00:	d109      	bne.n	80a16 <recv_byte+0xc6>
		delay_us(1);
   80a02:	2006      	movs	r0, #6
   80a04:	f002 fbd8 	bl	831b8 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   80a08:	3401      	adds	r4, #1
   80a0a:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   80a0e:	d3ef      	bcc.n	809f0 <recv_byte+0xa0>
			return -1;
   80a10:	f04f 33ff 	mov.w	r3, #4294967295
   80a14:	e000      	b.n	80a18 <recv_byte+0xc8>
	return 0;
   80a16:	2300      	movs	r3, #0
		if (wait_mscl_low() < 0)
   80a18:	2b00      	cmp	r3, #0
   80a1a:	da01      	bge.n	80a20 <recv_byte+0xd0>
			return -1;
   80a1c:	20ff      	movs	r0, #255	; 0xff
   80a1e:	e7c0      	b.n	809a2 <recv_byte+0x52>
		pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
   80a20:	2201      	movs	r2, #1
   80a22:	9200      	str	r2, [sp, #0]
   80a24:	2300      	movs	r3, #0
   80a26:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80a2a:	4807      	ldr	r0, [pc, #28]	; (80a48 <recv_byte+0xf8>)
   80a2c:	f000 fd37 	bl	8149e <pio_set_output>
		delay_us(5);
   80a30:	201e      	movs	r0, #30
   80a32:	f002 fbc1 	bl	831b8 <__portable_delay_cycles_veneer>
		mdi.status = DONE;
   80a36:	220c      	movs	r2, #12
   80a38:	4b02      	ldr	r3, [pc, #8]	; (80a44 <recv_byte+0xf4>)
   80a3a:	705a      	strb	r2, [r3, #1]
   80a3c:	e7af      	b.n	8099e <recv_byte+0x4e>
   80a3e:	bf00      	nop
   80a40:	20072a9c 	.word	0x20072a9c
   80a44:	200701d8 	.word	0x200701d8
   80a48:	400e1000 	.word	0x400e1000
   80a4c:	20072aa4 	.word	0x20072aa4
   80a50:	400e0e00 	.word	0x400e0e00

00080a54 <send_byte>:
 *
 * return 0: success -1:error
 * send data called by external interrupt handler
 */
static int send_byte(unsigned char data)
{
   80a54:	b538      	push	{r3, r4, r5, lr}
   80a56:	4605      	mov	r5, r0
	static unsigned int bit = 0;
	
	/* check if bits is error */
	if (bit >= MDI_SND_BITS)
   80a58:	4b33      	ldr	r3, [pc, #204]	; (80b28 <send_byte+0xd4>)
   80a5a:	681b      	ldr	r3, [r3, #0]
   80a5c:	2b07      	cmp	r3, #7
   80a5e:	d902      	bls.n	80a66 <send_byte+0x12>
		bit = 0;
   80a60:	2200      	movs	r2, #0
   80a62:	4b31      	ldr	r3, [pc, #196]	; (80b28 <send_byte+0xd4>)
   80a64:	601a      	str	r2, [r3, #0]
	
	if (mdi.status == IDLE)	{
   80a66:	4b31      	ldr	r3, [pc, #196]	; (80b2c <send_byte+0xd8>)
   80a68:	785b      	ldrb	r3, [r3, #1]
   80a6a:	2b0a      	cmp	r3, #10
   80a6c:	d01e      	beq.n	80aac <send_byte+0x58>
		mdi.status = BUSY;
		bit = 0;
	}
	
	/* send the first bit */
	if (bit == 0) {
   80a6e:	4b2e      	ldr	r3, [pc, #184]	; (80b28 <send_byte+0xd4>)
   80a70:	681b      	ldr	r3, [r3, #0]
   80a72:	b93b      	cbnz	r3, 80a84 <send_byte+0x30>
		if ((data & 0x01) != 0)
   80a74:	f015 0f01 	tst.w	r5, #1
   80a78:	d01f      	beq.n	80aba <send_byte+0x66>
			pio_set(PIOB, PIO_PB26);
   80a7a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80a7e:	482c      	ldr	r0, [pc, #176]	; (80b30 <send_byte+0xdc>)
   80a80:	f000 fc9e 	bl	813c0 <pio_set>
	unsigned long timeout = 0;
   80a84:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   80a86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80a8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80a8e:	4829      	ldr	r0, [pc, #164]	; (80b34 <send_byte+0xe0>)
   80a90:	f000 fc9a 	bl	813c8 <pio_get>
   80a94:	2801      	cmp	r0, #1
   80a96:	d116      	bne.n	80ac6 <send_byte+0x72>
		delay_us(1);
   80a98:	2006      	movs	r0, #6
   80a9a:	f002 fb8d 	bl	831b8 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   80a9e:	3401      	adds	r4, #1
   80aa0:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   80aa4:	d3ef      	bcc.n	80a86 <send_byte+0x32>
			return -1;
   80aa6:	f04f 33ff 	mov.w	r3, #4294967295
   80aaa:	e00d      	b.n	80ac8 <send_byte+0x74>
		mdi.status = BUSY;
   80aac:	220b      	movs	r2, #11
   80aae:	4b1f      	ldr	r3, [pc, #124]	; (80b2c <send_byte+0xd8>)
   80ab0:	705a      	strb	r2, [r3, #1]
		bit = 0;
   80ab2:	2200      	movs	r2, #0
   80ab4:	4b1c      	ldr	r3, [pc, #112]	; (80b28 <send_byte+0xd4>)
   80ab6:	601a      	str	r2, [r3, #0]
   80ab8:	e7d9      	b.n	80a6e <send_byte+0x1a>
		else
			pio_clear(PIOB, PIO_PB26);
   80aba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80abe:	481c      	ldr	r0, [pc, #112]	; (80b30 <send_byte+0xdc>)
   80ac0:	f000 fc80 	bl	813c4 <pio_clear>
   80ac4:	e7de      	b.n	80a84 <send_byte+0x30>
	return 0;
   80ac6:	2300      	movs	r3, #0
	}
	
	if (wait_mscl_low() < 0)
   80ac8:	2b00      	cmp	r3, #0
   80aca:	db29      	blt.n	80b20 <send_byte+0xcc>
		return -1;

	/* send the other bits */
	if (bit < (MDI_SND_BITS - 1)) {
   80acc:	4b16      	ldr	r3, [pc, #88]	; (80b28 <send_byte+0xd4>)
   80ace:	681b      	ldr	r3, [r3, #0]
   80ad0:	2b06      	cmp	r3, #6
   80ad2:	d80a      	bhi.n	80aea <send_byte+0x96>
		if ((data >> (bit + 1) & 0x01) != 0)
   80ad4:	3301      	adds	r3, #1
   80ad6:	fa45 f303 	asr.w	r3, r5, r3
   80ada:	f013 0f01 	tst.w	r3, #1
   80ade:	d00c      	beq.n	80afa <send_byte+0xa6>
			pio_set(PIOB, PIO_PB26);
   80ae0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80ae4:	4812      	ldr	r0, [pc, #72]	; (80b30 <send_byte+0xdc>)
   80ae6:	f000 fc6b 	bl	813c0 <pio_set>
		else
			pio_clear(PIOB, PIO_PB26);
	}
	
	/* check if one byte sent */
	if (++bit >= MDI_SND_BITS) {
   80aea:	4a0f      	ldr	r2, [pc, #60]	; (80b28 <send_byte+0xd4>)
   80aec:	6813      	ldr	r3, [r2, #0]
   80aee:	3301      	adds	r3, #1
   80af0:	6013      	str	r3, [r2, #0]
   80af2:	2b07      	cmp	r3, #7
   80af4:	d807      	bhi.n	80b06 <send_byte+0xb2>
		pio_set(PIOB, PIO_PB26);
		delay_us(500);
		mdi.status = DONE;
	}
	
	return data;	
   80af6:	4628      	mov	r0, r5
   80af8:	bd38      	pop	{r3, r4, r5, pc}
			pio_clear(PIOB, PIO_PB26);
   80afa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80afe:	480c      	ldr	r0, [pc, #48]	; (80b30 <send_byte+0xdc>)
   80b00:	f000 fc60 	bl	813c4 <pio_clear>
   80b04:	e7f1      	b.n	80aea <send_byte+0x96>
		pio_set(PIOB, PIO_PB26);
   80b06:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80b0a:	4809      	ldr	r0, [pc, #36]	; (80b30 <send_byte+0xdc>)
   80b0c:	f000 fc58 	bl	813c0 <pio_set>
		delay_us(500);
   80b10:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b14:	f002 fb50 	bl	831b8 <__portable_delay_cycles_veneer>
		mdi.status = DONE;
   80b18:	220c      	movs	r2, #12
   80b1a:	4b04      	ldr	r3, [pc, #16]	; (80b2c <send_byte+0xd8>)
   80b1c:	705a      	strb	r2, [r3, #1]
   80b1e:	e7ea      	b.n	80af6 <send_byte+0xa2>
		return -1;
   80b20:	f04f 30ff 	mov.w	r0, #4294967295
}
   80b24:	bd38      	pop	{r3, r4, r5, pc}
   80b26:	bf00      	nop
   80b28:	20072aa0 	.word	0x20072aa0
   80b2c:	200701d8 	.word	0x200701d8
   80b30:	400e1000 	.word	0x400e1000
   80b34:	400e0e00 	.word	0x400e0e00

00080b38 <enter_monitor_mode>:
{
   80b38:	b570      	push	{r4, r5, r6, lr}
   80b3a:	b082      	sub	sp, #8

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80b40:	4b3a      	ldr	r3, [pc, #232]	; (80c2c <enter_monitor_mode+0xf4>)
   80b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pio_clear(PIOA, PIO_PA19);
   80b46:	4d3a      	ldr	r5, [pc, #232]	; (80c30 <enter_monitor_mode+0xf8>)
   80b48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   80b4c:	4628      	mov	r0, r5
   80b4e:	f000 fc39 	bl	813c4 <pio_clear>
	delay_ms(100);
   80b52:	4e38      	ldr	r6, [pc, #224]	; (80c34 <enter_monitor_mode+0xfc>)
   80b54:	4630      	mov	r0, r6
   80b56:	f002 fb2f 	bl	831b8 <__portable_delay_cycles_veneer>
	pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
   80b5a:	4c37      	ldr	r4, [pc, #220]	; (80c38 <enter_monitor_mode+0x100>)
   80b5c:	2301      	movs	r3, #1
   80b5e:	9300      	str	r3, [sp, #0]
   80b60:	2300      	movs	r3, #0
   80b62:	461a      	mov	r2, r3
   80b64:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80b68:	4620      	mov	r0, r4
   80b6a:	f000 fc98 	bl	8149e <pio_set_output>
	delay_ms(100);
   80b6e:	4630      	mov	r0, r6
   80b70:	f002 fb22 	bl	831b8 <__portable_delay_cycles_veneer>
	pio_set(PIOA, PIO_PA19);	
   80b74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   80b78:	4628      	mov	r0, r5
   80b7a:	f000 fc21 	bl	813c0 <pio_set>
	delay_us(650);
   80b7e:	f640 703c 	movw	r0, #3900	; 0xf3c
   80b82:	f002 fb19 	bl	831b8 <__portable_delay_cycles_veneer>
	pio_set(PIOB, PIO_PB26);
   80b86:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80b8a:	4620      	mov	r0, r4
   80b8c:	f000 fc18 	bl	813c0 <pio_set>
	unsigned long timeout = 0;
   80b90:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   80b92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80b96:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b9a:	4825      	ldr	r0, [pc, #148]	; (80c30 <enter_monitor_mode+0xf8>)
   80b9c:	f000 fc14 	bl	813c8 <pio_get>
   80ba0:	2801      	cmp	r0, #1
   80ba2:	d109      	bne.n	80bb8 <enter_monitor_mode+0x80>
		delay_us(1);
   80ba4:	2006      	movs	r0, #6
   80ba6:	f002 fb07 	bl	831b8 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   80baa:	3401      	adds	r4, #1
   80bac:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   80bb0:	d3ef      	bcc.n	80b92 <enter_monitor_mode+0x5a>
			return -1;
   80bb2:	f04f 33ff 	mov.w	r3, #4294967295
   80bb6:	e000      	b.n	80bba <enter_monitor_mode+0x82>
	return 0;
   80bb8:	2300      	movs	r3, #0
	if (wait_mscl_low() < 0)
   80bba:	2b00      	cmp	r3, #0
   80bbc:	db2f      	blt.n	80c1e <enter_monitor_mode+0xe6>
	delay_us(2);
   80bbe:	200c      	movs	r0, #12
   80bc0:	f002 fafa 	bl	831b8 <__portable_delay_cycles_veneer>
	pio_clear(PIOB, PIO_PB26);
   80bc4:	4c1c      	ldr	r4, [pc, #112]	; (80c38 <enter_monitor_mode+0x100>)
   80bc6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80bca:	4620      	mov	r0, r4
   80bcc:	f000 fbfa 	bl	813c4 <pio_clear>
	mdi.status = INIT;
   80bd0:	2209      	movs	r2, #9
   80bd2:	4b1a      	ldr	r3, [pc, #104]	; (80c3c <enter_monitor_mode+0x104>)
   80bd4:	705a      	strb	r2, [r3, #1]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80bda:	4b14      	ldr	r3, [pc, #80]	; (80c2c <enter_monitor_mode+0xf4>)
   80bdc:	601a      	str	r2, [r3, #0]
	delay_us(10);
   80bde:	203c      	movs	r0, #60	; 0x3c
   80be0:	f002 faea 	bl	831b8 <__portable_delay_cycles_veneer>
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80be4:	2201      	movs	r2, #1
   80be6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80bea:	4620      	mov	r0, r4
   80bec:	f000 fc37 	bl	8145e <pio_set_input>
	timeout = 0;
   80bf0:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80bf2:	4b12      	ldr	r3, [pc, #72]	; (80c3c <enter_monitor_mode+0x104>)
   80bf4:	785b      	ldrb	r3, [r3, #1]
   80bf6:	2b0c      	cmp	r3, #12
   80bf8:	d007      	beq.n	80c0a <enter_monitor_mode+0xd2>
		if (++timeout >= TIMEOUT_DEV_ACK)
   80bfa:	3401      	adds	r4, #1
   80bfc:	4b10      	ldr	r3, [pc, #64]	; (80c40 <enter_monitor_mode+0x108>)
   80bfe:	429c      	cmp	r4, r3
   80c00:	d810      	bhi.n	80c24 <enter_monitor_mode+0xec>
		delay_us(1);
   80c02:	2006      	movs	r0, #6
   80c04:	f002 fad8 	bl	831b8 <__portable_delay_cycles_veneer>
   80c08:	e7f3      	b.n	80bf2 <enter_monitor_mode+0xba>
	if (mdi.data[0] != DEV_ACK)
   80c0a:	4b0c      	ldr	r3, [pc, #48]	; (80c3c <enter_monitor_mode+0x104>)
   80c0c:	789b      	ldrb	r3, [r3, #2]
   80c0e:	2b55      	cmp	r3, #85	; 0x55
   80c10:	d102      	bne.n	80c18 <enter_monitor_mode+0xe0>
	return 0;
   80c12:	2000      	movs	r0, #0
}
   80c14:	b002      	add	sp, #8
   80c16:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   80c18:	f04f 30ff 	mov.w	r0, #4294967295
   80c1c:	e7fa      	b.n	80c14 <enter_monitor_mode+0xdc>
		return -1;
   80c1e:	f04f 30ff 	mov.w	r0, #4294967295
   80c22:	e7f7      	b.n	80c14 <enter_monitor_mode+0xdc>
			return -1;
   80c24:	f04f 30ff 	mov.w	r0, #4294967295
   80c28:	e7f4      	b.n	80c14 <enter_monitor_mode+0xdc>
   80c2a:	bf00      	nop
   80c2c:	e000e100 	.word	0xe000e100
   80c30:	400e0e00 	.word	0x400e0e00
   80c34:	000927c0 	.word	0x000927c0
   80c38:	400e1000 	.word	0x400e1000
   80c3c:	200701d8 	.word	0x200701d8
   80c40:	00030d3f 	.word	0x00030d3f

00080c44 <send_data>:
 *
 * return 0: success -1:error
 * send data via external interrupt
 */
int send_data(unsigned char command, unsigned para, unsigned long len)
{				
   80c44:	b570      	push	{r4, r5, r6, lr}
   80c46:	b082      	sub	sp, #8
   80c48:	4616      	mov	r6, r2
	mdi.command = command;
   80c4a:	4b20      	ldr	r3, [pc, #128]	; (80ccc <send_data+0x88>)
   80c4c:	7098      	strb	r0, [r3, #2]
	mdi.para = para;
   80c4e:	70d9      	strb	r1, [r3, #3]
		
	if (mdi.type == RECV)
   80c50:	781b      	ldrb	r3, [r3, #0]
   80c52:	2b10      	cmp	r3, #16
   80c54:	d001      	beq.n	80c5a <send_data+0x16>
	return 0;
   80c56:	2500      	movs	r5, #0
   80c58:	e00e      	b.n	80c78 <send_data+0x34>
		delay_us(500);
   80c5a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80c5e:	f002 faab 	bl	831b8 <__portable_delay_cycles_veneer>
   80c62:	e7f8      	b.n	80c56 <send_data+0x12>
	return 0;
   80c64:	2300      	movs	r3, #0
		
	for (unsigned long i = 0; i < len; i++) {
		mdi.type = SEND;
		mdi.status = IDLE;
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);	
		if (wait_ops_done() < 0)
   80c66:	2b00      	cmp	r3, #0
   80c68:	db2c      	blt.n	80cc4 <send_data+0x80>
			return -1;
		mdi.transfer = i + 1;
   80c6a:	3501      	adds	r5, #1
   80c6c:	f242 0324 	movw	r3, #8228	; 0x2024
   80c70:	4a16      	ldr	r2, [pc, #88]	; (80ccc <send_data+0x88>)
   80c72:	50d5      	str	r5, [r2, r3]
		if (mdi.transfer >= len)
   80c74:	42ae      	cmp	r6, r5
   80c76:	d91f      	bls.n	80cb8 <send_data+0x74>
	for (unsigned long i = 0; i < len; i++) {
   80c78:	42b5      	cmp	r5, r6
   80c7a:	d220      	bcs.n	80cbe <send_data+0x7a>
		mdi.type = SEND;
   80c7c:	4b13      	ldr	r3, [pc, #76]	; (80ccc <send_data+0x88>)
   80c7e:	2220      	movs	r2, #32
   80c80:	701a      	strb	r2, [r3, #0]
		mdi.status = IDLE;
   80c82:	220a      	movs	r2, #10
   80c84:	705a      	strb	r2, [r3, #1]
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);	
   80c86:	2301      	movs	r3, #1
   80c88:	9300      	str	r3, [sp, #0]
   80c8a:	2300      	movs	r3, #0
   80c8c:	461a      	mov	r2, r3
   80c8e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80c92:	480f      	ldr	r0, [pc, #60]	; (80cd0 <send_data+0x8c>)
   80c94:	f000 fc03 	bl	8149e <pio_set_output>
	unsigned long timeout = 0;
   80c98:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80c9a:	4b0c      	ldr	r3, [pc, #48]	; (80ccc <send_data+0x88>)
   80c9c:	785b      	ldrb	r3, [r3, #1]
   80c9e:	2b0c      	cmp	r3, #12
   80ca0:	d0e0      	beq.n	80c64 <send_data+0x20>
		if (++timeout >= TIMEOUT_OPS_DONE)
   80ca2:	3401      	adds	r4, #1
   80ca4:	4b0b      	ldr	r3, [pc, #44]	; (80cd4 <send_data+0x90>)
   80ca6:	429c      	cmp	r4, r3
   80ca8:	d803      	bhi.n	80cb2 <send_data+0x6e>
		delay_us(1);
   80caa:	2006      	movs	r0, #6
   80cac:	f002 fa84 	bl	831b8 <__portable_delay_cycles_veneer>
   80cb0:	e7f3      	b.n	80c9a <send_data+0x56>
		return -1;
   80cb2:	f04f 33ff 	mov.w	r3, #4294967295
   80cb6:	e7d6      	b.n	80c66 <send_data+0x22>
			mdi.transfer = 0;
   80cb8:	2100      	movs	r1, #0
   80cba:	50d1      	str	r1, [r2, r3]
   80cbc:	e7dc      	b.n	80c78 <send_data+0x34>
	}
	
	return 0;
   80cbe:	2000      	movs	r0, #0
}
   80cc0:	b002      	add	sp, #8
   80cc2:	bd70      	pop	{r4, r5, r6, pc}
			return -1;
   80cc4:	f04f 30ff 	mov.w	r0, #4294967295
   80cc8:	e7fa      	b.n	80cc0 <send_data+0x7c>
   80cca:	bf00      	nop
   80ccc:	200701d8 	.word	0x200701d8
   80cd0:	400e1000 	.word	0x400e1000
   80cd4:	000f423f 	.word	0x000f423f

00080cd8 <recv_data>:
 *
 * return 0: success -1:error
 * recv data via external interrupt
 */
int recv_data(unsigned long len)
{		
   80cd8:	b570      	push	{r4, r5, r6, lr}
   80cda:	b082      	sub	sp, #8
   80cdc:	4606      	mov	r6, r0
	if (mdi.type == SEND)
   80cde:	4b1f      	ldr	r3, [pc, #124]	; (80d5c <recv_data+0x84>)
   80ce0:	781b      	ldrb	r3, [r3, #0]
   80ce2:	2b20      	cmp	r3, #32
   80ce4:	d001      	beq.n	80cea <recv_data+0x12>
	return 0;
   80ce6:	2500      	movs	r5, #0
   80ce8:	e00e      	b.n	80d08 <recv_data+0x30>
		delay_us(500);
   80cea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80cee:	f002 fa63 	bl	831b8 <__portable_delay_cycles_veneer>
   80cf2:	e7f8      	b.n	80ce6 <recv_data+0xe>
	return 0;
   80cf4:	2300      	movs	r3, #0
		
	for (unsigned long i = 0; i < len; i++) {
		mdi.type = RECV;
		mdi.status = IDLE;
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
		if (wait_ops_done() < 0)
   80cf6:	2b00      	cmp	r3, #0
   80cf8:	db2c      	blt.n	80d54 <recv_data+0x7c>
			return -1;
		mdi.transfer = i + 1;
   80cfa:	3501      	adds	r5, #1
   80cfc:	f242 0324 	movw	r3, #8228	; 0x2024
   80d00:	4a16      	ldr	r2, [pc, #88]	; (80d5c <recv_data+0x84>)
   80d02:	50d5      	str	r5, [r2, r3]
		if (mdi.transfer >= len)
   80d04:	42ae      	cmp	r6, r5
   80d06:	d91f      	bls.n	80d48 <recv_data+0x70>
	for (unsigned long i = 0; i < len; i++) {
   80d08:	42b5      	cmp	r5, r6
   80d0a:	d220      	bcs.n	80d4e <recv_data+0x76>
		mdi.type = RECV;
   80d0c:	4b13      	ldr	r3, [pc, #76]	; (80d5c <recv_data+0x84>)
   80d0e:	2210      	movs	r2, #16
   80d10:	701a      	strb	r2, [r3, #0]
		mdi.status = IDLE;
   80d12:	220a      	movs	r2, #10
   80d14:	705a      	strb	r2, [r3, #1]
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
   80d16:	2301      	movs	r3, #1
   80d18:	9300      	str	r3, [sp, #0]
   80d1a:	2300      	movs	r3, #0
   80d1c:	461a      	mov	r2, r3
   80d1e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80d22:	480f      	ldr	r0, [pc, #60]	; (80d60 <recv_data+0x88>)
   80d24:	f000 fbbb 	bl	8149e <pio_set_output>
	unsigned long timeout = 0;
   80d28:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80d2a:	4b0c      	ldr	r3, [pc, #48]	; (80d5c <recv_data+0x84>)
   80d2c:	785b      	ldrb	r3, [r3, #1]
   80d2e:	2b0c      	cmp	r3, #12
   80d30:	d0e0      	beq.n	80cf4 <recv_data+0x1c>
		if (++timeout >= TIMEOUT_OPS_DONE)
   80d32:	3401      	adds	r4, #1
   80d34:	4b0b      	ldr	r3, [pc, #44]	; (80d64 <recv_data+0x8c>)
   80d36:	429c      	cmp	r4, r3
   80d38:	d803      	bhi.n	80d42 <recv_data+0x6a>
		delay_us(1);
   80d3a:	2006      	movs	r0, #6
   80d3c:	f002 fa3c 	bl	831b8 <__portable_delay_cycles_veneer>
   80d40:	e7f3      	b.n	80d2a <recv_data+0x52>
		return -1;
   80d42:	f04f 33ff 	mov.w	r3, #4294967295
   80d46:	e7d6      	b.n	80cf6 <recv_data+0x1e>
			mdi.transfer = 0;
   80d48:	2100      	movs	r1, #0
   80d4a:	50d1      	str	r1, [r2, r3]
   80d4c:	e7dc      	b.n	80d08 <recv_data+0x30>
	}
	
	return 0;
   80d4e:	2000      	movs	r0, #0
}
   80d50:	b002      	add	sp, #8
   80d52:	bd70      	pop	{r4, r5, r6, pc}
			return -1;
   80d54:	f04f 30ff 	mov.w	r0, #4294967295
   80d58:	e7fa      	b.n	80d50 <recv_data+0x78>
   80d5a:	bf00      	nop
   80d5c:	200701d8 	.word	0x200701d8
   80d60:	400e1000 	.word	0x400e1000
   80d64:	000f423f 	.word	0x000f423f

00080d68 <data_handler>:
 * return none
 * external interrupt handler
 */
void data_handler(unsigned long id, unsigned long mask)
{	
	if ((id == ID_PIOA) && (mask == PIO_PA15))	{
   80d68:	280b      	cmp	r0, #11
   80d6a:	d000      	beq.n	80d6e <data_handler+0x6>
   80d6c:	4770      	bx	lr
   80d6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   80d72:	d1fb      	bne.n	80d6c <data_handler+0x4>
{	
   80d74:	b538      	push	{r3, r4, r5, lr}
		if (mdi.type == RECV) 
   80d76:	4b0b      	ldr	r3, [pc, #44]	; (80da4 <data_handler+0x3c>)
   80d78:	781b      	ldrb	r3, [r3, #0]
   80d7a:	2b10      	cmp	r3, #16
   80d7c:	d008      	beq.n	80d90 <data_handler+0x28>
			mdi.data[mdi.transfer] = recv_byte();
		else
			send_byte(mdi.data[mdi.transfer]);
   80d7e:	4b09      	ldr	r3, [pc, #36]	; (80da4 <data_handler+0x3c>)
   80d80:	f242 0224 	movw	r2, #8228	; 0x2024
   80d84:	589a      	ldr	r2, [r3, r2]
   80d86:	4413      	add	r3, r2
   80d88:	7898      	ldrb	r0, [r3, #2]
   80d8a:	f7ff fe63 	bl	80a54 <send_byte>
   80d8e:	bd38      	pop	{r3, r4, r5, pc}
			mdi.data[mdi.transfer] = recv_byte();
   80d90:	4c04      	ldr	r4, [pc, #16]	; (80da4 <data_handler+0x3c>)
   80d92:	f242 0324 	movw	r3, #8228	; 0x2024
   80d96:	58e5      	ldr	r5, [r4, r3]
   80d98:	f7ff fdda 	bl	80950 <recv_byte>
   80d9c:	442c      	add	r4, r5
   80d9e:	70a0      	strb	r0, [r4, #2]
   80da0:	bd38      	pop	{r3, r4, r5, pc}
   80da2:	bf00      	nop
   80da4:	200701d8 	.word	0x200701d8

00080da8 <compare_eerom>:
 */
static int compare_eerom(void)
{
	int status = 0;

	if (uart_ops.len > EEROM_SIZE)
   80da8:	4b19      	ldr	r3, [pc, #100]	; (80e10 <compare_eerom+0x68>)
   80daa:	891b      	ldrh	r3, [r3, #8]
   80dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   80db0:	d827      	bhi.n	80e02 <compare_eerom+0x5a>
{
   80db2:	b510      	push	{r4, lr}
		return -1;
		
	/* send command */
	status = send_data(C_EE_DUMP, 0, 0x01);
   80db4:	2201      	movs	r2, #1
   80db6:	2100      	movs	r1, #0
   80db8:	200e      	movs	r0, #14
   80dba:	f7ff ff43 	bl	80c44 <send_data>
   80dbe:	4604      	mov	r4, r0
	
	/* check eecon */	
	status |= recv_data(EEROM_SIZE);
   80dc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80dc4:	f7ff ff88 	bl	80cd8 <recv_data>
  	if (status < 0)
   80dc8:	4320      	orrs	r0, r4
   80dca:	d41d      	bmi.n	80e08 <compare_eerom+0x60>
   80dcc:	2300      	movs	r3, #0
   80dce:	e001      	b.n	80dd4 <compare_eerom+0x2c>
  		return -1;
	
	for (unsigned short i = 0; i < uart_ops.len; i++) {
   80dd0:	3301      	adds	r3, #1
   80dd2:	b29b      	uxth	r3, r3
   80dd4:	4a0e      	ldr	r2, [pc, #56]	; (80e10 <compare_eerom+0x68>)
   80dd6:	8912      	ldrh	r2, [r2, #8]
   80dd8:	4293      	cmp	r3, r2
   80dda:	d211      	bcs.n	80e00 <compare_eerom+0x58>
		if ((i < 4) || ((i >= (125 * 4)) && (i < (128* 4))))
   80ddc:	2b03      	cmp	r3, #3
   80dde:	d9f7      	bls.n	80dd0 <compare_eerom+0x28>
   80de0:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
   80de4:	b292      	uxth	r2, r2
   80de6:	2a0b      	cmp	r2, #11
   80de8:	d9f2      	bls.n	80dd0 <compare_eerom+0x28>
			continue;

		if (chip_data.erom[i] != mdi.data[i])
   80dea:	4a0a      	ldr	r2, [pc, #40]	; (80e14 <compare_eerom+0x6c>)
   80dec:	441a      	add	r2, r3
   80dee:	7a11      	ldrb	r1, [r2, #8]
   80df0:	4a09      	ldr	r2, [pc, #36]	; (80e18 <compare_eerom+0x70>)
   80df2:	441a      	add	r2, r3
   80df4:	7892      	ldrb	r2, [r2, #2]
   80df6:	4291      	cmp	r1, r2
   80df8:	d0ea      	beq.n	80dd0 <compare_eerom+0x28>
			return -1;
   80dfa:	f04f 30ff 	mov.w	r0, #4294967295
	}
		
	return status;	
}
   80dfe:	bd10      	pop	{r4, pc}
   80e00:	bd10      	pop	{r4, pc}
		return -1;
   80e02:	f04f 30ff 	mov.w	r0, #4294967295
   80e06:	4770      	bx	lr
  		return -1;
   80e08:	f04f 30ff 	mov.w	r0, #4294967295
   80e0c:	bd10      	pop	{r4, pc}
   80e0e:	bf00      	nop
   80e10:	20072b54 	.word	0x20072b54
   80e14:	20072b68 	.word	0x20072b68
   80e18:	200701d8 	.word	0x200701d8

00080e1c <compare_erom>:
	if (uart_ops.len > EROM_SIZE)
   80e1c:	4b16      	ldr	r3, [pc, #88]	; (80e78 <compare_erom+0x5c>)
   80e1e:	891b      	ldrh	r3, [r3, #8]
   80e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   80e24:	d81e      	bhi.n	80e64 <compare_erom+0x48>
{
   80e26:	b510      	push	{r4, lr}
	status = send_data(C_ER_DUMP, 0, 0x01);
   80e28:	2201      	movs	r2, #1
   80e2a:	2100      	movs	r1, #0
   80e2c:	200f      	movs	r0, #15
   80e2e:	f7ff ff09 	bl	80c44 <send_data>
   80e32:	4604      	mov	r4, r0
	status |= recv_data(EROM_SIZE);
   80e34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   80e38:	f7ff ff4e 	bl	80cd8 <recv_data>
	if (status < 0)
   80e3c:	4320      	orrs	r0, r4
   80e3e:	d414      	bmi.n	80e6a <compare_erom+0x4e>
   80e40:	2300      	movs	r3, #0
	for (unsigned short i = 0; i < uart_ops.len - 1; i++) {
   80e42:	4a0d      	ldr	r2, [pc, #52]	; (80e78 <compare_erom+0x5c>)
   80e44:	8912      	ldrh	r2, [r2, #8]
   80e46:	3a01      	subs	r2, #1
   80e48:	4293      	cmp	r3, r2
   80e4a:	da0a      	bge.n	80e62 <compare_erom+0x46>
		if (chip_data.erom[i] != mdi.data[i])
   80e4c:	4a0b      	ldr	r2, [pc, #44]	; (80e7c <compare_erom+0x60>)
   80e4e:	441a      	add	r2, r3
   80e50:	7a11      	ldrb	r1, [r2, #8]
   80e52:	4a0b      	ldr	r2, [pc, #44]	; (80e80 <compare_erom+0x64>)
   80e54:	441a      	add	r2, r3
   80e56:	7892      	ldrb	r2, [r2, #2]
   80e58:	4291      	cmp	r1, r2
   80e5a:	d109      	bne.n	80e70 <compare_erom+0x54>
	for (unsigned short i = 0; i < uart_ops.len - 1; i++) {
   80e5c:	3301      	adds	r3, #1
   80e5e:	b29b      	uxth	r3, r3
   80e60:	e7ef      	b.n	80e42 <compare_erom+0x26>
   80e62:	bd10      	pop	{r4, pc}
		return -1;
   80e64:	f04f 30ff 	mov.w	r0, #4294967295
   80e68:	4770      	bx	lr
		return -1;
   80e6a:	f04f 30ff 	mov.w	r0, #4294967295
   80e6e:	bd10      	pop	{r4, pc}
			return -1;	
   80e70:	f04f 30ff 	mov.w	r0, #4294967295
}
   80e74:	bd10      	pop	{r4, pc}
   80e76:	bf00      	nop
   80e78:	20072b54 	.word	0x20072b54
   80e7c:	20072b68 	.word	0x20072b68
   80e80:	200701d8 	.word	0x200701d8

00080e84 <ee_prog_conf>:
{
   80e84:	b530      	push	{r4, r5, lr}
   80e86:	b083      	sub	sp, #12
	volatile unsigned char byte2 = 0, byte3 = 0;
   80e88:	2300      	movs	r3, #0
   80e8a:	f88d 3007 	strb.w	r3, [sp, #7]
   80e8e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (page != 127) 
   80e92:	287f      	cmp	r0, #127	; 0x7f
   80e94:	d122      	bne.n	80edc <ee_prog_conf+0x58>
	byte2 = chip_data.eeprom[127 * 4 + 2];
   80e96:	4b13      	ldr	r3, [pc, #76]	; (80ee4 <ee_prog_conf+0x60>)
   80e98:	f242 2226 	movw	r2, #8742	; 0x2226
   80e9c:	5c9a      	ldrb	r2, [r3, r2]
   80e9e:	f88d 2007 	strb.w	r2, [sp, #7]
	byte3 = chip_data.eeprom[127 * 4 + 3];
   80ea2:	f242 2227 	movw	r2, #8743	; 0x2227
   80ea6:	5c9b      	ldrb	r3, [r3, r2]
   80ea8:	f88d 3006 	strb.w	r3, [sp, #6]
	mdi.data[2] = byte3;
   80eac:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80eb0:	4d0d      	ldr	r5, [pc, #52]	; (80ee8 <ee_prog_conf+0x64>)
   80eb2:	712b      	strb	r3, [r5, #4]
	status = send_data(C_PROG_CONFIG, byte2, 0x03);
   80eb4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80eb8:	2203      	movs	r2, #3
   80eba:	2014      	movs	r0, #20
   80ebc:	f7ff fec2 	bl	80c44 <send_data>
   80ec0:	4604      	mov	r4, r0
	status |= recv_data(0x01);
   80ec2:	2001      	movs	r0, #1
   80ec4:	f7ff ff08 	bl	80cd8 <recv_data>
   80ec8:	4320      	orrs	r0, r4
	if ((mdi.data[0] & 0xC0) != 0x00)
   80eca:	78ab      	ldrb	r3, [r5, #2]
   80ecc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   80ed0:	d101      	bne.n	80ed6 <ee_prog_conf+0x52>
}
   80ed2:	b003      	add	sp, #12
   80ed4:	bd30      	pop	{r4, r5, pc}
		return -1;
   80ed6:	f04f 30ff 	mov.w	r0, #4294967295
   80eda:	e7fa      	b.n	80ed2 <ee_prog_conf+0x4e>
		return -1;
   80edc:	f04f 30ff 	mov.w	r0, #4294967295
   80ee0:	e7f7      	b.n	80ed2 <ee_prog_conf+0x4e>
   80ee2:	bf00      	nop
   80ee4:	20072b68 	.word	0x20072b68
   80ee8:	200701d8 	.word	0x200701d8

00080eec <compare_eerom_buf>:
	if (uart_ops.data == NULL)
   80eec:	4b0e      	ldr	r3, [pc, #56]	; (80f28 <compare_eerom_buf+0x3c>)
   80eee:	685b      	ldr	r3, [r3, #4]
   80ef0:	b1b3      	cbz	r3, 80f20 <compare_eerom_buf+0x34>
{
   80ef2:	b510      	push	{r4, lr}
	crc32_expect = uart_ops.data[0] | (uart_ops.data[1] << 8) | (uart_ops.data[2] << 16) | (uart_ops.data[3] << 24);
   80ef4:	781c      	ldrb	r4, [r3, #0]
   80ef6:	785a      	ldrb	r2, [r3, #1]
   80ef8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   80efc:	789a      	ldrb	r2, [r3, #2]
   80efe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   80f02:	78db      	ldrb	r3, [r3, #3]
   80f04:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
	crc32 = crc32_caculate(chip_data.eeprom, chip_data.eeprom_len);
   80f08:	4b08      	ldr	r3, [pc, #32]	; (80f2c <compare_eerom_buf+0x40>)
   80f0a:	88d9      	ldrh	r1, [r3, #6]
   80f0c:	4808      	ldr	r0, [pc, #32]	; (80f30 <compare_eerom_buf+0x44>)
   80f0e:	f7ff f9cb 	bl	802a8 <crc32_caculate>
	if (crc32 != crc32_expect)
   80f12:	4284      	cmp	r4, r0
   80f14:	d101      	bne.n	80f1a <compare_eerom_buf+0x2e>
   return 0;
   80f16:	2000      	movs	r0, #0
}
   80f18:	bd10      	pop	{r4, pc}
		return -1;
   80f1a:	f04f 30ff 	mov.w	r0, #4294967295
   80f1e:	bd10      	pop	{r4, pc}
		return -1;
   80f20:	f04f 30ff 	mov.w	r0, #4294967295
   80f24:	4770      	bx	lr
   80f26:	bf00      	nop
   80f28:	20072b54 	.word	0x20072b54
   80f2c:	20072b68 	.word	0x20072b68
   80f30:	20074b90 	.word	0x20074b90

00080f34 <compare_erom_buf>:
	if (uart_ops.data == NULL)
   80f34:	4b0e      	ldr	r3, [pc, #56]	; (80f70 <compare_erom_buf+0x3c>)
   80f36:	685b      	ldr	r3, [r3, #4]
   80f38:	b1b3      	cbz	r3, 80f68 <compare_erom_buf+0x34>
{
   80f3a:	b510      	push	{r4, lr}
	crc32_expect = uart_ops.data[0] | (uart_ops.data[1] << 8) | (uart_ops.data[2] << 16) | (uart_ops.data[3] << 24);
   80f3c:	781c      	ldrb	r4, [r3, #0]
   80f3e:	785a      	ldrb	r2, [r3, #1]
   80f40:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   80f44:	789a      	ldrb	r2, [r3, #2]
   80f46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   80f4a:	78db      	ldrb	r3, [r3, #3]
   80f4c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
	crc32 = crc32_caculate(chip_data.erom, chip_data.erom_len);
   80f50:	4808      	ldr	r0, [pc, #32]	; (80f74 <compare_erom_buf+0x40>)
   80f52:	8881      	ldrh	r1, [r0, #4]
   80f54:	3008      	adds	r0, #8
   80f56:	f7ff f9a7 	bl	802a8 <crc32_caculate>
	if (crc32 != crc32_expect)
   80f5a:	4284      	cmp	r4, r0
   80f5c:	d101      	bne.n	80f62 <compare_erom_buf+0x2e>
   return 0;
   80f5e:	2000      	movs	r0, #0
}
   80f60:	bd10      	pop	{r4, pc}
		return -1;
   80f62:	f04f 30ff 	mov.w	r0, #4294967295
   80f66:	bd10      	pop	{r4, pc}
		return -1;
   80f68:	f04f 30ff 	mov.w	r0, #4294967295
   80f6c:	4770      	bx	lr
   80f6e:	bf00      	nop
   80f70:	20072b54 	.word	0x20072b54
   80f74:	20072b68 	.word	0x20072b68

00080f78 <dump_eerom>:
{
   80f78:	b538      	push	{r3, r4, r5, lr}
	send_data(C_EE_DUMP, 0, 0x01);
   80f7a:	2201      	movs	r2, #1
   80f7c:	2100      	movs	r1, #0
   80f7e:	200e      	movs	r0, #14
   80f80:	f7ff fe60 	bl	80c44 <send_data>
	status = recv_data(EEROM_SIZE);
   80f84:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80f88:	f7ff fea6 	bl	80cd8 <recv_data>
	if (status == 0) {
   80f8c:	4604      	mov	r4, r0
   80f8e:	b108      	cbz	r0, 80f94 <dump_eerom+0x1c>
}
   80f90:	4620      	mov	r0, r4
   80f92:	bd38      	pop	{r3, r4, r5, pc}
		revert(mdi.data, EEROM_SIZE);	
   80f94:	4d06      	ldr	r5, [pc, #24]	; (80fb0 <dump_eerom+0x38>)
   80f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80f9a:	4628      	mov	r0, r5
   80f9c:	f7ff f9ce 	bl	8033c <revert>
		usart_serial_write_packet((Usart *)UART, mdi.data, EEROM_SIZE);
   80fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fa4:	4629      	mov	r1, r5
   80fa6:	4803      	ldr	r0, [pc, #12]	; (80fb4 <dump_eerom+0x3c>)
   80fa8:	f7ff fb9e 	bl	806e8 <usart_serial_write_packet>
	return status;	
   80fac:	e7f0      	b.n	80f90 <dump_eerom+0x18>
   80fae:	bf00      	nop
   80fb0:	200701da 	.word	0x200701da
   80fb4:	400e0800 	.word	0x400e0800

00080fb8 <dump_eeprom_buf>:
{
   80fb8:	b510      	push	{r4, lr}
	if (chip_data.eeprom_crc32 != 0x00000000) {	
   80fba:	f242 434c 	movw	r3, #9292	; 0x244c
   80fbe:	4a0c      	ldr	r2, [pc, #48]	; (80ff0 <dump_eeprom_buf+0x38>)
   80fc0:	58d3      	ldr	r3, [r2, r3]
   80fc2:	b14b      	cbz	r3, 80fd8 <dump_eeprom_buf+0x20>
		crc32 = crc32_caculate(chip_data.eeprom, chip_data.eeprom_len);
   80fc4:	4614      	mov	r4, r2
   80fc6:	88d1      	ldrh	r1, [r2, #6]
   80fc8:	480a      	ldr	r0, [pc, #40]	; (80ff4 <dump_eeprom_buf+0x3c>)
   80fca:	f7ff f96d 	bl	802a8 <crc32_caculate>
		if (crc32 != chip_data.eeprom_crc32)
   80fce:	f242 434c 	movw	r3, #9292	; 0x244c
   80fd2:	58e3      	ldr	r3, [r4, r3]
   80fd4:	4298      	cmp	r0, r3
   80fd6:	d107      	bne.n	80fe8 <dump_eeprom_buf+0x30>
	usart_serial_write_packet((Usart *)UART, chip_data.eeprom, EEROM_SIZE);
   80fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fdc:	4905      	ldr	r1, [pc, #20]	; (80ff4 <dump_eeprom_buf+0x3c>)
   80fde:	4806      	ldr	r0, [pc, #24]	; (80ff8 <dump_eeprom_buf+0x40>)
   80fe0:	f7ff fb82 	bl	806e8 <usart_serial_write_packet>
   return 0;
   80fe4:	2000      	movs	r0, #0
   80fe6:	bd10      	pop	{r4, pc}
			return -1;
   80fe8:	f04f 30ff 	mov.w	r0, #4294967295
}
   80fec:	bd10      	pop	{r4, pc}
   80fee:	bf00      	nop
   80ff0:	20072b68 	.word	0x20072b68
   80ff4:	20074b90 	.word	0x20074b90
   80ff8:	400e0800 	.word	0x400e0800

00080ffc <dump_erom>:
{
   80ffc:	b510      	push	{r4, lr}
	send_data(C_ER_DUMP, 0, 0x01);
   80ffe:	2201      	movs	r2, #1
   81000:	2100      	movs	r1, #0
   81002:	200f      	movs	r0, #15
   81004:	f7ff fe1e 	bl	80c44 <send_data>
	status = recv_data(EROM_SIZE);
   81008:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   8100c:	f7ff fe64 	bl	80cd8 <recv_data>
	if (status == 0)
   81010:	4604      	mov	r4, r0
   81012:	b108      	cbz	r0, 81018 <dump_erom+0x1c>
}
   81014:	4620      	mov	r0, r4
   81016:	bd10      	pop	{r4, pc}
		usart_serial_write_packet((Usart *)UART, mdi.data, EROM_SIZE);
   81018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8101c:	4902      	ldr	r1, [pc, #8]	; (81028 <dump_erom+0x2c>)
   8101e:	4803      	ldr	r0, [pc, #12]	; (8102c <dump_erom+0x30>)
   81020:	f7ff fb62 	bl	806e8 <usart_serial_write_packet>
	return status;	
   81024:	e7f6      	b.n	81014 <dump_erom+0x18>
   81026:	bf00      	nop
   81028:	200701da 	.word	0x200701da
   8102c:	400e0800 	.word	0x400e0800

00081030 <dump_erom_buf>:
{
   81030:	b510      	push	{r4, lr}
	if (chip_data.eeprom_crc32 != 0x00000000) {
   81032:	f242 434c 	movw	r3, #9292	; 0x244c
   81036:	4a0c      	ldr	r2, [pc, #48]	; (81068 <dump_erom_buf+0x38>)
   81038:	58d3      	ldr	r3, [r2, r3]
   8103a:	b153      	cbz	r3, 81052 <dump_erom_buf+0x22>
		crc32 = crc32_caculate(chip_data.erom, chip_data.erom_len);
   8103c:	4614      	mov	r4, r2
   8103e:	8891      	ldrh	r1, [r2, #4]
   81040:	f102 0008 	add.w	r0, r2, #8
   81044:	f7ff f930 	bl	802a8 <crc32_caculate>
		if (crc32 != chip_data.erom_crc32)
   81048:	f242 4348 	movw	r3, #9288	; 0x2448
   8104c:	58e3      	ldr	r3, [r4, r3]
   8104e:	4298      	cmp	r0, r3
   81050:	d107      	bne.n	81062 <dump_erom_buf+0x32>
	usart_serial_write_packet((Usart *)UART, chip_data.erom, EROM_SIZE);
   81052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81056:	4905      	ldr	r1, [pc, #20]	; (8106c <dump_erom_buf+0x3c>)
   81058:	4805      	ldr	r0, [pc, #20]	; (81070 <dump_erom_buf+0x40>)
   8105a:	f7ff fb45 	bl	806e8 <usart_serial_write_packet>
   return 0;
   8105e:	2000      	movs	r0, #0
   81060:	bd10      	pop	{r4, pc}
			return -1;
   81062:	f04f 30ff 	mov.w	r0, #4294967295
}
   81066:	bd10      	pop	{r4, pc}
   81068:	20072b68 	.word	0x20072b68
   8106c:	20072b70 	.word	0x20072b70
   81070:	400e0800 	.word	0x400e0800

00081074 <write_eerom>:
{
   81074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char start_page = chip_data.eeprom_start / EEPROM_PAGE_SIZE;
   81076:	4a23      	ldr	r2, [pc, #140]	; (81104 <write_eerom+0x90>)
   81078:	8853      	ldrh	r3, [r2, #2]
   8107a:	f3c3 0587 	ubfx	r5, r3, #2, #8
	unsigned short pages = chip_data.eeprom_len / EEPROM_PAGE_SIZE;
   8107e:	88d2      	ldrh	r2, [r2, #6]
	if ((chip_data.eeprom_start + chip_data.eeprom_len) > EEROM_SIZE)
   81080:	4413      	add	r3, r2
   81082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   81086:	dc35      	bgt.n	810f4 <write_eerom+0x80>
   81088:	0897      	lsrs	r7, r2, #2
	pages = (pages > 0) ? pages : 1;				
   8108a:	b907      	cbnz	r7, 8108e <write_eerom+0x1a>
   8108c:	2701      	movs	r7, #1
	for (unsigned int i = 0; i < pages; i++) {
   8108e:	2400      	movs	r4, #0
	int status = 0;
   81090:	4626      	mov	r6, r4
	for (unsigned int i = 0; i < pages; i++) {
   81092:	e002      	b.n	8109a <write_eerom+0x26>
			if ((start_page + i) == 127) {
   81094:	297f      	cmp	r1, #127	; 0x7f
   81096:	d024      	beq.n	810e2 <write_eerom+0x6e>
	for (unsigned int i = 0; i < pages; i++) {
   81098:	3401      	adds	r4, #1
   8109a:	42bc      	cmp	r4, r7
   8109c:	d22f      	bcs.n	810fe <write_eerom+0x8a>
		if (((start_page + i) == 0) || (((start_page + i) >= 125) && ((start_page + i) <= 127))) {
   8109e:	1929      	adds	r1, r5, r4
   810a0:	d0f8      	beq.n	81094 <write_eerom+0x20>
   810a2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
   810a6:	2b02      	cmp	r3, #2
   810a8:	d9f4      	bls.n	81094 <write_eerom+0x20>
		if (i != 0)
   810aa:	b124      	cbz	r4, 810b6 <write_eerom+0x42>
			memcpy(&mdi.buf[0], &mdi.buf[(start_page + i) * EEPROM_PAGE_SIZE], EEPROM_PAGE_SIZE);
   810ac:	4b16      	ldr	r3, [pc, #88]	; (81108 <write_eerom+0x94>)
   810ae:	eb03 0281 	add.w	r2, r3, r1, lsl #2
   810b2:	6852      	ldr	r2, [r2, #4]
   810b4:	605a      	str	r2, [r3, #4]
		status |= send_data(C_WR_EEPROM, start_page + i, EEPROM_PAGE_SIZE + 0x02);
   810b6:	2206      	movs	r2, #6
   810b8:	200a      	movs	r0, #10
   810ba:	f7ff fdc3 	bl	80c44 <send_data>
   810be:	4306      	orrs	r6, r0
		delay_ms(5);
   810c0:	f247 5030 	movw	r0, #30000	; 0x7530
   810c4:	f002 f878 	bl	831b8 <__portable_delay_cycles_veneer>
		status |= recv_data(0x01);
   810c8:	2001      	movs	r0, #1
   810ca:	f7ff fe05 	bl	80cd8 <recv_data>
		if (status < 0)
   810ce:	4306      	orrs	r6, r0
   810d0:	d413      	bmi.n	810fa <write_eerom+0x86>
		if ((mdi.data[0] & 0xC0) != 0x00)
   810d2:	4b0d      	ldr	r3, [pc, #52]	; (81108 <write_eerom+0x94>)
   810d4:	789b      	ldrb	r3, [r3, #2]
   810d6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   810da:	d0dd      	beq.n	81098 <write_eerom+0x24>
			return -1;
   810dc:	f04f 36ff 	mov.w	r6, #4294967295
   810e0:	e00d      	b.n	810fe <write_eerom+0x8a>
				status = ee_prog_conf(start_page + i);
   810e2:	1928      	adds	r0, r5, r4
   810e4:	b2c0      	uxtb	r0, r0
   810e6:	f7ff fecd 	bl	80e84 <ee_prog_conf>
				if (status < 0)	
   810ea:	1e06      	subs	r6, r0, #0
   810ec:	dad4      	bge.n	81098 <write_eerom+0x24>
					return -1;
   810ee:	f04f 36ff 	mov.w	r6, #4294967295
   810f2:	e004      	b.n	810fe <write_eerom+0x8a>
		return -1;
   810f4:	f04f 36ff 	mov.w	r6, #4294967295
   810f8:	e001      	b.n	810fe <write_eerom+0x8a>
			return -1;
   810fa:	f04f 36ff 	mov.w	r6, #4294967295
}
   810fe:	4630      	mov	r0, r6
   81100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81102:	bf00      	nop
   81104:	20072b68 	.word	0x20072b68
   81108:	200701d8 	.word	0x200701d8

0008110c <erase_erom>:
{																						
   8110c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8110e:	b085      	sub	sp, #20
	unsigned char magic[16] = {0x55, 0x45, 0xE8, 0x92, 0xD6, 0xB1, 0x62, 0x59, 0xFC, 0x8A, 0xC8, 0xF2, 0xD6, 0xE1, 0x4A, 0x35};
   81110:	4b1c      	ldr	r3, [pc, #112]	; (81184 <erase_erom+0x78>)
   81112:	466c      	mov	r4, sp
   81114:	6818      	ldr	r0, [r3, #0]
   81116:	6859      	ldr	r1, [r3, #4]
   81118:	689a      	ldr	r2, [r3, #8]
   8111a:	68db      	ldr	r3, [r3, #12]
   8111c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	status = send_data(C_ER_EROM, 0, 0x01);
   8111e:	2201      	movs	r2, #1
   81120:	2100      	movs	r1, #0
   81122:	2008      	movs	r0, #8
   81124:	f7ff fd8e 	bl	80c44 <send_data>
   81128:	4604      	mov	r4, r0
	status |= recv_data(0x01);
   8112a:	2001      	movs	r0, #1
   8112c:	f7ff fdd4 	bl	80cd8 <recv_data>
   81130:	4304      	orrs	r4, r0
	if (mdi.data[0] != 0x88)
   81132:	4b15      	ldr	r3, [pc, #84]	; (81188 <erase_erom+0x7c>)
   81134:	789b      	ldrb	r3, [r3, #2]
   81136:	2b88      	cmp	r3, #136	; 0x88
   81138:	d120      	bne.n	8117c <erase_erom+0x70>
	memcpy(&mdi.data[0], magic, sizeof(magic));
   8113a:	4e13      	ldr	r6, [pc, #76]	; (81188 <erase_erom+0x7c>)
   8113c:	466d      	mov	r5, sp
   8113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81140:	f8c6 0002 	str.w	r0, [r6, #2]
   81144:	f8c6 1006 	str.w	r1, [r6, #6]
   81148:	f8c6 200a 	str.w	r2, [r6, #10]
   8114c:	f8c6 300e 	str.w	r3, [r6, #14]
	status |= send_data(0x55, 0x45, sizeof(magic));
   81150:	2210      	movs	r2, #16
   81152:	2145      	movs	r1, #69	; 0x45
   81154:	2055      	movs	r0, #85	; 0x55
   81156:	f7ff fd75 	bl	80c44 <send_data>
   8115a:	4304      	orrs	r4, r0
	delay_ms(100);
   8115c:	480b      	ldr	r0, [pc, #44]	; (8118c <erase_erom+0x80>)
   8115e:	f002 f82b 	bl	831b8 <__portable_delay_cycles_veneer>
	status |= recv_data(0x01);
   81162:	2001      	movs	r0, #1
   81164:	f7ff fdb8 	bl	80cd8 <recv_data>
   81168:	4320      	orrs	r0, r4
	if ((mdi.data[0] & 0xC0) != 0x00)
   8116a:	78b3      	ldrb	r3, [r6, #2]
   8116c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   81170:	d101      	bne.n	81176 <erase_erom+0x6a>
}
   81172:	b005      	add	sp, #20
   81174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   81176:	f04f 30ff 	mov.w	r0, #4294967295
   8117a:	e7fa      	b.n	81172 <erase_erom+0x66>
		return -1;
   8117c:	f04f 30ff 	mov.w	r0, #4294967295
   81180:	e7f7      	b.n	81172 <erase_erom+0x66>
   81182:	bf00      	nop
   81184:	00083184 	.word	0x00083184
   81188:	200701d8 	.word	0x200701d8
   8118c:	000927c0 	.word	0x000927c0

00081190 <write_eerom_buf>:
{
   81190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (uart_ops.data == NULL)
   81194:	4b1e      	ldr	r3, [pc, #120]	; (81210 <write_eerom_buf+0x80>)
   81196:	685e      	ldr	r6, [r3, #4]
   81198:	b36e      	cbz	r6, 811f6 <write_eerom_buf+0x66>
	if (uart_ops.address != 0)
   8119a:	885f      	ldrh	r7, [r3, #2]
   8119c:	bb7f      	cbnz	r7, 811fe <write_eerom_buf+0x6e>
	if (uart_ops.len > EEROM_SIZE)
   8119e:	891d      	ldrh	r5, [r3, #8]
   811a0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   811a4:	d82f      	bhi.n	81206 <write_eerom_buf+0x76>
	memset(chip_data.eeprom, 0x00, EEROM_SIZE); 
   811a6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 81218 <write_eerom_buf+0x88>
   811aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   811ae:	2100      	movs	r1, #0
   811b0:	4640      	mov	r0, r8
   811b2:	f000 fdf9 	bl	81da8 <memset>
	chip_data.eeprom_len = uart_ops.len;
   811b6:	4c17      	ldr	r4, [pc, #92]	; (81214 <write_eerom_buf+0x84>)
   811b8:	80e5      	strh	r5, [r4, #6]
	chip_data.eeprom_start = uart_ops.address;
   811ba:	8067      	strh	r7, [r4, #2]
	chip_data.eeprom_crc32 = uart_ops.crc32;
   811bc:	4b14      	ldr	r3, [pc, #80]	; (81210 <write_eerom_buf+0x80>)
   811be:	68db      	ldr	r3, [r3, #12]
   811c0:	f242 474c 	movw	r7, #9292	; 0x244c
   811c4:	51e3      	str	r3, [r4, r7]
	memcpy(chip_data.eeprom, uart_ops.data, uart_ops.len);
   811c6:	462a      	mov	r2, r5
   811c8:	4631      	mov	r1, r6
   811ca:	4640      	mov	r0, r8
   811cc:	f000 fd76 	bl	81cbc <memcpy>
    if (chip_data.eeprom_crc32 == 0x00000000)
   811d0:	59e3      	ldr	r3, [r4, r7]
   811d2:	b913      	cbnz	r3, 811da <write_eerom_buf+0x4a>
		return 0;
   811d4:	2000      	movs	r0, #0
   811d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	crc32 = crc32_caculate(chip_data.eeprom, chip_data.eeprom_len);
   811da:	4629      	mov	r1, r5
   811dc:	4640      	mov	r0, r8
   811de:	f7ff f863 	bl	802a8 <crc32_caculate>
	if (crc32 != chip_data.eeprom_crc32)
   811e2:	59e3      	ldr	r3, [r4, r7]
   811e4:	4298      	cmp	r0, r3
   811e6:	d102      	bne.n	811ee <write_eerom_buf+0x5e>
   return 0;
   811e8:	2000      	movs	r0, #0
}
   811ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   811ee:	f04f 30ff 	mov.w	r0, #4294967295
   811f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   811f6:	f04f 30ff 	mov.w	r0, #4294967295
   811fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   811fe:	f04f 30ff 	mov.w	r0, #4294967295
   81202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81206:	f04f 30ff 	mov.w	r0, #4294967295
   8120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8120e:	bf00      	nop
   81210:	20072b54 	.word	0x20072b54
   81214:	20072b68 	.word	0x20072b68
   81218:	20074b90 	.word	0x20074b90

0008121c <write_erom>:
{
   8121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	unsigned char start_page = chip_data.erom_start / EEPROM_PAGE_SIZE;
   81220:	4a21      	ldr	r2, [pc, #132]	; (812a8 <write_erom+0x8c>)
   81222:	8813      	ldrh	r3, [r2, #0]
   81224:	f3c3 0887 	ubfx	r8, r3, #2, #8
	unsigned short pages = chip_data.erom_len / EROM_PAGE_SIZE;
   81228:	8892      	ldrh	r2, [r2, #4]
	if ((chip_data.erom_start +  chip_data.erom_len) > EROM_SIZE)
   8122a:	4413      	add	r3, r2
   8122c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   81230:	dc31      	bgt.n	81296 <write_erom+0x7a>
   81232:	0957      	lsrs	r7, r2, #5
	pages = (pages > 0) ? pages : 1;		
   81234:	b907      	cbnz	r7, 81238 <write_erom+0x1c>
   81236:	2701      	movs	r7, #1
	for (unsigned int i = 0; i < pages; i++) {
   81238:	2600      	movs	r6, #0
	int status = 0;	
   8123a:	46b1      	mov	r9, r6
	for (unsigned int i = 0; i < pages; i++) {
   8123c:	42be      	cmp	r6, r7
   8123e:	d22f      	bcs.n	812a0 <write_erom+0x84>
		memcpy(&mdi.buf[0], &chip_data.erom[(start_page + i) * EROM_PAGE_SIZE], EROM_PAGE_SIZE);
   81240:	eb08 0e06 	add.w	lr, r8, r6
   81244:	ea4f 154e 	mov.w	r5, lr, lsl #5
   81248:	3508      	adds	r5, #8
   8124a:	4b17      	ldr	r3, [pc, #92]	; (812a8 <write_erom+0x8c>)
   8124c:	441d      	add	r5, r3
   8124e:	4c17      	ldr	r4, [pc, #92]	; (812ac <write_erom+0x90>)
   81250:	6828      	ldr	r0, [r5, #0]
   81252:	6869      	ldr	r1, [r5, #4]
   81254:	68aa      	ldr	r2, [r5, #8]
   81256:	68eb      	ldr	r3, [r5, #12]
   81258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8125a:	6928      	ldr	r0, [r5, #16]
   8125c:	6969      	ldr	r1, [r5, #20]
   8125e:	69aa      	ldr	r2, [r5, #24]
   81260:	69eb      	ldr	r3, [r5, #28]
   81262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		status |= send_data(C_WR_EROM, start_page + i, EROM_PAGE_SIZE + 0x02);
   81264:	2222      	movs	r2, #34	; 0x22
   81266:	4671      	mov	r1, lr
   81268:	2009      	movs	r0, #9
   8126a:	f7ff fceb 	bl	80c44 <send_data>
   8126e:	ea49 0900 	orr.w	r9, r9, r0
		delay_ms(5);
   81272:	f247 5030 	movw	r0, #30000	; 0x7530
   81276:	f001 ff9f 	bl	831b8 <__portable_delay_cycles_veneer>
		status |= recv_data(0x01);
   8127a:	2001      	movs	r0, #1
   8127c:	f7ff fd2c 	bl	80cd8 <recv_data>
		if (status < 0)
   81280:	ea59 0900 	orrs.w	r9, r9, r0
   81284:	d40c      	bmi.n	812a0 <write_erom+0x84>
		if ((mdi.data[0] & 0xC0) != 0x00)
   81286:	f1a4 0324 	sub.w	r3, r4, #36	; 0x24
   8128a:	789b      	ldrb	r3, [r3, #2]
   8128c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   81290:	d104      	bne.n	8129c <write_erom+0x80>
	for (unsigned int i = 0; i < pages; i++) {
   81292:	3601      	adds	r6, #1
   81294:	e7d2      	b.n	8123c <write_erom+0x20>
		return -1;
   81296:	f04f 39ff 	mov.w	r9, #4294967295
   8129a:	e001      	b.n	812a0 <write_erom+0x84>
			return -1;
   8129c:	f04f 39ff 	mov.w	r9, #4294967295
}
   812a0:	4648      	mov	r0, r9
   812a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   812a6:	bf00      	nop
   812a8:	20072b68 	.word	0x20072b68
   812ac:	200701dc 	.word	0x200701dc

000812b0 <write_erom_buf>:
{
   812b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uart_ops.data == NULL)
   812b2:	4b1b      	ldr	r3, [pc, #108]	; (81320 <write_erom_buf+0x70>)
   812b4:	685e      	ldr	r6, [r3, #4]
   812b6:	b356      	cbz	r6, 8130e <write_erom_buf+0x5e>
	if (uart_ops.address != 0)
   812b8:	885f      	ldrh	r7, [r3, #2]
   812ba:	bb5f      	cbnz	r7, 81314 <write_erom_buf+0x64>
	if (uart_ops.len > EROM_SIZE)
   812bc:	891d      	ldrh	r5, [r3, #8]
   812be:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
   812c2:	d82a      	bhi.n	8131a <write_erom_buf+0x6a>
	memset(chip_data.erom, 0x00, EROM_SIZE); 
   812c4:	4c17      	ldr	r4, [pc, #92]	; (81324 <write_erom_buf+0x74>)
   812c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   812ca:	2100      	movs	r1, #0
   812cc:	4620      	mov	r0, r4
   812ce:	f000 fd6b 	bl	81da8 <memset>
	chip_data.erom_len = uart_ops.len;
   812d2:	f824 5c04 	strh.w	r5, [r4, #-4]
	chip_data.erom_start = uart_ops.address;
   812d6:	f824 7c08 	strh.w	r7, [r4, #-8]
	chip_data.erom_crc32 = uart_ops.crc32;
   812da:	4b11      	ldr	r3, [pc, #68]	; (81320 <write_erom_buf+0x70>)
   812dc:	68db      	ldr	r3, [r3, #12]
   812de:	f504 5711 	add.w	r7, r4, #9280	; 0x2440
   812e2:	603b      	str	r3, [r7, #0]
	memcpy(chip_data.erom, uart_ops.data, uart_ops.len);
   812e4:	462a      	mov	r2, r5
   812e6:	4631      	mov	r1, r6
   812e8:	4620      	mov	r0, r4
   812ea:	f000 fce7 	bl	81cbc <memcpy>
    if (chip_data.erom_crc32 == 0x00000000)
   812ee:	683b      	ldr	r3, [r7, #0]
   812f0:	b90b      	cbnz	r3, 812f6 <write_erom_buf+0x46>
		return 0;
   812f2:	2000      	movs	r0, #0
   812f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	crc32 = crc32_caculate(chip_data.erom, chip_data.erom_len);
   812f6:	4629      	mov	r1, r5
   812f8:	4620      	mov	r0, r4
   812fa:	f7fe ffd5 	bl	802a8 <crc32_caculate>
	if (crc32 != chip_data.erom_crc32)
   812fe:	683b      	ldr	r3, [r7, #0]
   81300:	4298      	cmp	r0, r3
   81302:	d101      	bne.n	81308 <write_erom_buf+0x58>
   return 0;
   81304:	2000      	movs	r0, #0
}
   81306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   81308:	f04f 30ff 	mov.w	r0, #4294967295
   8130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   8130e:	f04f 30ff 	mov.w	r0, #4294967295
   81312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   81314:	f04f 30ff 	mov.w	r0, #4294967295
   81318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
   8131a:	f04f 30ff 	mov.w	r0, #4294967295
   8131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81320:	20072b54 	.word	0x20072b54
   81324:	20072b70 	.word	0x20072b70

00081328 <init_chip>:
{
   81328:	b510      	push	{r4, lr}
	status = enter_monitor_mode();
   8132a:	f7ff fc05 	bl	80b38 <enter_monitor_mode>
   8132e:	4604      	mov	r4, r0
	delay_us(5);
   81330:	201e      	movs	r0, #30
   81332:	f001 ff41 	bl	831b8 <__portable_delay_cycles_veneer>
	status |= send_data(C_TRACE, 0, 0x01);
   81336:	2201      	movs	r2, #1
   81338:	2100      	movs	r1, #0
   8133a:	2002      	movs	r0, #2
   8133c:	f7ff fc82 	bl	80c44 <send_data>
   81340:	4304      	orrs	r4, r0
	delay_ms(1);
   81342:	f241 7070 	movw	r0, #6000	; 0x1770
   81346:	f001 ff37 	bl	831b8 <__portable_delay_cycles_veneer>
	status |= recv_data(0x02);
   8134a:	2002      	movs	r0, #2
   8134c:	f7ff fcc4 	bl	80cd8 <recv_data>
}
   81350:	4320      	orrs	r0, r4
   81352:	bd10      	pop	{r4, pc}

00081354 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81354:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81356:	480e      	ldr	r0, [pc, #56]	; (81390 <sysclk_init+0x3c>)
   81358:	f001 ff3a 	bl	831d0 <__system_init_flash_veneer>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8135c:	213e      	movs	r1, #62	; 0x3e
   8135e:	2000      	movs	r0, #0
   81360:	f000 f9a8 	bl	816b4 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81364:	f000 f9d0 	bl	81708 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81368:	2800      	cmp	r0, #0
   8136a:	d0fb      	beq.n	81364 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8136c:	f000 f9d4 	bl	81718 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81370:	4a08      	ldr	r2, [pc, #32]	; (81394 <sysclk_init+0x40>)
   81372:	4b09      	ldr	r3, [pc, #36]	; (81398 <sysclk_init+0x44>)
   81374:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81376:	f000 f9d7 	bl	81728 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8137a:	2800      	cmp	r0, #0
   8137c:	d0fb      	beq.n	81376 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8137e:	2010      	movs	r0, #16
   81380:	f000 f96e 	bl	81660 <pmc_switch_mck_to_pllack>
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81384:	f000 fba4 	bl	81ad0 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81388:	4801      	ldr	r0, [pc, #4]	; (81390 <sysclk_init+0x3c>)
   8138a:	f001 ff21 	bl	831d0 <__system_init_flash_veneer>
   8138e:	bd08      	pop	{r3, pc}
   81390:	0501bd00 	.word	0x0501bd00
   81394:	200d3f01 	.word	0x200d3f01
   81398:	400e0600 	.word	0x400e0600

0008139c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8139c:	b90a      	cbnz	r2, 813a2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8139e:	6601      	str	r1, [r0, #96]	; 0x60
   813a0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   813a2:	6641      	str	r1, [r0, #100]	; 0x64
   813a4:	4770      	bx	lr

000813a6 <pio_set_debounce_filter>:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
#elif (SAM3XA || SAM3U)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_DIFSR = ul_mask;
   813a6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
   813aa:	0053      	lsls	r3, r2, #1
   813ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   813b0:	fbb2 f2f3 	udiv	r2, r2, r3
   813b4:	3a01      	subs	r2, #1
   813b6:	f3c2 020d 	ubfx	r2, r2, #0, #14
   813ba:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   813be:	4770      	bx	lr

000813c0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
   813c0:	6301      	str	r1, [r0, #48]	; 0x30
   813c2:	4770      	bx	lr

000813c4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
   813c4:	6341      	str	r1, [r0, #52]	; 0x34
   813c6:	4770      	bx	lr

000813c8 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   813c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   813cc:	d007      	beq.n	813de <pio_get+0x16>
   813ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   813d2:	d004      	beq.n	813de <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
	} else {
		ul_reg = p_pio->PIO_PDSR;
   813d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   813d6:	4213      	tst	r3, r2
   813d8:	d003      	beq.n	813e2 <pio_get+0x1a>
		return 0;
	} else {
		return 1;
   813da:	2001      	movs	r0, #1
	}
}
   813dc:	4770      	bx	lr
		ul_reg = p_pio->PIO_ODSR;
   813de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   813e0:	e7f9      	b.n	813d6 <pio_get+0xe>
		return 0;
   813e2:	2000      	movs	r0, #0
   813e4:	4770      	bx	lr

000813e6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   813e6:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   813e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   813ec:	d016      	beq.n	8141c <pio_set_peripheral+0x36>
   813ee:	d80b      	bhi.n	81408 <pio_set_peripheral+0x22>
   813f0:	b149      	cbz	r1, 81406 <pio_set_peripheral+0x20>
   813f2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   813f6:	d105      	bne.n	81404 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   813f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   813fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
   813fc:	ea21 0102 	bic.w	r1, r1, r2
   81400:	400b      	ands	r3, r1
   81402:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81404:	6042      	str	r2, [r0, #4]
   81406:	4770      	bx	lr
	switch (ul_type) {
   81408:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8140c:	d0fb      	beq.n	81406 <pio_set_peripheral+0x20>
   8140e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81412:	d0f8      	beq.n	81406 <pio_set_peripheral+0x20>
   81414:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81418:	d1f4      	bne.n	81404 <pio_set_peripheral+0x1e>
   8141a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8141c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8141e:	4313      	orrs	r3, r2
   81420:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81422:	e7ef      	b.n	81404 <pio_set_peripheral+0x1e>

00081424 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   81424:	f012 0f10 	tst.w	r2, #16
   81428:	d012      	beq.n	81450 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   8142a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8142e:	f012 0f20 	tst.w	r2, #32
   81432:	d007      	beq.n	81444 <pio_configure_interrupt+0x20>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   81434:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   81438:	f012 0f40 	tst.w	r2, #64	; 0x40
   8143c:	d005      	beq.n	8144a <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8143e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   81442:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
   81444:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
   81448:	e7f6      	b.n	81438 <pio_configure_interrupt+0x14>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8144a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8144e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   81450:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81454:	4770      	bx	lr

00081456 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   81456:	6401      	str	r1, [r0, #64]	; 0x40
   81458:	4770      	bx	lr

0008145a <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8145a:	6441      	str	r1, [r0, #68]	; 0x44
   8145c:	4770      	bx	lr

0008145e <pio_set_input>:
{
   8145e:	b570      	push	{r4, r5, r6, lr}
   81460:	4604      	mov	r4, r0
   81462:	460d      	mov	r5, r1
   81464:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   81466:	f7ff fff8 	bl	8145a <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8146a:	f006 0201 	and.w	r2, r6, #1
   8146e:	4629      	mov	r1, r5
   81470:	4620      	mov	r0, r4
   81472:	f7ff ff93 	bl	8139c <pio_pull_up>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81476:	f016 0f0a 	tst.w	r6, #10
   8147a:	d009      	beq.n	81490 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
   8147c:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
   8147e:	f016 0f02 	tst.w	r6, #2
   81482:	d107      	bne.n	81494 <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
   81484:	f016 0f08 	tst.w	r6, #8
   81488:	d006      	beq.n	81498 <pio_set_input+0x3a>
			p_pio->PIO_DIFSR = ul_mask;
   8148a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   8148e:	e003      	b.n	81498 <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
   81490:	6265      	str	r5, [r4, #36]	; 0x24
   81492:	e7f4      	b.n	8147e <pio_set_input+0x20>
		p_pio->PIO_SCIFSR = ul_mask;
   81494:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   81498:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   8149a:	6025      	str	r5, [r4, #0]
   8149c:	bd70      	pop	{r4, r5, r6, pc}

0008149e <pio_set_output>:
{
   8149e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   814a0:	4604      	mov	r4, r0
   814a2:	460d      	mov	r5, r1
   814a4:	4616      	mov	r6, r2
   814a6:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   814a8:	f7ff ffd7 	bl	8145a <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   814ac:	9a06      	ldr	r2, [sp, #24]
   814ae:	4629      	mov	r1, r5
   814b0:	4620      	mov	r0, r4
   814b2:	f7ff ff73 	bl	8139c <pio_pull_up>
	if (ul_multidrive_enable) {
   814b6:	b12f      	cbz	r7, 814c4 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
   814b8:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
   814ba:	b92e      	cbnz	r6, 814c8 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
   814bc:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   814be:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   814c0:	6025      	str	r5, [r4, #0]
   814c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
   814c4:	6565      	str	r5, [r4, #84]	; 0x54
   814c6:	e7f8      	b.n	814ba <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   814c8:	6325      	str	r5, [r4, #48]	; 0x30
   814ca:	e7f8      	b.n	814be <pio_set_output+0x20>

000814cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   814cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   814ce:	4770      	bx	lr

000814d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   814d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   814d2:	4770      	bx	lr

000814d4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   814d4:	b570      	push	{r4, r5, r6, lr}
   814d6:	b082      	sub	sp, #8
   814d8:	4605      	mov	r5, r0
   814da:	460e      	mov	r6, r1
   814dc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   814de:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   814e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   814e6:	d029      	beq.n	8153c <pio_configure_pin_group+0x68>
   814e8:	d812      	bhi.n	81510 <pio_configure_pin_group+0x3c>
   814ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   814ee:	d017      	beq.n	81520 <pio_configure_pin_group+0x4c>
   814f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   814f4:	d112      	bne.n	8151c <pio_configure_pin_group+0x48>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   814f6:	460a      	mov	r2, r1
   814f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   814fc:	f7ff ff73 	bl	813e6 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81500:	f004 0201 	and.w	r2, r4, #1
   81504:	4631      	mov	r1, r6
   81506:	4628      	mov	r0, r5
   81508:	f7ff ff48 	bl	8139c <pio_pull_up>

	default:
		return 0;
	}

	return 1;
   8150c:	2001      	movs	r0, #1
		break;
   8150e:	e013      	b.n	81538 <pio_configure_pin_group+0x64>
	switch (ul_flags & PIO_TYPE_Msk) {
   81510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81514:	d016      	beq.n	81544 <pio_configure_pin_group+0x70>
   81516:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8151a:	d013      	beq.n	81544 <pio_configure_pin_group+0x70>
		return 0;
   8151c:	2000      	movs	r0, #0
   8151e:	e00b      	b.n	81538 <pio_configure_pin_group+0x64>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81520:	460a      	mov	r2, r1
   81522:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81526:	f7ff ff5e 	bl	813e6 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8152a:	f004 0201 	and.w	r2, r4, #1
   8152e:	4631      	mov	r1, r6
   81530:	4628      	mov	r0, r5
   81532:	f7ff ff33 	bl	8139c <pio_pull_up>
	return 1;
   81536:	2001      	movs	r0, #1
}
   81538:	b002      	add	sp, #8
   8153a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   8153c:	f7ff ff8f 	bl	8145e <pio_set_input>
	return 1;
   81540:	2001      	movs	r0, #1
		break;
   81542:	e7f9      	b.n	81538 <pio_configure_pin_group+0x64>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81544:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81548:	f004 0301 	and.w	r3, r4, #1
		pio_set_output(p_pio, ul_mask,
   8154c:	9300      	str	r3, [sp, #0]
   8154e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81552:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81556:	bf14      	ite	ne
   81558:	2200      	movne	r2, #0
   8155a:	2201      	moveq	r2, #1
   8155c:	4631      	mov	r1, r6
   8155e:	4628      	mov	r0, r5
   81560:	f7ff ff9d 	bl	8149e <pio_set_output>
	return 1;
   81564:	2001      	movs	r0, #1
		break;
   81566:	e7e7      	b.n	81538 <pio_configure_pin_group+0x64>

00081568 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8156a:	4604      	mov	r4, r0
   8156c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8156e:	f7ff ffad 	bl	814cc <pio_get_interrupt_status>
   81572:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81574:	4620      	mov	r0, r4
   81576:	f7ff ffab 	bl	814d0 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
   8157a:	4005      	ands	r5, r0
   8157c:	d001      	beq.n	81582 <pio_handler_process+0x1a>
   8157e:	2400      	movs	r4, #0
   81580:	e003      	b.n	8158a <pio_handler_process+0x22>
   81582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
   81584:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
   81586:	2c06      	cmp	r4, #6
   81588:	d811      	bhi.n	815ae <pio_handler_process+0x46>
		while (status != 0) {
   8158a:	b18d      	cbz	r5, 815b0 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
   8158c:	0123      	lsls	r3, r4, #4
   8158e:	4a09      	ldr	r2, [pc, #36]	; (815b4 <pio_handler_process+0x4c>)
   81590:	58d0      	ldr	r0, [r2, r3]
   81592:	42b0      	cmp	r0, r6
   81594:	d1f6      	bne.n	81584 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81596:	eb02 1304 	add.w	r3, r2, r4, lsl #4
   8159a:	6859      	ldr	r1, [r3, #4]
   8159c:	420d      	tst	r5, r1
   8159e:	d0f1      	beq.n	81584 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   815a0:	461f      	mov	r7, r3
   815a2:	68db      	ldr	r3, [r3, #12]
   815a4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   815a6:	687b      	ldr	r3, [r7, #4]
   815a8:	ea25 0503 	bic.w	r5, r5, r3
   815ac:	e7ea      	b.n	81584 <pio_handler_process+0x1c>
   815ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   815b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   815b2:	bf00      	nop
   815b4:	20072aa8 	.word	0x20072aa8

000815b8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   815b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource = NULL;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   815ba:	4c17      	ldr	r4, [pc, #92]	; (81618 <pio_handler_set+0x60>)
   815bc:	6827      	ldr	r7, [r4, #0]
   815be:	2f06      	cmp	r7, #6
   815c0:	d828      	bhi.n	81614 <pio_handler_set+0x5c>
   815c2:	f04f 0e00 	mov.w	lr, #0
   815c6:	4674      	mov	r4, lr
   815c8:	e001      	b.n	815ce <pio_handler_set+0x16>
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   815ca:	3401      	adds	r4, #1
   815cc:	b2e4      	uxtb	r4, r4
   815ce:	46a4      	mov	ip, r4
   815d0:	42a7      	cmp	r7, r4
   815d2:	d30a      	bcc.n	815ea <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   815d4:	4e11      	ldr	r6, [pc, #68]	; (8161c <pio_handler_set+0x64>)
   815d6:	0125      	lsls	r5, r4, #4
   815d8:	eb06 0e05 	add.w	lr, r6, r5
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   815dc:	5975      	ldr	r5, [r6, r5]
   815de:	428d      	cmp	r5, r1
   815e0:	d1f3      	bne.n	815ca <pio_handler_set+0x12>
   815e2:	f8de 5004 	ldr.w	r5, [lr, #4]
   815e6:	4295      	cmp	r5, r2
   815e8:	d1ef      	bne.n	815ca <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   815ea:	f8ce 1000 	str.w	r1, [lr]
	pSource->mask = ul_mask;
   815ee:	f8ce 2004 	str.w	r2, [lr, #4]
	pSource->attr = ul_attr;
   815f2:	f8ce 3008 	str.w	r3, [lr, #8]
	pSource->handler = p_handler;
   815f6:	9906      	ldr	r1, [sp, #24]
   815f8:	f8ce 100c 	str.w	r1, [lr, #12]
	if (i == gs_ul_nb_sources + 1) {
   815fc:	3701      	adds	r7, #1
   815fe:	45bc      	cmp	ip, r7
   81600:	d005      	beq.n	8160e <pio_handler_set+0x56>
   81602:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81604:	461a      	mov	r2, r3
   81606:	f7ff ff0d 	bl	81424 <pio_configure_interrupt>

	return 0;
   8160a:	2000      	movs	r0, #0
   8160c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
   8160e:	4902      	ldr	r1, [pc, #8]	; (81618 <pio_handler_set+0x60>)
   81610:	600f      	str	r7, [r1, #0]
   81612:	e7f6      	b.n	81602 <pio_handler_set+0x4a>
		return 1;
   81614:	2001      	movs	r0, #1
}
   81616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81618:	20072b18 	.word	0x20072b18
   8161c:	20072aa8 	.word	0x20072aa8

00081620 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81620:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81622:	210b      	movs	r1, #11
   81624:	4801      	ldr	r0, [pc, #4]	; (8162c <PIOA_Handler+0xc>)
   81626:	f7ff ff9f 	bl	81568 <pio_handler_process>
   8162a:	bd08      	pop	{r3, pc}
   8162c:	400e0e00 	.word	0x400e0e00

00081630 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81630:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81632:	210c      	movs	r1, #12
   81634:	4801      	ldr	r0, [pc, #4]	; (8163c <PIOB_Handler+0xc>)
   81636:	f7ff ff97 	bl	81568 <pio_handler_process>
   8163a:	bd08      	pop	{r3, pc}
   8163c:	400e1000 	.word	0x400e1000

00081640 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81640:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81642:	210d      	movs	r1, #13
   81644:	4801      	ldr	r0, [pc, #4]	; (8164c <PIOC_Handler+0xc>)
   81646:	f7ff ff8f 	bl	81568 <pio_handler_process>
   8164a:	bd08      	pop	{r3, pc}
   8164c:	400e1200 	.word	0x400e1200

00081650 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81650:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81652:	210e      	movs	r1, #14
   81654:	4801      	ldr	r0, [pc, #4]	; (8165c <PIOD_Handler+0xc>)
   81656:	f7ff ff87 	bl	81568 <pio_handler_process>
   8165a:	bd08      	pop	{r3, pc}
   8165c:	400e1400 	.word	0x400e1400

00081660 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81660:	4a13      	ldr	r2, [pc, #76]	; (816b0 <pmc_switch_mck_to_pllack+0x50>)
   81662:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81668:	4318      	orrs	r0, r3
   8166a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81670:	4a0f      	ldr	r2, [pc, #60]	; (816b0 <pmc_switch_mck_to_pllack+0x50>)
   81672:	6e92      	ldr	r2, [r2, #104]	; 0x68
   81674:	f012 0f08 	tst.w	r2, #8
   81678:	d102      	bne.n	81680 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8167a:	b1a3      	cbz	r3, 816a6 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
   8167c:	3b01      	subs	r3, #1
   8167e:	e7f7      	b.n	81670 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81680:	4a0b      	ldr	r2, [pc, #44]	; (816b0 <pmc_switch_mck_to_pllack+0x50>)
   81682:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81684:	f023 0303 	bic.w	r3, r3, #3
   81688:	f043 0302 	orr.w	r3, r3, #2
   8168c:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8168e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81692:	4a07      	ldr	r2, [pc, #28]	; (816b0 <pmc_switch_mck_to_pllack+0x50>)
   81694:	6e92      	ldr	r2, [r2, #104]	; 0x68
   81696:	f012 0f08 	tst.w	r2, #8
   8169a:	d102      	bne.n	816a2 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8169c:	b12b      	cbz	r3, 816aa <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
   8169e:	3b01      	subs	r3, #1
   816a0:	e7f7      	b.n	81692 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
   816a2:	2000      	movs	r0, #0
   816a4:	4770      	bx	lr
			return 1;
   816a6:	2001      	movs	r0, #1
   816a8:	4770      	bx	lr
			return 1;
   816aa:	2001      	movs	r0, #1
}
   816ac:	4770      	bx	lr
   816ae:	bf00      	nop
   816b0:	400e0600 	.word	0x400e0600

000816b4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   816b4:	b9d0      	cbnz	r0, 816ec <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   816b6:	4a11      	ldr	r2, [pc, #68]	; (816fc <pmc_switch_mainck_to_xtal+0x48>)
   816b8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   816ba:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   816be:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   816c2:	0209      	lsls	r1, r1, #8
   816c4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   816c6:	430b      	orrs	r3, r1
   816c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   816cc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   816d0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   816d2:	4b0a      	ldr	r3, [pc, #40]	; (816fc <pmc_switch_mainck_to_xtal+0x48>)
   816d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   816d6:	f013 0f01 	tst.w	r3, #1
   816da:	d0fa      	beq.n	816d2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   816dc:	4a07      	ldr	r2, [pc, #28]	; (816fc <pmc_switch_mainck_to_xtal+0x48>)
   816de:	6a13      	ldr	r3, [r2, #32]
   816e0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   816e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   816e8:	6213      	str	r3, [r2, #32]
   816ea:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   816ec:	4903      	ldr	r1, [pc, #12]	; (816fc <pmc_switch_mainck_to_xtal+0x48>)
   816ee:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   816f0:	4a03      	ldr	r2, [pc, #12]	; (81700 <pmc_switch_mainck_to_xtal+0x4c>)
   816f2:	401a      	ands	r2, r3
   816f4:	4b03      	ldr	r3, [pc, #12]	; (81704 <pmc_switch_mainck_to_xtal+0x50>)
   816f6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   816f8:	620b      	str	r3, [r1, #32]
   816fa:	4770      	bx	lr
   816fc:	400e0600 	.word	0x400e0600
   81700:	fec8fffc 	.word	0xfec8fffc
   81704:	01370002 	.word	0x01370002

00081708 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81708:	4b02      	ldr	r3, [pc, #8]	; (81714 <pmc_osc_is_ready_mainck+0xc>)
   8170a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8170c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81710:	4770      	bx	lr
   81712:	bf00      	nop
   81714:	400e0600 	.word	0x400e0600

00081718 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81718:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8171c:	4b01      	ldr	r3, [pc, #4]	; (81724 <pmc_disable_pllack+0xc>)
   8171e:	629a      	str	r2, [r3, #40]	; 0x28
   81720:	4770      	bx	lr
   81722:	bf00      	nop
   81724:	400e0600 	.word	0x400e0600

00081728 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81728:	4b02      	ldr	r3, [pc, #8]	; (81734 <pmc_is_locked_pllack+0xc>)
   8172a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8172c:	f000 0002 	and.w	r0, r0, #2
   81730:	4770      	bx	lr
   81732:	bf00      	nop
   81734:	400e0600 	.word	0x400e0600

00081738 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81738:	282c      	cmp	r0, #44	; 0x2c
   8173a:	d81e      	bhi.n	8177a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8173c:	281f      	cmp	r0, #31
   8173e:	d80c      	bhi.n	8175a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81740:	4b11      	ldr	r3, [pc, #68]	; (81788 <pmc_enable_periph_clk+0x50>)
   81742:	699a      	ldr	r2, [r3, #24]
   81744:	2301      	movs	r3, #1
   81746:	4083      	lsls	r3, r0
   81748:	4393      	bics	r3, r2
   8174a:	d018      	beq.n	8177e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8174c:	2301      	movs	r3, #1
   8174e:	fa03 f000 	lsl.w	r0, r3, r0
   81752:	4b0d      	ldr	r3, [pc, #52]	; (81788 <pmc_enable_periph_clk+0x50>)
   81754:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81756:	2000      	movs	r0, #0
   81758:	4770      	bx	lr
		ul_id -= 32;
   8175a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8175c:	4b0a      	ldr	r3, [pc, #40]	; (81788 <pmc_enable_periph_clk+0x50>)
   8175e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81762:	2301      	movs	r3, #1
   81764:	4083      	lsls	r3, r0
   81766:	4393      	bics	r3, r2
   81768:	d00b      	beq.n	81782 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8176a:	2301      	movs	r3, #1
   8176c:	fa03 f000 	lsl.w	r0, r3, r0
   81770:	4b05      	ldr	r3, [pc, #20]	; (81788 <pmc_enable_periph_clk+0x50>)
   81772:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81776:	2000      	movs	r0, #0
   81778:	4770      	bx	lr
		return 1;
   8177a:	2001      	movs	r0, #1
   8177c:	4770      	bx	lr
	return 0;
   8177e:	2000      	movs	r0, #0
   81780:	4770      	bx	lr
   81782:	2000      	movs	r0, #0
}
   81784:	4770      	bx	lr
   81786:	bf00      	nop
   81788:	400e0600 	.word	0x400e0600

0008178c <pin_init>:
 *
 * return none
 * pio  pins init
 */
static void pin_init(void)
{
   8178c:	b530      	push	{r4, r5, lr}
   8178e:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	pmc_enable_periph_clk(ID_PIOB);
   81790:	200c      	movs	r0, #12
   81792:	f7ff ffd1 	bl	81738 <pmc_enable_periph_clk>
	
	pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
   81796:	2401      	movs	r4, #1
   81798:	9400      	str	r4, [sp, #0]
   8179a:	2300      	movs	r3, #0
   8179c:	4622      	mov	r2, r4
   8179e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   817a2:	480b      	ldr	r0, [pc, #44]	; (817d0 <pin_init+0x44>)
   817a4:	f7ff fe7b 	bl	8149e <pio_set_output>
	pio_set_output(PIOA, PIO_PA14, LOW, DISABLE, ENABLE);
   817a8:	4d0a      	ldr	r5, [pc, #40]	; (817d4 <pin_init+0x48>)
   817aa:	9400      	str	r4, [sp, #0]
   817ac:	2300      	movs	r3, #0
   817ae:	461a      	mov	r2, r3
   817b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   817b4:	4628      	mov	r0, r5
   817b6:	f7ff fe72 	bl	8149e <pio_set_output>
	pio_set_output(PIOA, PIO_PA19, LOW, DISABLE, ENABLE);
   817ba:	9400      	str	r4, [sp, #0]
   817bc:	2300      	movs	r3, #0
   817be:	461a      	mov	r2, r3
   817c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   817c4:	4628      	mov	r0, r5
   817c6:	f7ff fe6a 	bl	8149e <pio_set_output>
}
   817ca:	b003      	add	sp, #12
   817cc:	bd30      	pop	{r4, r5, pc}
   817ce:	bf00      	nop
   817d0:	400e1000 	.word	0x400e1000
   817d4:	400e0e00 	.word	0x400e0e00

000817d8 <external_interrupt_init>:
{
   817d8:	b510      	push	{r4, lr}
   817da:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOA);
   817dc:	200b      	movs	r0, #11
   817de:	f7ff ffab 	bl	81738 <pmc_enable_periph_clk>
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP);
   817e2:	4c10      	ldr	r4, [pc, #64]	; (81824 <external_interrupt_init+0x4c>)
   817e4:	2201      	movs	r2, #1
   817e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   817ea:	4620      	mov	r0, r4
   817ec:	f7ff fe37 	bl	8145e <pio_set_input>
	pio_set_debounce_filter(PIOA, PIO_PA15, 100000);
   817f0:	4a0d      	ldr	r2, [pc, #52]	; (81828 <external_interrupt_init+0x50>)
   817f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   817f6:	4620      	mov	r0, r4
   817f8:	f7ff fdd5 	bl	813a6 <pio_set_debounce_filter>
	pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE, data_handler);
   817fc:	4b0b      	ldr	r3, [pc, #44]	; (8182c <external_interrupt_init+0x54>)
   817fe:	9300      	str	r3, [sp, #0]
   81800:	2379      	movs	r3, #121	; 0x79
   81802:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81806:	210b      	movs	r1, #11
   81808:	4620      	mov	r0, r4
   8180a:	f7ff fed5 	bl	815b8 <pio_handler_set>
	pio_enable_interrupt(PIOA, PIO_PA15);
   8180e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81812:	4620      	mov	r0, r4
   81814:	f7ff fe1f 	bl	81456 <pio_enable_interrupt>
   81818:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8181c:	4b04      	ldr	r3, [pc, #16]	; (81830 <external_interrupt_init+0x58>)
   8181e:	601a      	str	r2, [r3, #0]
}
   81820:	b002      	add	sp, #8
   81822:	bd10      	pop	{r4, pc}
   81824:	400e0e00 	.word	0x400e0e00
   81828:	000186a0 	.word	0x000186a0
   8182c:	00080d69 	.word	0x00080d69
   81830:	e000e100 	.word	0xe000e100

00081834 <usart_serial_getchar>:
{
   81834:	b5f0      	push	{r4, r5, r6, r7, lr}
   81836:	b083      	sub	sp, #12
   81838:	4604      	mov	r4, r0
   8183a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8183c:	2300      	movs	r3, #0
   8183e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   81840:	4b25      	ldr	r3, [pc, #148]	; (818d8 <usart_serial_getchar+0xa4>)
   81842:	4298      	cmp	r0, r3
   81844:	d00f      	beq.n	81866 <usart_serial_getchar+0x32>
	status_code_t status = STATUS_OK;
   81846:	2600      	movs	r6, #0
	if (USART0 == p_usart) {
   81848:	4b24      	ldr	r3, [pc, #144]	; (818dc <usart_serial_getchar+0xa8>)
   8184a:	429c      	cmp	r4, r3
   8184c:	d01b      	beq.n	81886 <usart_serial_getchar+0x52>
	if (USART1 == p_usart) {
   8184e:	4b24      	ldr	r3, [pc, #144]	; (818e0 <usart_serial_getchar+0xac>)
   81850:	429c      	cmp	r4, r3
   81852:	d022      	beq.n	8189a <usart_serial_getchar+0x66>
	if (USART2 == p_usart) {
   81854:	4b23      	ldr	r3, [pc, #140]	; (818e4 <usart_serial_getchar+0xb0>)
   81856:	429c      	cmp	r4, r3
   81858:	d029      	beq.n	818ae <usart_serial_getchar+0x7a>
	if (USART3 == p_usart) {
   8185a:	4b23      	ldr	r3, [pc, #140]	; (818e8 <usart_serial_getchar+0xb4>)
   8185c:	429c      	cmp	r4, r3
   8185e:	d030      	beq.n	818c2 <usart_serial_getchar+0x8e>
	}
# endif
#endif /* ifdef USART */

	return status;
}
   81860:	4630      	mov	r0, r6
   81862:	b003      	add	sp, #12
   81864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81866:	4617      	mov	r7, r2
   81868:	4e20      	ldr	r6, [pc, #128]	; (818ec <usart_serial_getchar+0xb8>)
		while (uart_read((Uart*)p_usart, data)) {
   8186a:	4629      	mov	r1, r5
   8186c:	4620      	mov	r0, r4
   8186e:	f7ff f849 	bl	80904 <uart_read>
   81872:	b130      	cbz	r0, 81882 <usart_serial_getchar+0x4e>
			if (timeout != 0) {
   81874:	2f00      	cmp	r7, #0
   81876:	d0f8      	beq.n	8186a <usart_serial_getchar+0x36>
				if (--times <= 0) {
   81878:	3e01      	subs	r6, #1
   8187a:	d1f6      	bne.n	8186a <usart_serial_getchar+0x36>
					status = ERR_TIMEOUT;
   8187c:	f06f 0602 	mvn.w	r6, #2
   81880:	e7e2      	b.n	81848 <usart_serial_getchar+0x14>
	status_code_t status = STATUS_OK;
   81882:	2600      	movs	r6, #0
   81884:	e7e0      	b.n	81848 <usart_serial_getchar+0x14>
		while (usart_read(p_usart, &val));
   81886:	a901      	add	r1, sp, #4
   81888:	4620      	mov	r0, r4
   8188a:	f7ff f850 	bl	8092e <usart_read>
   8188e:	2800      	cmp	r0, #0
   81890:	d1f9      	bne.n	81886 <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   81892:	f89d 3004 	ldrb.w	r3, [sp, #4]
   81896:	702b      	strb	r3, [r5, #0]
   81898:	e7d9      	b.n	8184e <usart_serial_getchar+0x1a>
		while (usart_read(p_usart, &val));
   8189a:	a901      	add	r1, sp, #4
   8189c:	4620      	mov	r0, r4
   8189e:	f7ff f846 	bl	8092e <usart_read>
   818a2:	2800      	cmp	r0, #0
   818a4:	d1f9      	bne.n	8189a <usart_serial_getchar+0x66>
		*data = (uint8_t)(val & 0xFF);
   818a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818aa:	702b      	strb	r3, [r5, #0]
   818ac:	e7d2      	b.n	81854 <usart_serial_getchar+0x20>
		while (usart_read(p_usart, &val));
   818ae:	a901      	add	r1, sp, #4
   818b0:	4620      	mov	r0, r4
   818b2:	f7ff f83c 	bl	8092e <usart_read>
   818b6:	2800      	cmp	r0, #0
   818b8:	d1f9      	bne.n	818ae <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   818ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818be:	702b      	strb	r3, [r5, #0]
   818c0:	e7cb      	b.n	8185a <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
   818c2:	a901      	add	r1, sp, #4
   818c4:	4620      	mov	r0, r4
   818c6:	f7ff f832 	bl	8092e <usart_read>
   818ca:	2800      	cmp	r0, #0
   818cc:	d1f9      	bne.n	818c2 <usart_serial_getchar+0x8e>
		*data = (uint8_t)(val & 0xFF);
   818ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   818d2:	702b      	strb	r3, [r5, #0]
   818d4:	e7c4      	b.n	81860 <usart_serial_getchar+0x2c>
   818d6:	bf00      	nop
   818d8:	400e0800 	.word	0x400e0800
   818dc:	40098000 	.word	0x40098000
   818e0:	4009c000 	.word	0x4009c000
   818e4:	400a0000 	.word	0x400a0000
   818e8:	400a4000 	.word	0x400a4000
   818ec:	0007a120 	.word	0x0007a120

000818f0 <usart_serial_putchar>:
{
   818f0:	b538      	push	{r3, r4, r5, lr}
   818f2:	4604      	mov	r4, r0
   818f4:	460d      	mov	r5, r1
	if (UART == (Uart*)p_usart) {
   818f6:	4b1c      	ldr	r3, [pc, #112]	; (81968 <usart_serial_putchar+0x78>)
   818f8:	4298      	cmp	r0, r3
   818fa:	d00d      	beq.n	81918 <usart_serial_putchar+0x28>
	if (USART0 == p_usart) {
   818fc:	4b1b      	ldr	r3, [pc, #108]	; (8196c <usart_serial_putchar+0x7c>)
   818fe:	4298      	cmp	r0, r3
   81900:	d012      	beq.n	81928 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81902:	4b1b      	ldr	r3, [pc, #108]	; (81970 <usart_serial_putchar+0x80>)
   81904:	4298      	cmp	r0, r3
   81906:	d017      	beq.n	81938 <usart_serial_putchar+0x48>
	if (USART2 == p_usart) {
   81908:	4b1a      	ldr	r3, [pc, #104]	; (81974 <usart_serial_putchar+0x84>)
   8190a:	4298      	cmp	r0, r3
   8190c:	d01c      	beq.n	81948 <usart_serial_putchar+0x58>
	if (USART3 == p_usart) {
   8190e:	4b1a      	ldr	r3, [pc, #104]	; (81978 <usart_serial_putchar+0x88>)
   81910:	4298      	cmp	r0, r3
   81912:	d021      	beq.n	81958 <usart_serial_putchar+0x68>
	return 0;
   81914:	2000      	movs	r0, #0
}
   81916:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81918:	4629      	mov	r1, r5
   8191a:	4620      	mov	r0, r4
   8191c:	f7fe ffe9 	bl	808f2 <uart_write>
   81920:	2800      	cmp	r0, #0
   81922:	d1f9      	bne.n	81918 <usart_serial_putchar+0x28>
		return 1;
   81924:	2001      	movs	r0, #1
   81926:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81928:	4629      	mov	r1, r5
   8192a:	4620      	mov	r0, r4
   8192c:	f7fe fff4 	bl	80918 <usart_write>
   81930:	2800      	cmp	r0, #0
   81932:	d1f9      	bne.n	81928 <usart_serial_putchar+0x38>
		return 1;
   81934:	2001      	movs	r0, #1
   81936:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81938:	4629      	mov	r1, r5
   8193a:	4620      	mov	r0, r4
   8193c:	f7fe ffec 	bl	80918 <usart_write>
   81940:	2800      	cmp	r0, #0
   81942:	d1f9      	bne.n	81938 <usart_serial_putchar+0x48>
		return 1;
   81944:	2001      	movs	r0, #1
   81946:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81948:	4629      	mov	r1, r5
   8194a:	4620      	mov	r0, r4
   8194c:	f7fe ffe4 	bl	80918 <usart_write>
   81950:	2800      	cmp	r0, #0
   81952:	d1f9      	bne.n	81948 <usart_serial_putchar+0x58>
		return 1;
   81954:	2001      	movs	r0, #1
   81956:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81958:	4629      	mov	r1, r5
   8195a:	4620      	mov	r0, r4
   8195c:	f7fe ffdc 	bl	80918 <usart_write>
   81960:	2800      	cmp	r0, #0
   81962:	d1f9      	bne.n	81958 <usart_serial_putchar+0x68>
		return 1;
   81964:	2001      	movs	r0, #1
   81966:	bd38      	pop	{r3, r4, r5, pc}
   81968:	400e0800 	.word	0x400e0800
   8196c:	40098000 	.word	0x40098000
   81970:	4009c000 	.word	0x4009c000
   81974:	400a0000 	.word	0x400a0000
   81978:	400a4000 	.word	0x400a4000

0008197c <flash01_init>:
 *
 * return none
 * external interrupt  init
 */
static int flash01_init(void)
{
   8197c:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8197e:	2006      	movs	r0, #6
   81980:	f7ff feda 	bl	81738 <pmc_enable_periph_clk>
   81984:	2007      	movs	r0, #7
   81986:	f7ff fed7 	bl	81738 <pmc_enable_periph_clk>
 	unsigned char status = 0;
	 
	sysclk_enable_peripheral_clock(ID_EFC0);
	sysclk_enable_peripheral_clock(ID_EFC1);
	
	flash_init(FLASH_ACCESS_MODE_128, 6);											
   8198a:	2106      	movs	r1, #6
   8198c:	2000      	movs	r0, #0
   8198e:	f7fe fc1f 	bl	801d0 <flash_init>
	
	if (flash_is_security_bit_enabled() != 1)
   81992:	f7fe fc6c 	bl	8026e <flash_is_security_bit_enabled>
   81996:	2801      	cmp	r0, #1
   81998:	d001      	beq.n	8199e <flash01_init+0x22>
		flash_enable_security_bit();
   8199a:	f7fe fc63 	bl	80264 <flash_enable_security_bit>
		
	return status;
}
   8199e:	2000      	movs	r0, #0
   819a0:	bd08      	pop	{r3, pc}
	...

000819a4 <usart_init>:
{
   819a4:	b510      	push	{r4, lr}
   819a6:	b088      	sub	sp, #32
	usart_serial_options_t uart_serial_options = {
   819a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   819ac:	9304      	str	r3, [sp, #16]
   819ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
   819b2:	9306      	str	r3, [sp, #24]
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   819b4:	4a15      	ldr	r2, [pc, #84]	; (81a0c <usart_init+0x68>)
   819b6:	f44f 7140 	mov.w	r1, #768	; 0x300
   819ba:	4815      	ldr	r0, [pc, #84]	; (81a10 <usart_init+0x6c>)
   819bc:	f7ff fd8a 	bl	814d4 <pio_configure_pin_group>
   819c0:	2008      	movs	r0, #8
   819c2:	f7ff feb9 	bl	81738 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   819c6:	4c13      	ldr	r4, [pc, #76]	; (81a14 <usart_init+0x70>)
   819c8:	4b13      	ldr	r3, [pc, #76]	; (81a18 <usart_init+0x74>)
   819ca:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   819cc:	4a13      	ldr	r2, [pc, #76]	; (81a1c <usart_init+0x78>)
   819ce:	4b14      	ldr	r3, [pc, #80]	; (81a20 <usart_init+0x7c>)
   819d0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   819d2:	4a14      	ldr	r2, [pc, #80]	; (81a24 <usart_init+0x80>)
   819d4:	4b14      	ldr	r3, [pc, #80]	; (81a28 <usart_init+0x84>)
   819d6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   819d8:	4b14      	ldr	r3, [pc, #80]	; (81a2c <usart_init+0x88>)
   819da:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   819dc:	9b04      	ldr	r3, [sp, #16]
   819de:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   819e0:	9b06      	ldr	r3, [sp, #24]
   819e2:	9303      	str	r3, [sp, #12]
   819e4:	2008      	movs	r0, #8
   819e6:	f7ff fea7 	bl	81738 <pmc_enable_periph_clk>
		uart_init((Uart*)p_usart, &uart_settings);
   819ea:	a901      	add	r1, sp, #4
   819ec:	4620      	mov	r0, r4
   819ee:	f7fe ff65 	bl	808bc <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   819f2:	4c0f      	ldr	r4, [pc, #60]	; (81a30 <usart_init+0x8c>)
   819f4:	6823      	ldr	r3, [r4, #0]
   819f6:	2100      	movs	r1, #0
   819f8:	6898      	ldr	r0, [r3, #8]
   819fa:	f000 fa23 	bl	81e44 <setbuf>
	setbuf(stdin, NULL);
   819fe:	6823      	ldr	r3, [r4, #0]
   81a00:	2100      	movs	r1, #0
   81a02:	6858      	ldr	r0, [r3, #4]
   81a04:	f000 fa1e 	bl	81e44 <setbuf>
}
   81a08:	b008      	add	sp, #32
   81a0a:	bd10      	pop	{r4, pc}
   81a0c:	08000001 	.word	0x08000001
   81a10:	400e0e00 	.word	0x400e0e00
   81a14:	400e0800 	.word	0x400e0800
   81a18:	20074fc0 	.word	0x20074fc0
   81a1c:	000818f1 	.word	0x000818f1
   81a20:	20074fbc 	.word	0x20074fbc
   81a24:	00081835 	.word	0x00081835
   81a28:	20074fb8 	.word	0x20074fb8
   81a2c:	0501bd00 	.word	0x0501bd00
   81a30:	20072240 	.word	0x20072240

00081a34 <board_init>:
 *
 * return none
 * board init
 */
void board_init(void)
{	
   81a34:	b508      	push	{r3, lr}
	/* clock setup */
	sysclk_init();
   81a36:	f7ff fc8d 	bl	81354 <sysclk_init>

	/* disable wdt */
	wdt_disable(WDT);
   81a3a:	4806      	ldr	r0, [pc, #24]	; (81a54 <board_init+0x20>)
   81a3c:	f7fe ff83 	bl	80946 <wdt_disable>
	
	/* init pins */
	pin_init();
   81a40:	f7ff fea4 	bl	8178c <pin_init>
	
	/* init external interrupt */
	external_interrupt_init();
   81a44:	f7ff fec8 	bl	817d8 <external_interrupt_init>
	
	/* init uart */
	usart_init();
   81a48:	f7ff ffac 	bl	819a4 <usart_init>
	
	/* init flash */
	flash01_init();
   81a4c:	f7ff ff96 	bl	8197c <flash01_init>
   81a50:	bd08      	pop	{r3, pc}
   81a52:	bf00      	nop
   81a54:	400e1a50 	.word	0x400e1a50

00081a58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81a58:	e7fe      	b.n	81a58 <Dummy_Handler>
	...

00081a5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81a5c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81a5e:	4b15      	ldr	r3, [pc, #84]	; (81ab4 <Reset_Handler+0x58>)
   81a60:	4a15      	ldr	r2, [pc, #84]	; (81ab8 <Reset_Handler+0x5c>)
   81a62:	429a      	cmp	r2, r3
   81a64:	d009      	beq.n	81a7a <Reset_Handler+0x1e>
   81a66:	4b13      	ldr	r3, [pc, #76]	; (81ab4 <Reset_Handler+0x58>)
   81a68:	4a13      	ldr	r2, [pc, #76]	; (81ab8 <Reset_Handler+0x5c>)
   81a6a:	e003      	b.n	81a74 <Reset_Handler+0x18>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   81a6c:	6811      	ldr	r1, [r2, #0]
   81a6e:	6019      	str	r1, [r3, #0]
   81a70:	3304      	adds	r3, #4
   81a72:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
   81a74:	4911      	ldr	r1, [pc, #68]	; (81abc <Reset_Handler+0x60>)
   81a76:	428b      	cmp	r3, r1
   81a78:	d3f8      	bcc.n	81a6c <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
   81a7a:	4b11      	ldr	r3, [pc, #68]	; (81ac0 <Reset_Handler+0x64>)
   81a7c:	e002      	b.n	81a84 <Reset_Handler+0x28>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81a7e:	2200      	movs	r2, #0
   81a80:	601a      	str	r2, [r3, #0]
   81a82:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81a84:	4a0f      	ldr	r2, [pc, #60]	; (81ac4 <Reset_Handler+0x68>)
   81a86:	4293      	cmp	r3, r2
   81a88:	d3f9      	bcc.n	81a7e <Reset_Handler+0x22>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81a8a:	4b0f      	ldr	r3, [pc, #60]	; (81ac8 <Reset_Handler+0x6c>)
   81a8c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81a90:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81a94:	490d      	ldr	r1, [pc, #52]	; (81acc <Reset_Handler+0x70>)
   81a96:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81a98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81aa0:	d203      	bcs.n	81aaa <Reset_Handler+0x4e>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81aa2:	688b      	ldr	r3, [r1, #8]
   81aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81aa8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81aaa:	f000 f8df 	bl	81c6c <__libc_init_array>

	/* Branch to main function */
	main();
   81aae:	f000 f8c3 	bl	81c38 <main>
   81ab2:	e7fe      	b.n	81ab2 <Reset_Handler+0x56>
   81ab4:	20070000 	.word	0x20070000
   81ab8:	000831dc 	.word	0x000831dc
   81abc:	20072a80 	.word	0x20072a80
   81ac0:	20072a80 	.word	0x20072a80
   81ac4:	20074fc8 	.word	0x20074fc8
   81ac8:	00080000 	.word	0x00080000
   81acc:	e000ed00 	.word	0xe000ed00

00081ad0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81ad0:	4b3e      	ldr	r3, [pc, #248]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ad4:	f003 0303 	and.w	r3, r3, #3
   81ad8:	2b03      	cmp	r3, #3
   81ada:	d83f      	bhi.n	81b5c <SystemCoreClockUpdate+0x8c>
   81adc:	e8df f003 	tbb	[pc, r3]
   81ae0:	2d2d1102 	.word	0x2d2d1102
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81ae4:	4b3a      	ldr	r3, [pc, #232]	; (81bd0 <SystemCoreClockUpdate+0x100>)
   81ae6:	695b      	ldr	r3, [r3, #20]
   81ae8:	f013 0f80 	tst.w	r3, #128	; 0x80
   81aec:	d004      	beq.n	81af8 <SystemCoreClockUpdate+0x28>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81aee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81af2:	4b38      	ldr	r3, [pc, #224]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81af4:	601a      	str	r2, [r3, #0]
   81af6:	e031      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81af8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   81afc:	4b35      	ldr	r3, [pc, #212]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81afe:	601a      	str	r2, [r3, #0]
   81b00:	e02c      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b02:	4b32      	ldr	r3, [pc, #200]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b04:	6a1b      	ldr	r3, [r3, #32]
   81b06:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b0a:	d003      	beq.n	81b14 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b0c:	4a32      	ldr	r2, [pc, #200]	; (81bd8 <SystemCoreClockUpdate+0x108>)
   81b0e:	4b31      	ldr	r3, [pc, #196]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b10:	601a      	str	r2, [r3, #0]
   81b12:	e023      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b14:	4a31      	ldr	r2, [pc, #196]	; (81bdc <SystemCoreClockUpdate+0x10c>)
   81b16:	4b2f      	ldr	r3, [pc, #188]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b18:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b1a:	4b2c      	ldr	r3, [pc, #176]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b1c:	6a1b      	ldr	r3, [r3, #32]
   81b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b22:	2b10      	cmp	r3, #16
   81b24:	d005      	beq.n	81b32 <SystemCoreClockUpdate+0x62>
   81b26:	2b20      	cmp	r3, #32
   81b28:	d118      	bne.n	81b5c <SystemCoreClockUpdate+0x8c>
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81b2a:	4a2b      	ldr	r2, [pc, #172]	; (81bd8 <SystemCoreClockUpdate+0x108>)
   81b2c:	4b29      	ldr	r3, [pc, #164]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b2e:	601a      	str	r2, [r3, #0]
				break;
   81b30:	e014      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
				SystemCoreClock *= 2U;
   81b32:	4a2b      	ldr	r2, [pc, #172]	; (81be0 <SystemCoreClockUpdate+0x110>)
   81b34:	4b27      	ldr	r3, [pc, #156]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b36:	601a      	str	r2, [r3, #0]
				break;
   81b38:	e010      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81b3a:	4b24      	ldr	r3, [pc, #144]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b3c:	6a1b      	ldr	r3, [r3, #32]
   81b3e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81b42:	d01a      	beq.n	81b7a <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81b44:	4a24      	ldr	r2, [pc, #144]	; (81bd8 <SystemCoreClockUpdate+0x108>)
   81b46:	4b23      	ldr	r3, [pc, #140]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b48:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81b4a:	4b20      	ldr	r3, [pc, #128]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b4e:	f003 0303 	and.w	r3, r3, #3
   81b52:	2b02      	cmp	r3, #2
   81b54:	d024      	beq.n	81ba0 <SystemCoreClockUpdate+0xd0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81b56:	4a23      	ldr	r2, [pc, #140]	; (81be4 <SystemCoreClockUpdate+0x114>)
   81b58:	4b1e      	ldr	r3, [pc, #120]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b5a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81b5c:	4b1b      	ldr	r3, [pc, #108]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b64:	2b70      	cmp	r3, #112	; 0x70
   81b66:	d029      	beq.n	81bbc <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81b68:	4b18      	ldr	r3, [pc, #96]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81b6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81b70:	4918      	ldr	r1, [pc, #96]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b72:	680b      	ldr	r3, [r1, #0]
   81b74:	40d3      	lsrs	r3, r2
   81b76:	600b      	str	r3, [r1, #0]
   81b78:	4770      	bx	lr
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81b7a:	4a18      	ldr	r2, [pc, #96]	; (81bdc <SystemCoreClockUpdate+0x10c>)
   81b7c:	4b15      	ldr	r3, [pc, #84]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b7e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81b80:	4b12      	ldr	r3, [pc, #72]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81b82:	6a1b      	ldr	r3, [r3, #32]
   81b84:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81b88:	2b10      	cmp	r3, #16
   81b8a:	d005      	beq.n	81b98 <SystemCoreClockUpdate+0xc8>
   81b8c:	2b20      	cmp	r3, #32
   81b8e:	d1dc      	bne.n	81b4a <SystemCoreClockUpdate+0x7a>
				SystemCoreClock *= 3U;
   81b90:	4a11      	ldr	r2, [pc, #68]	; (81bd8 <SystemCoreClockUpdate+0x108>)
   81b92:	4b10      	ldr	r3, [pc, #64]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b94:	601a      	str	r2, [r3, #0]
				break;
   81b96:	e7d8      	b.n	81b4a <SystemCoreClockUpdate+0x7a>
				SystemCoreClock *= 2U;
   81b98:	4a11      	ldr	r2, [pc, #68]	; (81be0 <SystemCoreClockUpdate+0x110>)
   81b9a:	4b0e      	ldr	r3, [pc, #56]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81b9c:	601a      	str	r2, [r3, #0]
				break;
   81b9e:	e7d4      	b.n	81b4a <SystemCoreClockUpdate+0x7a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ba0:	480a      	ldr	r0, [pc, #40]	; (81bcc <SystemCoreClockUpdate+0xfc>)
   81ba2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   81ba4:	f3c2 420a 	ubfx	r2, r2, #16, #11
   81ba8:	490a      	ldr	r1, [pc, #40]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81baa:	680b      	ldr	r3, [r1, #0]
   81bac:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81bb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   81bb2:	b2d2      	uxtb	r2, r2
   81bb4:	fbb3 f3f2 	udiv	r3, r3, r2
   81bb8:	600b      	str	r3, [r1, #0]
   81bba:	e7cf      	b.n	81b5c <SystemCoreClockUpdate+0x8c>
		SystemCoreClock /= 3U;
   81bbc:	4a05      	ldr	r2, [pc, #20]	; (81bd4 <SystemCoreClockUpdate+0x104>)
   81bbe:	6813      	ldr	r3, [r2, #0]
   81bc0:	4909      	ldr	r1, [pc, #36]	; (81be8 <SystemCoreClockUpdate+0x118>)
   81bc2:	fba1 1303 	umull	r1, r3, r1, r3
   81bc6:	085b      	lsrs	r3, r3, #1
   81bc8:	6013      	str	r3, [r2, #0]
   81bca:	4770      	bx	lr
   81bcc:	400e0600 	.word	0x400e0600
   81bd0:	400e1a10 	.word	0x400e1a10
   81bd4:	2007223c 	.word	0x2007223c
   81bd8:	00b71b00 	.word	0x00b71b00
   81bdc:	003d0900 	.word	0x003d0900
   81be0:	007a1200 	.word	0x007a1200
   81be4:	0e4e1c00 	.word	0x0e4e1c00
   81be8:	aaaaaaab 	.word	0xaaaaaaab

00081bec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81bec:	4b0a      	ldr	r3, [pc, #40]	; (81c18 <_sbrk+0x2c>)
   81bee:	681b      	ldr	r3, [r3, #0]
   81bf0:	b153      	cbz	r3, 81c08 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81bf2:	4b09      	ldr	r3, [pc, #36]	; (81c18 <_sbrk+0x2c>)
   81bf4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81bf6:	181a      	adds	r2, r3, r0
   81bf8:	4908      	ldr	r1, [pc, #32]	; (81c1c <_sbrk+0x30>)
   81bfa:	4291      	cmp	r1, r2
   81bfc:	db08      	blt.n	81c10 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81bfe:	4610      	mov	r0, r2
   81c00:	4a05      	ldr	r2, [pc, #20]	; (81c18 <_sbrk+0x2c>)
   81c02:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81c04:	4618      	mov	r0, r3
   81c06:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81c08:	4a05      	ldr	r2, [pc, #20]	; (81c20 <_sbrk+0x34>)
   81c0a:	4b03      	ldr	r3, [pc, #12]	; (81c18 <_sbrk+0x2c>)
   81c0c:	601a      	str	r2, [r3, #0]
   81c0e:	e7f0      	b.n	81bf2 <_sbrk+0x6>
		return (caddr_t) -1;	
   81c10:	f04f 30ff 	mov.w	r0, #4294967295
}
   81c14:	4770      	bx	lr
   81c16:	bf00      	nop
   81c18:	20072b1c 	.word	0x20072b1c
   81c1c:	20087ffc 	.word	0x20087ffc
   81c20:	2007efc8 	.word	0x2007efc8

00081c24 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81c24:	f04f 30ff 	mov.w	r0, #4294967295
   81c28:	4770      	bx	lr

00081c2a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81c2e:	604b      	str	r3, [r1, #4]

	return 0;
}
   81c30:	2000      	movs	r0, #0
   81c32:	4770      	bx	lr

00081c34 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81c34:	2000      	movs	r0, #0
   81c36:	4770      	bx	lr

00081c38 <main>:
#include <asf.h>
#include "uart_ops.h"
#include "rom.h"

int main (void)
{
   81c38:	b508      	push	{r3, lr}
	mdi.type = RECV;
   81c3a:	4b0a      	ldr	r3, [pc, #40]	; (81c64 <main+0x2c>)
   81c3c:	2210      	movs	r2, #16
   81c3e:	701a      	strb	r2, [r3, #0]
	mdi.status = IDLE;
   81c40:	220a      	movs	r2, #10
   81c42:	705a      	strb	r2, [r3, #1]
		
	board_init();
   81c44:	f7ff fef6 	bl	81a34 <board_init>
   81c48:	e005      	b.n	81c56 <main+0x1e>
		while (uart_write((Uart*)p_usart, c)!=0);
   81c4a:	2166      	movs	r1, #102	; 0x66
   81c4c:	4806      	ldr	r0, [pc, #24]	; (81c68 <main+0x30>)
   81c4e:	f7fe fe50 	bl	808f2 <uart_write>
   81c52:	2800      	cmp	r0, #0
   81c54:	d1f9      	bne.n	81c4a <main+0x12>
							
	while(true) {
		if (uart_ops_recv() < 0)
   81c56:	f7fe fb8d 	bl	80374 <uart_ops_recv>
   81c5a:	2800      	cmp	r0, #0
   81c5c:	dbf5      	blt.n	81c4a <main+0x12>
			usart_serial_putchar((Usart *)UART, COMMAND_ERR);
		else 	
			uart_ops_handler();
   81c5e:	f7fe fc15 	bl	8048c <uart_ops_handler>
   81c62:	e7f8      	b.n	81c56 <main+0x1e>
   81c64:	200701d8 	.word	0x200701d8
   81c68:	400e0800 	.word	0x400e0800

00081c6c <__libc_init_array>:
   81c6c:	b570      	push	{r4, r5, r6, lr}
   81c6e:	4e0f      	ldr	r6, [pc, #60]	; (81cac <__libc_init_array+0x40>)
   81c70:	4d0f      	ldr	r5, [pc, #60]	; (81cb0 <__libc_init_array+0x44>)
   81c72:	1b76      	subs	r6, r6, r5
   81c74:	10b6      	asrs	r6, r6, #2
   81c76:	bf18      	it	ne
   81c78:	2400      	movne	r4, #0
   81c7a:	d005      	beq.n	81c88 <__libc_init_array+0x1c>
   81c7c:	3401      	adds	r4, #1
   81c7e:	f855 3b04 	ldr.w	r3, [r5], #4
   81c82:	4798      	blx	r3
   81c84:	42a6      	cmp	r6, r4
   81c86:	d1f9      	bne.n	81c7c <__libc_init_array+0x10>
   81c88:	4e0a      	ldr	r6, [pc, #40]	; (81cb4 <__libc_init_array+0x48>)
   81c8a:	4d0b      	ldr	r5, [pc, #44]	; (81cb8 <__libc_init_array+0x4c>)
   81c8c:	f001 fa84 	bl	83198 <_init>
   81c90:	1b76      	subs	r6, r6, r5
   81c92:	10b6      	asrs	r6, r6, #2
   81c94:	bf18      	it	ne
   81c96:	2400      	movne	r4, #0
   81c98:	d006      	beq.n	81ca8 <__libc_init_array+0x3c>
   81c9a:	3401      	adds	r4, #1
   81c9c:	f855 3b04 	ldr.w	r3, [r5], #4
   81ca0:	4798      	blx	r3
   81ca2:	42a6      	cmp	r6, r4
   81ca4:	d1f9      	bne.n	81c9a <__libc_init_array+0x2e>
   81ca6:	bd70      	pop	{r4, r5, r6, pc}
   81ca8:	bd70      	pop	{r4, r5, r6, pc}
   81caa:	bf00      	nop
   81cac:	000831a4 	.word	0x000831a4
   81cb0:	000831a4 	.word	0x000831a4
   81cb4:	000831ac 	.word	0x000831ac
   81cb8:	000831a4 	.word	0x000831a4

00081cbc <memcpy>:
   81cbc:	4684      	mov	ip, r0
   81cbe:	ea41 0300 	orr.w	r3, r1, r0
   81cc2:	f013 0303 	ands.w	r3, r3, #3
   81cc6:	d149      	bne.n	81d5c <memcpy+0xa0>
   81cc8:	3a40      	subs	r2, #64	; 0x40
   81cca:	d323      	bcc.n	81d14 <memcpy+0x58>
   81ccc:	680b      	ldr	r3, [r1, #0]
   81cce:	6003      	str	r3, [r0, #0]
   81cd0:	684b      	ldr	r3, [r1, #4]
   81cd2:	6043      	str	r3, [r0, #4]
   81cd4:	688b      	ldr	r3, [r1, #8]
   81cd6:	6083      	str	r3, [r0, #8]
   81cd8:	68cb      	ldr	r3, [r1, #12]
   81cda:	60c3      	str	r3, [r0, #12]
   81cdc:	690b      	ldr	r3, [r1, #16]
   81cde:	6103      	str	r3, [r0, #16]
   81ce0:	694b      	ldr	r3, [r1, #20]
   81ce2:	6143      	str	r3, [r0, #20]
   81ce4:	698b      	ldr	r3, [r1, #24]
   81ce6:	6183      	str	r3, [r0, #24]
   81ce8:	69cb      	ldr	r3, [r1, #28]
   81cea:	61c3      	str	r3, [r0, #28]
   81cec:	6a0b      	ldr	r3, [r1, #32]
   81cee:	6203      	str	r3, [r0, #32]
   81cf0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81cf2:	6243      	str	r3, [r0, #36]	; 0x24
   81cf4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81cf6:	6283      	str	r3, [r0, #40]	; 0x28
   81cf8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
   81cfc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81cfe:	6303      	str	r3, [r0, #48]	; 0x30
   81d00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81d02:	6343      	str	r3, [r0, #52]	; 0x34
   81d04:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81d06:	6383      	str	r3, [r0, #56]	; 0x38
   81d08:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81d0a:	63c3      	str	r3, [r0, #60]	; 0x3c
   81d0c:	3040      	adds	r0, #64	; 0x40
   81d0e:	3140      	adds	r1, #64	; 0x40
   81d10:	3a40      	subs	r2, #64	; 0x40
   81d12:	d2db      	bcs.n	81ccc <memcpy+0x10>
   81d14:	3230      	adds	r2, #48	; 0x30
   81d16:	d30b      	bcc.n	81d30 <memcpy+0x74>
   81d18:	680b      	ldr	r3, [r1, #0]
   81d1a:	6003      	str	r3, [r0, #0]
   81d1c:	684b      	ldr	r3, [r1, #4]
   81d1e:	6043      	str	r3, [r0, #4]
   81d20:	688b      	ldr	r3, [r1, #8]
   81d22:	6083      	str	r3, [r0, #8]
   81d24:	68cb      	ldr	r3, [r1, #12]
   81d26:	60c3      	str	r3, [r0, #12]
   81d28:	3010      	adds	r0, #16
   81d2a:	3110      	adds	r1, #16
   81d2c:	3a10      	subs	r2, #16
   81d2e:	d2f3      	bcs.n	81d18 <memcpy+0x5c>
   81d30:	320c      	adds	r2, #12
   81d32:	d305      	bcc.n	81d40 <memcpy+0x84>
   81d34:	f851 3b04 	ldr.w	r3, [r1], #4
   81d38:	f840 3b04 	str.w	r3, [r0], #4
   81d3c:	3a04      	subs	r2, #4
   81d3e:	d2f9      	bcs.n	81d34 <memcpy+0x78>
   81d40:	3204      	adds	r2, #4
   81d42:	d008      	beq.n	81d56 <memcpy+0x9a>
   81d44:	07d2      	lsls	r2, r2, #31
   81d46:	bf1c      	itt	ne
   81d48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81d4c:	f800 3b01 	strbne.w	r3, [r0], #1
   81d50:	d301      	bcc.n	81d56 <memcpy+0x9a>
   81d52:	880b      	ldrh	r3, [r1, #0]
   81d54:	8003      	strh	r3, [r0, #0]
   81d56:	4660      	mov	r0, ip
   81d58:	4770      	bx	lr
   81d5a:	bf00      	nop
   81d5c:	2a08      	cmp	r2, #8
   81d5e:	d313      	bcc.n	81d88 <memcpy+0xcc>
   81d60:	078b      	lsls	r3, r1, #30
   81d62:	d0b1      	beq.n	81cc8 <memcpy+0xc>
   81d64:	f010 0303 	ands.w	r3, r0, #3
   81d68:	d0ae      	beq.n	81cc8 <memcpy+0xc>
   81d6a:	f1c3 0304 	rsb	r3, r3, #4
   81d6e:	1ad2      	subs	r2, r2, r3
   81d70:	07db      	lsls	r3, r3, #31
   81d72:	bf1c      	itt	ne
   81d74:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81d78:	f800 3b01 	strbne.w	r3, [r0], #1
   81d7c:	d3a4      	bcc.n	81cc8 <memcpy+0xc>
   81d7e:	f831 3b02 	ldrh.w	r3, [r1], #2
   81d82:	f820 3b02 	strh.w	r3, [r0], #2
   81d86:	e79f      	b.n	81cc8 <memcpy+0xc>
   81d88:	3a04      	subs	r2, #4
   81d8a:	d3d9      	bcc.n	81d40 <memcpy+0x84>
   81d8c:	3a01      	subs	r2, #1
   81d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   81d92:	f800 3b01 	strb.w	r3, [r0], #1
   81d96:	d2f9      	bcs.n	81d8c <memcpy+0xd0>
   81d98:	780b      	ldrb	r3, [r1, #0]
   81d9a:	7003      	strb	r3, [r0, #0]
   81d9c:	784b      	ldrb	r3, [r1, #1]
   81d9e:	7043      	strb	r3, [r0, #1]
   81da0:	788b      	ldrb	r3, [r1, #2]
   81da2:	7083      	strb	r3, [r0, #2]
   81da4:	4660      	mov	r0, ip
   81da6:	4770      	bx	lr

00081da8 <memset>:
   81da8:	b470      	push	{r4, r5, r6}
   81daa:	0786      	lsls	r6, r0, #30
   81dac:	d046      	beq.n	81e3c <memset+0x94>
   81dae:	1e54      	subs	r4, r2, #1
   81db0:	2a00      	cmp	r2, #0
   81db2:	d041      	beq.n	81e38 <memset+0x90>
   81db4:	b2ca      	uxtb	r2, r1
   81db6:	4603      	mov	r3, r0
   81db8:	e002      	b.n	81dc0 <memset+0x18>
   81dba:	f114 34ff 	adds.w	r4, r4, #4294967295
   81dbe:	d33b      	bcc.n	81e38 <memset+0x90>
   81dc0:	f803 2b01 	strb.w	r2, [r3], #1
   81dc4:	079d      	lsls	r5, r3, #30
   81dc6:	d1f8      	bne.n	81dba <memset+0x12>
   81dc8:	2c03      	cmp	r4, #3
   81dca:	d92e      	bls.n	81e2a <memset+0x82>
   81dcc:	b2cd      	uxtb	r5, r1
   81dce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81dd2:	2c0f      	cmp	r4, #15
   81dd4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81dd8:	d919      	bls.n	81e0e <memset+0x66>
   81dda:	4626      	mov	r6, r4
   81ddc:	f103 0210 	add.w	r2, r3, #16
   81de0:	3e10      	subs	r6, #16
   81de2:	2e0f      	cmp	r6, #15
   81de4:	f842 5c10 	str.w	r5, [r2, #-16]
   81de8:	f842 5c0c 	str.w	r5, [r2, #-12]
   81dec:	f842 5c08 	str.w	r5, [r2, #-8]
   81df0:	f842 5c04 	str.w	r5, [r2, #-4]
   81df4:	f102 0210 	add.w	r2, r2, #16
   81df8:	d8f2      	bhi.n	81de0 <memset+0x38>
   81dfa:	f1a4 0210 	sub.w	r2, r4, #16
   81dfe:	f022 020f 	bic.w	r2, r2, #15
   81e02:	f004 040f 	and.w	r4, r4, #15
   81e06:	3210      	adds	r2, #16
   81e08:	2c03      	cmp	r4, #3
   81e0a:	4413      	add	r3, r2
   81e0c:	d90d      	bls.n	81e2a <memset+0x82>
   81e0e:	461e      	mov	r6, r3
   81e10:	4622      	mov	r2, r4
   81e12:	3a04      	subs	r2, #4
   81e14:	2a03      	cmp	r2, #3
   81e16:	f846 5b04 	str.w	r5, [r6], #4
   81e1a:	d8fa      	bhi.n	81e12 <memset+0x6a>
   81e1c:	1f22      	subs	r2, r4, #4
   81e1e:	f022 0203 	bic.w	r2, r2, #3
   81e22:	3204      	adds	r2, #4
   81e24:	4413      	add	r3, r2
   81e26:	f004 0403 	and.w	r4, r4, #3
   81e2a:	b12c      	cbz	r4, 81e38 <memset+0x90>
   81e2c:	b2c9      	uxtb	r1, r1
   81e2e:	441c      	add	r4, r3
   81e30:	f803 1b01 	strb.w	r1, [r3], #1
   81e34:	429c      	cmp	r4, r3
   81e36:	d1fb      	bne.n	81e30 <memset+0x88>
   81e38:	bc70      	pop	{r4, r5, r6}
   81e3a:	4770      	bx	lr
   81e3c:	4614      	mov	r4, r2
   81e3e:	4603      	mov	r3, r0
   81e40:	e7c2      	b.n	81dc8 <memset+0x20>
   81e42:	bf00      	nop

00081e44 <setbuf>:
   81e44:	2900      	cmp	r1, #0
   81e46:	bf0c      	ite	eq
   81e48:	2202      	moveq	r2, #2
   81e4a:	2200      	movne	r2, #0
   81e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81e50:	f000 b800 	b.w	81e54 <setvbuf>

00081e54 <setvbuf>:
   81e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81e58:	4d50      	ldr	r5, [pc, #320]	; (81f9c <setvbuf+0x148>)
   81e5a:	b083      	sub	sp, #12
   81e5c:	682d      	ldr	r5, [r5, #0]
   81e5e:	4604      	mov	r4, r0
   81e60:	460f      	mov	r7, r1
   81e62:	4690      	mov	r8, r2
   81e64:	461e      	mov	r6, r3
   81e66:	b115      	cbz	r5, 81e6e <setvbuf+0x1a>
   81e68:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81e6a:	2b00      	cmp	r3, #0
   81e6c:	d077      	beq.n	81f5e <setvbuf+0x10a>
   81e6e:	f1b8 0f02 	cmp.w	r8, #2
   81e72:	d004      	beq.n	81e7e <setvbuf+0x2a>
   81e74:	f1b8 0f01 	cmp.w	r8, #1
   81e78:	d87d      	bhi.n	81f76 <setvbuf+0x122>
   81e7a:	2e00      	cmp	r6, #0
   81e7c:	db7b      	blt.n	81f76 <setvbuf+0x122>
   81e7e:	4621      	mov	r1, r4
   81e80:	4628      	mov	r0, r5
   81e82:	f000 f939 	bl	820f8 <_fflush_r>
   81e86:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e88:	b141      	cbz	r1, 81e9c <setvbuf+0x48>
   81e8a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e8e:	4299      	cmp	r1, r3
   81e90:	d002      	beq.n	81e98 <setvbuf+0x44>
   81e92:	4628      	mov	r0, r5
   81e94:	f000 fa38 	bl	82308 <_free_r>
   81e98:	2300      	movs	r3, #0
   81e9a:	6323      	str	r3, [r4, #48]	; 0x30
   81e9c:	2200      	movs	r2, #0
   81e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81ea2:	61a2      	str	r2, [r4, #24]
   81ea4:	6062      	str	r2, [r4, #4]
   81ea6:	061a      	lsls	r2, r3, #24
   81ea8:	d452      	bmi.n	81f50 <setvbuf+0xfc>
   81eaa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81eae:	f023 0303 	bic.w	r3, r3, #3
   81eb2:	f1b8 0f02 	cmp.w	r8, #2
   81eb6:	81a3      	strh	r3, [r4, #12]
   81eb8:	d037      	beq.n	81f2a <setvbuf+0xd6>
   81eba:	ab01      	add	r3, sp, #4
   81ebc:	466a      	mov	r2, sp
   81ebe:	4621      	mov	r1, r4
   81ec0:	4628      	mov	r0, r5
   81ec2:	f000 fb2f 	bl	82524 <__swhatbuf_r>
   81ec6:	89a3      	ldrh	r3, [r4, #12]
   81ec8:	4318      	orrs	r0, r3
   81eca:	81a0      	strh	r0, [r4, #12]
   81ecc:	b316      	cbz	r6, 81f14 <setvbuf+0xc0>
   81ece:	b317      	cbz	r7, 81f16 <setvbuf+0xc2>
   81ed0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81ed2:	2b00      	cmp	r3, #0
   81ed4:	d04b      	beq.n	81f6e <setvbuf+0x11a>
   81ed6:	9b00      	ldr	r3, [sp, #0]
   81ed8:	6027      	str	r7, [r4, #0]
   81eda:	429e      	cmp	r6, r3
   81edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81ee0:	6127      	str	r7, [r4, #16]
   81ee2:	bf1c      	itt	ne
   81ee4:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   81ee8:	81a3      	strhne	r3, [r4, #12]
   81eea:	f1b8 0f01 	cmp.w	r8, #1
   81eee:	bf04      	itt	eq
   81ef0:	f043 0301 	orreq.w	r3, r3, #1
   81ef4:	81a3      	strheq	r3, [r4, #12]
   81ef6:	b29b      	uxth	r3, r3
   81ef8:	f013 0008 	ands.w	r0, r3, #8
   81efc:	6166      	str	r6, [r4, #20]
   81efe:	d023      	beq.n	81f48 <setvbuf+0xf4>
   81f00:	f013 0001 	ands.w	r0, r3, #1
   81f04:	d02f      	beq.n	81f66 <setvbuf+0x112>
   81f06:	2000      	movs	r0, #0
   81f08:	4276      	negs	r6, r6
   81f0a:	61a6      	str	r6, [r4, #24]
   81f0c:	60a0      	str	r0, [r4, #8]
   81f0e:	b003      	add	sp, #12
   81f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81f14:	9e00      	ldr	r6, [sp, #0]
   81f16:	4630      	mov	r0, r6
   81f18:	f000 fb32 	bl	82580 <malloc>
   81f1c:	4607      	mov	r7, r0
   81f1e:	b368      	cbz	r0, 81f7c <setvbuf+0x128>
   81f20:	89a3      	ldrh	r3, [r4, #12]
   81f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f26:	81a3      	strh	r3, [r4, #12]
   81f28:	e7d2      	b.n	81ed0 <setvbuf+0x7c>
   81f2a:	2000      	movs	r0, #0
   81f2c:	2500      	movs	r5, #0
   81f2e:	2101      	movs	r1, #1
   81f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81f34:	f043 0302 	orr.w	r3, r3, #2
   81f38:	81a3      	strh	r3, [r4, #12]
   81f3a:	60a5      	str	r5, [r4, #8]
   81f3c:	6161      	str	r1, [r4, #20]
   81f3e:	6022      	str	r2, [r4, #0]
   81f40:	6122      	str	r2, [r4, #16]
   81f42:	b003      	add	sp, #12
   81f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81f48:	60a0      	str	r0, [r4, #8]
   81f4a:	b003      	add	sp, #12
   81f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81f50:	6921      	ldr	r1, [r4, #16]
   81f52:	4628      	mov	r0, r5
   81f54:	f000 f9d8 	bl	82308 <_free_r>
   81f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81f5c:	e7a5      	b.n	81eaa <setvbuf+0x56>
   81f5e:	4628      	mov	r0, r5
   81f60:	f000 f95e 	bl	82220 <__sinit>
   81f64:	e783      	b.n	81e6e <setvbuf+0x1a>
   81f66:	60a6      	str	r6, [r4, #8]
   81f68:	b003      	add	sp, #12
   81f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81f6e:	4628      	mov	r0, r5
   81f70:	f000 f956 	bl	82220 <__sinit>
   81f74:	e7af      	b.n	81ed6 <setvbuf+0x82>
   81f76:	f04f 30ff 	mov.w	r0, #4294967295
   81f7a:	e7e2      	b.n	81f42 <setvbuf+0xee>
   81f7c:	f8dd 9000 	ldr.w	r9, [sp]
   81f80:	45b1      	cmp	r9, r6
   81f82:	d006      	beq.n	81f92 <setvbuf+0x13e>
   81f84:	4648      	mov	r0, r9
   81f86:	f000 fafb 	bl	82580 <malloc>
   81f8a:	4607      	mov	r7, r0
   81f8c:	b108      	cbz	r0, 81f92 <setvbuf+0x13e>
   81f8e:	464e      	mov	r6, r9
   81f90:	e7c6      	b.n	81f20 <setvbuf+0xcc>
   81f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81f96:	f04f 30ff 	mov.w	r0, #4294967295
   81f9a:	e7c7      	b.n	81f2c <setvbuf+0xd8>
   81f9c:	20072240 	.word	0x20072240

00081fa0 <register_fini>:
   81fa0:	4b02      	ldr	r3, [pc, #8]	; (81fac <register_fini+0xc>)
   81fa2:	b113      	cbz	r3, 81faa <register_fini+0xa>
   81fa4:	4802      	ldr	r0, [pc, #8]	; (81fb0 <register_fini+0x10>)
   81fa6:	f000 b805 	b.w	81fb4 <atexit>
   81faa:	4770      	bx	lr
   81fac:	00000000 	.word	0x00000000
   81fb0:	00082235 	.word	0x00082235

00081fb4 <atexit>:
   81fb4:	2300      	movs	r3, #0
   81fb6:	4601      	mov	r1, r0
   81fb8:	461a      	mov	r2, r3
   81fba:	4618      	mov	r0, r3
   81fbc:	f000 bdfa 	b.w	82bb4 <__register_exitproc>

00081fc0 <__sflush_r>:
   81fc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   81fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fc8:	b29a      	uxth	r2, r3
   81fca:	460d      	mov	r5, r1
   81fcc:	0711      	lsls	r1, r2, #28
   81fce:	4680      	mov	r8, r0
   81fd0:	d43a      	bmi.n	82048 <__sflush_r+0x88>
   81fd2:	686a      	ldr	r2, [r5, #4]
   81fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81fd8:	2a00      	cmp	r2, #0
   81fda:	81ab      	strh	r3, [r5, #12]
   81fdc:	dd70      	ble.n	820c0 <__sflush_r+0x100>
   81fde:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81fe0:	2c00      	cmp	r4, #0
   81fe2:	d04a      	beq.n	8207a <__sflush_r+0xba>
   81fe4:	2200      	movs	r2, #0
   81fe6:	b29b      	uxth	r3, r3
   81fe8:	f8d8 6000 	ldr.w	r6, [r8]
   81fec:	f8c8 2000 	str.w	r2, [r8]
   81ff0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   81ff4:	d068      	beq.n	820c8 <__sflush_r+0x108>
   81ff6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81ff8:	075f      	lsls	r7, r3, #29
   81ffa:	d505      	bpl.n	82008 <__sflush_r+0x48>
   81ffc:	6869      	ldr	r1, [r5, #4]
   81ffe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82000:	1a52      	subs	r2, r2, r1
   82002:	b10b      	cbz	r3, 82008 <__sflush_r+0x48>
   82004:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82006:	1ad2      	subs	r2, r2, r3
   82008:	2300      	movs	r3, #0
   8200a:	69e9      	ldr	r1, [r5, #28]
   8200c:	4640      	mov	r0, r8
   8200e:	47a0      	blx	r4
   82010:	1c44      	adds	r4, r0, #1
   82012:	d03d      	beq.n	82090 <__sflush_r+0xd0>
   82014:	2100      	movs	r1, #0
   82016:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8201a:	692a      	ldr	r2, [r5, #16]
   8201c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82020:	81ab      	strh	r3, [r5, #12]
   82022:	04db      	lsls	r3, r3, #19
   82024:	6069      	str	r1, [r5, #4]
   82026:	602a      	str	r2, [r5, #0]
   82028:	d448      	bmi.n	820bc <__sflush_r+0xfc>
   8202a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8202c:	f8c8 6000 	str.w	r6, [r8]
   82030:	b319      	cbz	r1, 8207a <__sflush_r+0xba>
   82032:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82036:	4299      	cmp	r1, r3
   82038:	d002      	beq.n	82040 <__sflush_r+0x80>
   8203a:	4640      	mov	r0, r8
   8203c:	f000 f964 	bl	82308 <_free_r>
   82040:	2000      	movs	r0, #0
   82042:	6328      	str	r0, [r5, #48]	; 0x30
   82044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82048:	692e      	ldr	r6, [r5, #16]
   8204a:	b1b6      	cbz	r6, 8207a <__sflush_r+0xba>
   8204c:	0791      	lsls	r1, r2, #30
   8204e:	bf18      	it	ne
   82050:	2300      	movne	r3, #0
   82052:	682c      	ldr	r4, [r5, #0]
   82054:	bf08      	it	eq
   82056:	696b      	ldreq	r3, [r5, #20]
   82058:	602e      	str	r6, [r5, #0]
   8205a:	1ba4      	subs	r4, r4, r6
   8205c:	60ab      	str	r3, [r5, #8]
   8205e:	e00a      	b.n	82076 <__sflush_r+0xb6>
   82060:	4623      	mov	r3, r4
   82062:	4632      	mov	r2, r6
   82064:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82066:	69e9      	ldr	r1, [r5, #28]
   82068:	4640      	mov	r0, r8
   8206a:	47b8      	blx	r7
   8206c:	2800      	cmp	r0, #0
   8206e:	eba4 0400 	sub.w	r4, r4, r0
   82072:	4406      	add	r6, r0
   82074:	dd04      	ble.n	82080 <__sflush_r+0xc0>
   82076:	2c00      	cmp	r4, #0
   82078:	dcf2      	bgt.n	82060 <__sflush_r+0xa0>
   8207a:	2000      	movs	r0, #0
   8207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82080:	89ab      	ldrh	r3, [r5, #12]
   82082:	f04f 30ff 	mov.w	r0, #4294967295
   82086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8208a:	81ab      	strh	r3, [r5, #12]
   8208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82090:	f8d8 4000 	ldr.w	r4, [r8]
   82094:	2c1d      	cmp	r4, #29
   82096:	d8f3      	bhi.n	82080 <__sflush_r+0xc0>
   82098:	4b16      	ldr	r3, [pc, #88]	; (820f4 <__sflush_r+0x134>)
   8209a:	40e3      	lsrs	r3, r4
   8209c:	43db      	mvns	r3, r3
   8209e:	f013 0301 	ands.w	r3, r3, #1
   820a2:	d1ed      	bne.n	82080 <__sflush_r+0xc0>
   820a4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   820a8:	6929      	ldr	r1, [r5, #16]
   820aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   820ae:	81aa      	strh	r2, [r5, #12]
   820b0:	04d2      	lsls	r2, r2, #19
   820b2:	606b      	str	r3, [r5, #4]
   820b4:	6029      	str	r1, [r5, #0]
   820b6:	d5b8      	bpl.n	8202a <__sflush_r+0x6a>
   820b8:	2c00      	cmp	r4, #0
   820ba:	d1b6      	bne.n	8202a <__sflush_r+0x6a>
   820bc:	6528      	str	r0, [r5, #80]	; 0x50
   820be:	e7b4      	b.n	8202a <__sflush_r+0x6a>
   820c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   820c2:	2a00      	cmp	r2, #0
   820c4:	dc8b      	bgt.n	81fde <__sflush_r+0x1e>
   820c6:	e7d8      	b.n	8207a <__sflush_r+0xba>
   820c8:	2301      	movs	r3, #1
   820ca:	69e9      	ldr	r1, [r5, #28]
   820cc:	4640      	mov	r0, r8
   820ce:	47a0      	blx	r4
   820d0:	1c43      	adds	r3, r0, #1
   820d2:	4602      	mov	r2, r0
   820d4:	d002      	beq.n	820dc <__sflush_r+0x11c>
   820d6:	89ab      	ldrh	r3, [r5, #12]
   820d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820da:	e78d      	b.n	81ff8 <__sflush_r+0x38>
   820dc:	f8d8 3000 	ldr.w	r3, [r8]
   820e0:	2b00      	cmp	r3, #0
   820e2:	d0f8      	beq.n	820d6 <__sflush_r+0x116>
   820e4:	2b1d      	cmp	r3, #29
   820e6:	d001      	beq.n	820ec <__sflush_r+0x12c>
   820e8:	2b16      	cmp	r3, #22
   820ea:	d1c9      	bne.n	82080 <__sflush_r+0xc0>
   820ec:	f8c8 6000 	str.w	r6, [r8]
   820f0:	e7c3      	b.n	8207a <__sflush_r+0xba>
   820f2:	bf00      	nop
   820f4:	20400001 	.word	0x20400001

000820f8 <_fflush_r>:
   820f8:	b510      	push	{r4, lr}
   820fa:	4604      	mov	r4, r0
   820fc:	b082      	sub	sp, #8
   820fe:	b108      	cbz	r0, 82104 <_fflush_r+0xc>
   82100:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82102:	b153      	cbz	r3, 8211a <_fflush_r+0x22>
   82104:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82108:	b908      	cbnz	r0, 8210e <_fflush_r+0x16>
   8210a:	b002      	add	sp, #8
   8210c:	bd10      	pop	{r4, pc}
   8210e:	4620      	mov	r0, r4
   82110:	b002      	add	sp, #8
   82112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82116:	f7ff bf53 	b.w	81fc0 <__sflush_r>
   8211a:	9101      	str	r1, [sp, #4]
   8211c:	f000 f880 	bl	82220 <__sinit>
   82120:	9901      	ldr	r1, [sp, #4]
   82122:	e7ef      	b.n	82104 <_fflush_r+0xc>

00082124 <_cleanup_r>:
   82124:	4901      	ldr	r1, [pc, #4]	; (8212c <_cleanup_r+0x8>)
   82126:	f000 b9d5 	b.w	824d4 <_fwalk_reent>
   8212a:	bf00      	nop
   8212c:	00082c85 	.word	0x00082c85

00082130 <__sinit.part.1>:
   82130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82134:	4607      	mov	r7, r0
   82136:	2400      	movs	r4, #0
   82138:	2304      	movs	r3, #4
   8213a:	2103      	movs	r1, #3
   8213c:	687d      	ldr	r5, [r7, #4]
   8213e:	4833      	ldr	r0, [pc, #204]	; (8220c <__sinit.part.1+0xdc>)
   82140:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82144:	63f8      	str	r0, [r7, #60]	; 0x3c
   82146:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8214a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8214e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82152:	b083      	sub	sp, #12
   82154:	602c      	str	r4, [r5, #0]
   82156:	606c      	str	r4, [r5, #4]
   82158:	60ac      	str	r4, [r5, #8]
   8215a:	666c      	str	r4, [r5, #100]	; 0x64
   8215c:	81ec      	strh	r4, [r5, #14]
   8215e:	612c      	str	r4, [r5, #16]
   82160:	616c      	str	r4, [r5, #20]
   82162:	61ac      	str	r4, [r5, #24]
   82164:	81ab      	strh	r3, [r5, #12]
   82166:	4621      	mov	r1, r4
   82168:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8216c:	2208      	movs	r2, #8
   8216e:	f7ff fe1b 	bl	81da8 <memset>
   82172:	2301      	movs	r3, #1
   82174:	2209      	movs	r2, #9
   82176:	68be      	ldr	r6, [r7, #8]
   82178:	f8df b094 	ldr.w	fp, [pc, #148]	; 82210 <__sinit.part.1+0xe0>
   8217c:	f8df a094 	ldr.w	sl, [pc, #148]	; 82214 <__sinit.part.1+0xe4>
   82180:	f8df 9094 	ldr.w	r9, [pc, #148]	; 82218 <__sinit.part.1+0xe8>
   82184:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8221c <__sinit.part.1+0xec>
   82188:	f8c5 b020 	str.w	fp, [r5, #32]
   8218c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82190:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82194:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82198:	61ed      	str	r5, [r5, #28]
   8219a:	4621      	mov	r1, r4
   8219c:	81f3      	strh	r3, [r6, #14]
   8219e:	81b2      	strh	r2, [r6, #12]
   821a0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   821a4:	6034      	str	r4, [r6, #0]
   821a6:	6074      	str	r4, [r6, #4]
   821a8:	60b4      	str	r4, [r6, #8]
   821aa:	6674      	str	r4, [r6, #100]	; 0x64
   821ac:	6134      	str	r4, [r6, #16]
   821ae:	6174      	str	r4, [r6, #20]
   821b0:	61b4      	str	r4, [r6, #24]
   821b2:	2208      	movs	r2, #8
   821b4:	9301      	str	r3, [sp, #4]
   821b6:	f7ff fdf7 	bl	81da8 <memset>
   821ba:	2012      	movs	r0, #18
   821bc:	2202      	movs	r2, #2
   821be:	68fd      	ldr	r5, [r7, #12]
   821c0:	4621      	mov	r1, r4
   821c2:	61f6      	str	r6, [r6, #28]
   821c4:	f8c6 b020 	str.w	fp, [r6, #32]
   821c8:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   821cc:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   821d0:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   821d4:	81a8      	strh	r0, [r5, #12]
   821d6:	81ea      	strh	r2, [r5, #14]
   821d8:	602c      	str	r4, [r5, #0]
   821da:	606c      	str	r4, [r5, #4]
   821dc:	60ac      	str	r4, [r5, #8]
   821de:	666c      	str	r4, [r5, #100]	; 0x64
   821e0:	612c      	str	r4, [r5, #16]
   821e2:	616c      	str	r4, [r5, #20]
   821e4:	61ac      	str	r4, [r5, #24]
   821e6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   821ea:	2208      	movs	r2, #8
   821ec:	f7ff fddc 	bl	81da8 <memset>
   821f0:	9b01      	ldr	r3, [sp, #4]
   821f2:	61ed      	str	r5, [r5, #28]
   821f4:	f8c5 b020 	str.w	fp, [r5, #32]
   821f8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   821fc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82200:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82204:	63bb      	str	r3, [r7, #56]	; 0x38
   82206:	b003      	add	sp, #12
   82208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8220c:	00082125 	.word	0x00082125
   82210:	00082b01 	.word	0x00082b01
   82214:	00082b25 	.word	0x00082b25
   82218:	00082b61 	.word	0x00082b61
   8221c:	00082b81 	.word	0x00082b81

00082220 <__sinit>:
   82220:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82222:	b103      	cbz	r3, 82226 <__sinit+0x6>
   82224:	4770      	bx	lr
   82226:	f7ff bf83 	b.w	82130 <__sinit.part.1>
   8222a:	bf00      	nop

0008222c <__sfp_lock_acquire>:
   8222c:	4770      	bx	lr
   8222e:	bf00      	nop

00082230 <__sfp_lock_release>:
   82230:	4770      	bx	lr
   82232:	bf00      	nop

00082234 <__libc_fini_array>:
   82234:	b538      	push	{r3, r4, r5, lr}
   82236:	4c0a      	ldr	r4, [pc, #40]	; (82260 <__libc_fini_array+0x2c>)
   82238:	4d0a      	ldr	r5, [pc, #40]	; (82264 <__libc_fini_array+0x30>)
   8223a:	1b64      	subs	r4, r4, r5
   8223c:	10a4      	asrs	r4, r4, #2
   8223e:	d00a      	beq.n	82256 <__libc_fini_array+0x22>
   82240:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82244:	3b01      	subs	r3, #1
   82246:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8224a:	3c01      	subs	r4, #1
   8224c:	f855 3904 	ldr.w	r3, [r5], #-4
   82250:	4798      	blx	r3
   82252:	2c00      	cmp	r4, #0
   82254:	d1f9      	bne.n	8224a <__libc_fini_array+0x16>
   82256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8225a:	f000 bfa7 	b.w	831ac <_fini>
   8225e:	bf00      	nop
   82260:	000831dc 	.word	0x000831dc
   82264:	000831d8 	.word	0x000831d8

00082268 <_malloc_trim_r>:
   82268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8226a:	460c      	mov	r4, r1
   8226c:	4f23      	ldr	r7, [pc, #140]	; (822fc <_malloc_trim_r+0x94>)
   8226e:	4606      	mov	r6, r0
   82270:	f000 fc30 	bl	82ad4 <__malloc_lock>
   82274:	68bb      	ldr	r3, [r7, #8]
   82276:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8227a:	685d      	ldr	r5, [r3, #4]
   8227c:	310f      	adds	r1, #15
   8227e:	f025 0503 	bic.w	r5, r5, #3
   82282:	4429      	add	r1, r5
   82284:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82288:	f021 010f 	bic.w	r1, r1, #15
   8228c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82290:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82294:	db07      	blt.n	822a6 <_malloc_trim_r+0x3e>
   82296:	2100      	movs	r1, #0
   82298:	4630      	mov	r0, r6
   8229a:	f000 fc1f 	bl	82adc <_sbrk_r>
   8229e:	68bb      	ldr	r3, [r7, #8]
   822a0:	442b      	add	r3, r5
   822a2:	4298      	cmp	r0, r3
   822a4:	d004      	beq.n	822b0 <_malloc_trim_r+0x48>
   822a6:	4630      	mov	r0, r6
   822a8:	f000 fc16 	bl	82ad8 <__malloc_unlock>
   822ac:	2000      	movs	r0, #0
   822ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822b0:	4261      	negs	r1, r4
   822b2:	4630      	mov	r0, r6
   822b4:	f000 fc12 	bl	82adc <_sbrk_r>
   822b8:	3001      	adds	r0, #1
   822ba:	d00d      	beq.n	822d8 <_malloc_trim_r+0x70>
   822bc:	4b10      	ldr	r3, [pc, #64]	; (82300 <_malloc_trim_r+0x98>)
   822be:	68ba      	ldr	r2, [r7, #8]
   822c0:	6819      	ldr	r1, [r3, #0]
   822c2:	1b2d      	subs	r5, r5, r4
   822c4:	f045 0501 	orr.w	r5, r5, #1
   822c8:	4630      	mov	r0, r6
   822ca:	1b09      	subs	r1, r1, r4
   822cc:	6055      	str	r5, [r2, #4]
   822ce:	6019      	str	r1, [r3, #0]
   822d0:	f000 fc02 	bl	82ad8 <__malloc_unlock>
   822d4:	2001      	movs	r0, #1
   822d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   822d8:	2100      	movs	r1, #0
   822da:	4630      	mov	r0, r6
   822dc:	f000 fbfe 	bl	82adc <_sbrk_r>
   822e0:	68ba      	ldr	r2, [r7, #8]
   822e2:	1a83      	subs	r3, r0, r2
   822e4:	2b0f      	cmp	r3, #15
   822e6:	ddde      	ble.n	822a6 <_malloc_trim_r+0x3e>
   822e8:	4c06      	ldr	r4, [pc, #24]	; (82304 <_malloc_trim_r+0x9c>)
   822ea:	4905      	ldr	r1, [pc, #20]	; (82300 <_malloc_trim_r+0x98>)
   822ec:	6824      	ldr	r4, [r4, #0]
   822ee:	f043 0301 	orr.w	r3, r3, #1
   822f2:	1b00      	subs	r0, r0, r4
   822f4:	6053      	str	r3, [r2, #4]
   822f6:	6008      	str	r0, [r1, #0]
   822f8:	e7d5      	b.n	822a6 <_malloc_trim_r+0x3e>
   822fa:	bf00      	nop
   822fc:	20072670 	.word	0x20072670
   82300:	20072b20 	.word	0x20072b20
   82304:	20072a78 	.word	0x20072a78

00082308 <_free_r>:
   82308:	2900      	cmp	r1, #0
   8230a:	d044      	beq.n	82396 <_free_r+0x8e>
   8230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82310:	460d      	mov	r5, r1
   82312:	4680      	mov	r8, r0
   82314:	f000 fbde 	bl	82ad4 <__malloc_lock>
   82318:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8231c:	4969      	ldr	r1, [pc, #420]	; (824c4 <_free_r+0x1bc>)
   8231e:	f1a5 0408 	sub.w	r4, r5, #8
   82322:	f027 0301 	bic.w	r3, r7, #1
   82326:	18e2      	adds	r2, r4, r3
   82328:	688e      	ldr	r6, [r1, #8]
   8232a:	6850      	ldr	r0, [r2, #4]
   8232c:	42b2      	cmp	r2, r6
   8232e:	f020 0003 	bic.w	r0, r0, #3
   82332:	d05e      	beq.n	823f2 <_free_r+0xea>
   82334:	07fe      	lsls	r6, r7, #31
   82336:	6050      	str	r0, [r2, #4]
   82338:	d40b      	bmi.n	82352 <_free_r+0x4a>
   8233a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8233e:	f101 0e08 	add.w	lr, r1, #8
   82342:	1be4      	subs	r4, r4, r7
   82344:	68a5      	ldr	r5, [r4, #8]
   82346:	443b      	add	r3, r7
   82348:	4575      	cmp	r5, lr
   8234a:	d06d      	beq.n	82428 <_free_r+0x120>
   8234c:	68e7      	ldr	r7, [r4, #12]
   8234e:	60ef      	str	r7, [r5, #12]
   82350:	60bd      	str	r5, [r7, #8]
   82352:	1815      	adds	r5, r2, r0
   82354:	686d      	ldr	r5, [r5, #4]
   82356:	07ed      	lsls	r5, r5, #31
   82358:	d53e      	bpl.n	823d8 <_free_r+0xd0>
   8235a:	f043 0201 	orr.w	r2, r3, #1
   8235e:	6062      	str	r2, [r4, #4]
   82360:	50e3      	str	r3, [r4, r3]
   82362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82366:	d217      	bcs.n	82398 <_free_r+0x90>
   82368:	2201      	movs	r2, #1
   8236a:	08db      	lsrs	r3, r3, #3
   8236c:	1098      	asrs	r0, r3, #2
   8236e:	684d      	ldr	r5, [r1, #4]
   82370:	4413      	add	r3, r2
   82372:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82376:	4082      	lsls	r2, r0
   82378:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8237c:	432a      	orrs	r2, r5
   8237e:	3808      	subs	r0, #8
   82380:	60e0      	str	r0, [r4, #12]
   82382:	60a7      	str	r7, [r4, #8]
   82384:	604a      	str	r2, [r1, #4]
   82386:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8238a:	60fc      	str	r4, [r7, #12]
   8238c:	4640      	mov	r0, r8
   8238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82392:	f000 bba1 	b.w	82ad8 <__malloc_unlock>
   82396:	4770      	bx	lr
   82398:	0a5a      	lsrs	r2, r3, #9
   8239a:	2a04      	cmp	r2, #4
   8239c:	d852      	bhi.n	82444 <_free_r+0x13c>
   8239e:	099a      	lsrs	r2, r3, #6
   823a0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   823a4:	00ff      	lsls	r7, r7, #3
   823a6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   823aa:	19c8      	adds	r0, r1, r7
   823ac:	59ca      	ldr	r2, [r1, r7]
   823ae:	3808      	subs	r0, #8
   823b0:	4290      	cmp	r0, r2
   823b2:	d04f      	beq.n	82454 <_free_r+0x14c>
   823b4:	6851      	ldr	r1, [r2, #4]
   823b6:	f021 0103 	bic.w	r1, r1, #3
   823ba:	428b      	cmp	r3, r1
   823bc:	d232      	bcs.n	82424 <_free_r+0x11c>
   823be:	6892      	ldr	r2, [r2, #8]
   823c0:	4290      	cmp	r0, r2
   823c2:	d1f7      	bne.n	823b4 <_free_r+0xac>
   823c4:	68c3      	ldr	r3, [r0, #12]
   823c6:	60a0      	str	r0, [r4, #8]
   823c8:	60e3      	str	r3, [r4, #12]
   823ca:	609c      	str	r4, [r3, #8]
   823cc:	60c4      	str	r4, [r0, #12]
   823ce:	4640      	mov	r0, r8
   823d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823d4:	f000 bb80 	b.w	82ad8 <__malloc_unlock>
   823d8:	6895      	ldr	r5, [r2, #8]
   823da:	4f3b      	ldr	r7, [pc, #236]	; (824c8 <_free_r+0x1c0>)
   823dc:	4403      	add	r3, r0
   823de:	42bd      	cmp	r5, r7
   823e0:	d040      	beq.n	82464 <_free_r+0x15c>
   823e2:	68d0      	ldr	r0, [r2, #12]
   823e4:	f043 0201 	orr.w	r2, r3, #1
   823e8:	60e8      	str	r0, [r5, #12]
   823ea:	6085      	str	r5, [r0, #8]
   823ec:	6062      	str	r2, [r4, #4]
   823ee:	50e3      	str	r3, [r4, r3]
   823f0:	e7b7      	b.n	82362 <_free_r+0x5a>
   823f2:	07ff      	lsls	r7, r7, #31
   823f4:	4403      	add	r3, r0
   823f6:	d407      	bmi.n	82408 <_free_r+0x100>
   823f8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   823fc:	1b64      	subs	r4, r4, r5
   823fe:	68e2      	ldr	r2, [r4, #12]
   82400:	68a0      	ldr	r0, [r4, #8]
   82402:	442b      	add	r3, r5
   82404:	60c2      	str	r2, [r0, #12]
   82406:	6090      	str	r0, [r2, #8]
   82408:	4a30      	ldr	r2, [pc, #192]	; (824cc <_free_r+0x1c4>)
   8240a:	f043 0001 	orr.w	r0, r3, #1
   8240e:	6812      	ldr	r2, [r2, #0]
   82410:	6060      	str	r0, [r4, #4]
   82412:	4293      	cmp	r3, r2
   82414:	608c      	str	r4, [r1, #8]
   82416:	d3b9      	bcc.n	8238c <_free_r+0x84>
   82418:	4b2d      	ldr	r3, [pc, #180]	; (824d0 <_free_r+0x1c8>)
   8241a:	4640      	mov	r0, r8
   8241c:	6819      	ldr	r1, [r3, #0]
   8241e:	f7ff ff23 	bl	82268 <_malloc_trim_r>
   82422:	e7b3      	b.n	8238c <_free_r+0x84>
   82424:	4610      	mov	r0, r2
   82426:	e7cd      	b.n	823c4 <_free_r+0xbc>
   82428:	1811      	adds	r1, r2, r0
   8242a:	6849      	ldr	r1, [r1, #4]
   8242c:	07c9      	lsls	r1, r1, #31
   8242e:	d444      	bmi.n	824ba <_free_r+0x1b2>
   82430:	6891      	ldr	r1, [r2, #8]
   82432:	4403      	add	r3, r0
   82434:	68d2      	ldr	r2, [r2, #12]
   82436:	f043 0001 	orr.w	r0, r3, #1
   8243a:	60ca      	str	r2, [r1, #12]
   8243c:	6091      	str	r1, [r2, #8]
   8243e:	6060      	str	r0, [r4, #4]
   82440:	50e3      	str	r3, [r4, r3]
   82442:	e7a3      	b.n	8238c <_free_r+0x84>
   82444:	2a14      	cmp	r2, #20
   82446:	d816      	bhi.n	82476 <_free_r+0x16e>
   82448:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8244c:	00ff      	lsls	r7, r7, #3
   8244e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82452:	e7aa      	b.n	823aa <_free_r+0xa2>
   82454:	2301      	movs	r3, #1
   82456:	10aa      	asrs	r2, r5, #2
   82458:	684d      	ldr	r5, [r1, #4]
   8245a:	4093      	lsls	r3, r2
   8245c:	432b      	orrs	r3, r5
   8245e:	604b      	str	r3, [r1, #4]
   82460:	4603      	mov	r3, r0
   82462:	e7b0      	b.n	823c6 <_free_r+0xbe>
   82464:	f043 0201 	orr.w	r2, r3, #1
   82468:	614c      	str	r4, [r1, #20]
   8246a:	610c      	str	r4, [r1, #16]
   8246c:	60e5      	str	r5, [r4, #12]
   8246e:	60a5      	str	r5, [r4, #8]
   82470:	6062      	str	r2, [r4, #4]
   82472:	50e3      	str	r3, [r4, r3]
   82474:	e78a      	b.n	8238c <_free_r+0x84>
   82476:	2a54      	cmp	r2, #84	; 0x54
   82478:	d806      	bhi.n	82488 <_free_r+0x180>
   8247a:	0b1a      	lsrs	r2, r3, #12
   8247c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82480:	00ff      	lsls	r7, r7, #3
   82482:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82486:	e790      	b.n	823aa <_free_r+0xa2>
   82488:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8248c:	d806      	bhi.n	8249c <_free_r+0x194>
   8248e:	0bda      	lsrs	r2, r3, #15
   82490:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82494:	00ff      	lsls	r7, r7, #3
   82496:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8249a:	e786      	b.n	823aa <_free_r+0xa2>
   8249c:	f240 5054 	movw	r0, #1364	; 0x554
   824a0:	4282      	cmp	r2, r0
   824a2:	d806      	bhi.n	824b2 <_free_r+0x1aa>
   824a4:	0c9a      	lsrs	r2, r3, #18
   824a6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   824aa:	00ff      	lsls	r7, r7, #3
   824ac:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   824b0:	e77b      	b.n	823aa <_free_r+0xa2>
   824b2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   824b6:	257e      	movs	r5, #126	; 0x7e
   824b8:	e777      	b.n	823aa <_free_r+0xa2>
   824ba:	f043 0101 	orr.w	r1, r3, #1
   824be:	6061      	str	r1, [r4, #4]
   824c0:	6013      	str	r3, [r2, #0]
   824c2:	e763      	b.n	8238c <_free_r+0x84>
   824c4:	20072670 	.word	0x20072670
   824c8:	20072678 	.word	0x20072678
   824cc:	20072a7c 	.word	0x20072a7c
   824d0:	20072b50 	.word	0x20072b50

000824d4 <_fwalk_reent>:
   824d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   824d8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   824dc:	d01e      	beq.n	8251c <_fwalk_reent+0x48>
   824de:	4688      	mov	r8, r1
   824e0:	4607      	mov	r7, r0
   824e2:	f04f 0900 	mov.w	r9, #0
   824e6:	6875      	ldr	r5, [r6, #4]
   824e8:	68b4      	ldr	r4, [r6, #8]
   824ea:	3d01      	subs	r5, #1
   824ec:	d410      	bmi.n	82510 <_fwalk_reent+0x3c>
   824ee:	89a3      	ldrh	r3, [r4, #12]
   824f0:	3d01      	subs	r5, #1
   824f2:	2b01      	cmp	r3, #1
   824f4:	d908      	bls.n	82508 <_fwalk_reent+0x34>
   824f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   824fa:	3301      	adds	r3, #1
   824fc:	d004      	beq.n	82508 <_fwalk_reent+0x34>
   824fe:	4621      	mov	r1, r4
   82500:	4638      	mov	r0, r7
   82502:	47c0      	blx	r8
   82504:	ea49 0900 	orr.w	r9, r9, r0
   82508:	1c6b      	adds	r3, r5, #1
   8250a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8250e:	d1ee      	bne.n	824ee <_fwalk_reent+0x1a>
   82510:	6836      	ldr	r6, [r6, #0]
   82512:	2e00      	cmp	r6, #0
   82514:	d1e7      	bne.n	824e6 <_fwalk_reent+0x12>
   82516:	4648      	mov	r0, r9
   82518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8251c:	46b1      	mov	r9, r6
   8251e:	4648      	mov	r0, r9
   82520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082524 <__swhatbuf_r>:
   82524:	b570      	push	{r4, r5, r6, lr}
   82526:	460c      	mov	r4, r1
   82528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8252c:	b090      	sub	sp, #64	; 0x40
   8252e:	2900      	cmp	r1, #0
   82530:	4615      	mov	r5, r2
   82532:	461e      	mov	r6, r3
   82534:	db14      	blt.n	82560 <__swhatbuf_r+0x3c>
   82536:	aa01      	add	r2, sp, #4
   82538:	f000 fbe4 	bl	82d04 <_fstat_r>
   8253c:	2800      	cmp	r0, #0
   8253e:	db0f      	blt.n	82560 <__swhatbuf_r+0x3c>
   82540:	9a02      	ldr	r2, [sp, #8]
   82542:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8254a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8254e:	fab2 f282 	clz	r2, r2
   82552:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82556:	0952      	lsrs	r2, r2, #5
   82558:	6032      	str	r2, [r6, #0]
   8255a:	602b      	str	r3, [r5, #0]
   8255c:	b010      	add	sp, #64	; 0x40
   8255e:	bd70      	pop	{r4, r5, r6, pc}
   82560:	2300      	movs	r3, #0
   82562:	89a2      	ldrh	r2, [r4, #12]
   82564:	6033      	str	r3, [r6, #0]
   82566:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8256a:	d004      	beq.n	82576 <__swhatbuf_r+0x52>
   8256c:	2240      	movs	r2, #64	; 0x40
   8256e:	4618      	mov	r0, r3
   82570:	602a      	str	r2, [r5, #0]
   82572:	b010      	add	sp, #64	; 0x40
   82574:	bd70      	pop	{r4, r5, r6, pc}
   82576:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8257a:	602b      	str	r3, [r5, #0]
   8257c:	b010      	add	sp, #64	; 0x40
   8257e:	bd70      	pop	{r4, r5, r6, pc}

00082580 <malloc>:
   82580:	4b02      	ldr	r3, [pc, #8]	; (8258c <malloc+0xc>)
   82582:	4601      	mov	r1, r0
   82584:	6818      	ldr	r0, [r3, #0]
   82586:	f000 b803 	b.w	82590 <_malloc_r>
   8258a:	bf00      	nop
   8258c:	20072240 	.word	0x20072240

00082590 <_malloc_r>:
   82590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82594:	f101 060b 	add.w	r6, r1, #11
   82598:	2e16      	cmp	r6, #22
   8259a:	b083      	sub	sp, #12
   8259c:	4605      	mov	r5, r0
   8259e:	f240 809e 	bls.w	826de <_malloc_r+0x14e>
   825a2:	f036 0607 	bics.w	r6, r6, #7
   825a6:	f100 80bd 	bmi.w	82724 <_malloc_r+0x194>
   825aa:	42b1      	cmp	r1, r6
   825ac:	f200 80ba 	bhi.w	82724 <_malloc_r+0x194>
   825b0:	f000 fa90 	bl	82ad4 <__malloc_lock>
   825b4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   825b8:	f0c0 8285 	bcc.w	82ac6 <_malloc_r+0x536>
   825bc:	0a73      	lsrs	r3, r6, #9
   825be:	f000 80b8 	beq.w	82732 <_malloc_r+0x1a2>
   825c2:	2b04      	cmp	r3, #4
   825c4:	f200 816c 	bhi.w	828a0 <_malloc_r+0x310>
   825c8:	09b3      	lsrs	r3, r6, #6
   825ca:	f103 0039 	add.w	r0, r3, #57	; 0x39
   825ce:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   825d2:	00c1      	lsls	r1, r0, #3
   825d4:	4fb8      	ldr	r7, [pc, #736]	; (828b8 <_malloc_r+0x328>)
   825d6:	4439      	add	r1, r7
   825d8:	684c      	ldr	r4, [r1, #4]
   825da:	3908      	subs	r1, #8
   825dc:	42a1      	cmp	r1, r4
   825de:	d106      	bne.n	825ee <_malloc_r+0x5e>
   825e0:	e00c      	b.n	825fc <_malloc_r+0x6c>
   825e2:	2a00      	cmp	r2, #0
   825e4:	f280 80ab 	bge.w	8273e <_malloc_r+0x1ae>
   825e8:	68e4      	ldr	r4, [r4, #12]
   825ea:	42a1      	cmp	r1, r4
   825ec:	d006      	beq.n	825fc <_malloc_r+0x6c>
   825ee:	6863      	ldr	r3, [r4, #4]
   825f0:	f023 0303 	bic.w	r3, r3, #3
   825f4:	1b9a      	subs	r2, r3, r6
   825f6:	2a0f      	cmp	r2, #15
   825f8:	ddf3      	ble.n	825e2 <_malloc_r+0x52>
   825fa:	4670      	mov	r0, lr
   825fc:	693c      	ldr	r4, [r7, #16]
   825fe:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 828cc <_malloc_r+0x33c>
   82602:	4574      	cmp	r4, lr
   82604:	f000 819e 	beq.w	82944 <_malloc_r+0x3b4>
   82608:	6863      	ldr	r3, [r4, #4]
   8260a:	f023 0303 	bic.w	r3, r3, #3
   8260e:	1b9a      	subs	r2, r3, r6
   82610:	2a0f      	cmp	r2, #15
   82612:	f300 8183 	bgt.w	8291c <_malloc_r+0x38c>
   82616:	2a00      	cmp	r2, #0
   82618:	f8c7 e014 	str.w	lr, [r7, #20]
   8261c:	f8c7 e010 	str.w	lr, [r7, #16]
   82620:	f280 8091 	bge.w	82746 <_malloc_r+0x1b6>
   82624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82628:	f080 8154 	bcs.w	828d4 <_malloc_r+0x344>
   8262c:	2201      	movs	r2, #1
   8262e:	08db      	lsrs	r3, r3, #3
   82630:	6879      	ldr	r1, [r7, #4]
   82632:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82636:	4413      	add	r3, r2
   82638:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8263c:	fa02 f20c 	lsl.w	r2, r2, ip
   82640:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82644:	430a      	orrs	r2, r1
   82646:	f1ac 0108 	sub.w	r1, ip, #8
   8264a:	60e1      	str	r1, [r4, #12]
   8264c:	f8c4 8008 	str.w	r8, [r4, #8]
   82650:	607a      	str	r2, [r7, #4]
   82652:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82656:	f8c8 400c 	str.w	r4, [r8, #12]
   8265a:	2401      	movs	r4, #1
   8265c:	1083      	asrs	r3, r0, #2
   8265e:	409c      	lsls	r4, r3
   82660:	4294      	cmp	r4, r2
   82662:	d87d      	bhi.n	82760 <_malloc_r+0x1d0>
   82664:	4214      	tst	r4, r2
   82666:	d106      	bne.n	82676 <_malloc_r+0xe6>
   82668:	f020 0003 	bic.w	r0, r0, #3
   8266c:	0064      	lsls	r4, r4, #1
   8266e:	4214      	tst	r4, r2
   82670:	f100 0004 	add.w	r0, r0, #4
   82674:	d0fa      	beq.n	8266c <_malloc_r+0xdc>
   82676:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8267a:	46cc      	mov	ip, r9
   8267c:	4680      	mov	r8, r0
   8267e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82682:	459c      	cmp	ip, r3
   82684:	d107      	bne.n	82696 <_malloc_r+0x106>
   82686:	e15f      	b.n	82948 <_malloc_r+0x3b8>
   82688:	2a00      	cmp	r2, #0
   8268a:	f280 816d 	bge.w	82968 <_malloc_r+0x3d8>
   8268e:	68db      	ldr	r3, [r3, #12]
   82690:	459c      	cmp	ip, r3
   82692:	f000 8159 	beq.w	82948 <_malloc_r+0x3b8>
   82696:	6859      	ldr	r1, [r3, #4]
   82698:	f021 0103 	bic.w	r1, r1, #3
   8269c:	1b8a      	subs	r2, r1, r6
   8269e:	2a0f      	cmp	r2, #15
   826a0:	ddf2      	ble.n	82688 <_malloc_r+0xf8>
   826a2:	68dc      	ldr	r4, [r3, #12]
   826a4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   826a8:	f046 0801 	orr.w	r8, r6, #1
   826ac:	4628      	mov	r0, r5
   826ae:	441e      	add	r6, r3
   826b0:	f042 0501 	orr.w	r5, r2, #1
   826b4:	f8c3 8004 	str.w	r8, [r3, #4]
   826b8:	f8cc 400c 	str.w	r4, [ip, #12]
   826bc:	f8c4 c008 	str.w	ip, [r4, #8]
   826c0:	617e      	str	r6, [r7, #20]
   826c2:	613e      	str	r6, [r7, #16]
   826c4:	f8c6 e00c 	str.w	lr, [r6, #12]
   826c8:	f8c6 e008 	str.w	lr, [r6, #8]
   826cc:	6075      	str	r5, [r6, #4]
   826ce:	505a      	str	r2, [r3, r1]
   826d0:	9300      	str	r3, [sp, #0]
   826d2:	f000 fa01 	bl	82ad8 <__malloc_unlock>
   826d6:	9b00      	ldr	r3, [sp, #0]
   826d8:	f103 0408 	add.w	r4, r3, #8
   826dc:	e01e      	b.n	8271c <_malloc_r+0x18c>
   826de:	2910      	cmp	r1, #16
   826e0:	d820      	bhi.n	82724 <_malloc_r+0x194>
   826e2:	f000 f9f7 	bl	82ad4 <__malloc_lock>
   826e6:	2610      	movs	r6, #16
   826e8:	2318      	movs	r3, #24
   826ea:	2002      	movs	r0, #2
   826ec:	4f72      	ldr	r7, [pc, #456]	; (828b8 <_malloc_r+0x328>)
   826ee:	443b      	add	r3, r7
   826f0:	685c      	ldr	r4, [r3, #4]
   826f2:	f1a3 0208 	sub.w	r2, r3, #8
   826f6:	4294      	cmp	r4, r2
   826f8:	f000 812f 	beq.w	8295a <_malloc_r+0x3ca>
   826fc:	6863      	ldr	r3, [r4, #4]
   826fe:	68e1      	ldr	r1, [r4, #12]
   82700:	f023 0303 	bic.w	r3, r3, #3
   82704:	4423      	add	r3, r4
   82706:	685a      	ldr	r2, [r3, #4]
   82708:	68a6      	ldr	r6, [r4, #8]
   8270a:	f042 0201 	orr.w	r2, r2, #1
   8270e:	60f1      	str	r1, [r6, #12]
   82710:	4628      	mov	r0, r5
   82712:	608e      	str	r6, [r1, #8]
   82714:	605a      	str	r2, [r3, #4]
   82716:	f000 f9df 	bl	82ad8 <__malloc_unlock>
   8271a:	3408      	adds	r4, #8
   8271c:	4620      	mov	r0, r4
   8271e:	b003      	add	sp, #12
   82720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82724:	2400      	movs	r4, #0
   82726:	230c      	movs	r3, #12
   82728:	4620      	mov	r0, r4
   8272a:	602b      	str	r3, [r5, #0]
   8272c:	b003      	add	sp, #12
   8272e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82732:	2040      	movs	r0, #64	; 0x40
   82734:	f44f 7100 	mov.w	r1, #512	; 0x200
   82738:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8273c:	e74a      	b.n	825d4 <_malloc_r+0x44>
   8273e:	4423      	add	r3, r4
   82740:	685a      	ldr	r2, [r3, #4]
   82742:	68e1      	ldr	r1, [r4, #12]
   82744:	e7e0      	b.n	82708 <_malloc_r+0x178>
   82746:	4423      	add	r3, r4
   82748:	685a      	ldr	r2, [r3, #4]
   8274a:	4628      	mov	r0, r5
   8274c:	f042 0201 	orr.w	r2, r2, #1
   82750:	605a      	str	r2, [r3, #4]
   82752:	3408      	adds	r4, #8
   82754:	f000 f9c0 	bl	82ad8 <__malloc_unlock>
   82758:	4620      	mov	r0, r4
   8275a:	b003      	add	sp, #12
   8275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82760:	68bc      	ldr	r4, [r7, #8]
   82762:	6863      	ldr	r3, [r4, #4]
   82764:	f023 0803 	bic.w	r8, r3, #3
   82768:	45b0      	cmp	r8, r6
   8276a:	d304      	bcc.n	82776 <_malloc_r+0x1e6>
   8276c:	eba8 0306 	sub.w	r3, r8, r6
   82770:	2b0f      	cmp	r3, #15
   82772:	f300 8085 	bgt.w	82880 <_malloc_r+0x2f0>
   82776:	f8df 9158 	ldr.w	r9, [pc, #344]	; 828d0 <_malloc_r+0x340>
   8277a:	4b50      	ldr	r3, [pc, #320]	; (828bc <_malloc_r+0x32c>)
   8277c:	f8d9 2000 	ldr.w	r2, [r9]
   82780:	681b      	ldr	r3, [r3, #0]
   82782:	3201      	adds	r2, #1
   82784:	4433      	add	r3, r6
   82786:	eb04 0a08 	add.w	sl, r4, r8
   8278a:	f000 8154 	beq.w	82a36 <_malloc_r+0x4a6>
   8278e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82792:	330f      	adds	r3, #15
   82794:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82798:	f02b 0b0f 	bic.w	fp, fp, #15
   8279c:	4659      	mov	r1, fp
   8279e:	4628      	mov	r0, r5
   827a0:	f000 f99c 	bl	82adc <_sbrk_r>
   827a4:	1c41      	adds	r1, r0, #1
   827a6:	4602      	mov	r2, r0
   827a8:	f000 80fb 	beq.w	829a2 <_malloc_r+0x412>
   827ac:	4582      	cmp	sl, r0
   827ae:	f200 80f6 	bhi.w	8299e <_malloc_r+0x40e>
   827b2:	4b43      	ldr	r3, [pc, #268]	; (828c0 <_malloc_r+0x330>)
   827b4:	6819      	ldr	r1, [r3, #0]
   827b6:	4459      	add	r1, fp
   827b8:	6019      	str	r1, [r3, #0]
   827ba:	f000 814c 	beq.w	82a56 <_malloc_r+0x4c6>
   827be:	f8d9 0000 	ldr.w	r0, [r9]
   827c2:	3001      	adds	r0, #1
   827c4:	bf1b      	ittet	ne
   827c6:	eba2 0a0a 	subne.w	sl, r2, sl
   827ca:	4451      	addne	r1, sl
   827cc:	f8c9 2000 	streq.w	r2, [r9]
   827d0:	6019      	strne	r1, [r3, #0]
   827d2:	f012 0107 	ands.w	r1, r2, #7
   827d6:	f000 8114 	beq.w	82a02 <_malloc_r+0x472>
   827da:	f1c1 0008 	rsb	r0, r1, #8
   827de:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   827e2:	4402      	add	r2, r0
   827e4:	3108      	adds	r1, #8
   827e6:	eb02 090b 	add.w	r9, r2, fp
   827ea:	f3c9 090b 	ubfx	r9, r9, #0, #12
   827ee:	eba1 0909 	sub.w	r9, r1, r9
   827f2:	4649      	mov	r1, r9
   827f4:	4628      	mov	r0, r5
   827f6:	9301      	str	r3, [sp, #4]
   827f8:	9200      	str	r2, [sp, #0]
   827fa:	f000 f96f 	bl	82adc <_sbrk_r>
   827fe:	1c43      	adds	r3, r0, #1
   82800:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82804:	f000 8142 	beq.w	82a8c <_malloc_r+0x4fc>
   82808:	1a80      	subs	r0, r0, r2
   8280a:	4448      	add	r0, r9
   8280c:	f040 0001 	orr.w	r0, r0, #1
   82810:	6819      	ldr	r1, [r3, #0]
   82812:	42bc      	cmp	r4, r7
   82814:	4449      	add	r1, r9
   82816:	60ba      	str	r2, [r7, #8]
   82818:	6019      	str	r1, [r3, #0]
   8281a:	6050      	str	r0, [r2, #4]
   8281c:	d017      	beq.n	8284e <_malloc_r+0x2be>
   8281e:	f1b8 0f0f 	cmp.w	r8, #15
   82822:	f240 80fa 	bls.w	82a1a <_malloc_r+0x48a>
   82826:	f04f 0c05 	mov.w	ip, #5
   8282a:	6862      	ldr	r2, [r4, #4]
   8282c:	f1a8 000c 	sub.w	r0, r8, #12
   82830:	f020 0007 	bic.w	r0, r0, #7
   82834:	f002 0201 	and.w	r2, r2, #1
   82838:	eb04 0e00 	add.w	lr, r4, r0
   8283c:	4302      	orrs	r2, r0
   8283e:	280f      	cmp	r0, #15
   82840:	6062      	str	r2, [r4, #4]
   82842:	f8ce c004 	str.w	ip, [lr, #4]
   82846:	f8ce c008 	str.w	ip, [lr, #8]
   8284a:	f200 8116 	bhi.w	82a7a <_malloc_r+0x4ea>
   8284e:	4b1d      	ldr	r3, [pc, #116]	; (828c4 <_malloc_r+0x334>)
   82850:	68bc      	ldr	r4, [r7, #8]
   82852:	681a      	ldr	r2, [r3, #0]
   82854:	4291      	cmp	r1, r2
   82856:	bf88      	it	hi
   82858:	6019      	strhi	r1, [r3, #0]
   8285a:	4b1b      	ldr	r3, [pc, #108]	; (828c8 <_malloc_r+0x338>)
   8285c:	681a      	ldr	r2, [r3, #0]
   8285e:	4291      	cmp	r1, r2
   82860:	6862      	ldr	r2, [r4, #4]
   82862:	bf88      	it	hi
   82864:	6019      	strhi	r1, [r3, #0]
   82866:	f022 0203 	bic.w	r2, r2, #3
   8286a:	4296      	cmp	r6, r2
   8286c:	eba2 0306 	sub.w	r3, r2, r6
   82870:	d801      	bhi.n	82876 <_malloc_r+0x2e6>
   82872:	2b0f      	cmp	r3, #15
   82874:	dc04      	bgt.n	82880 <_malloc_r+0x2f0>
   82876:	4628      	mov	r0, r5
   82878:	f000 f92e 	bl	82ad8 <__malloc_unlock>
   8287c:	2400      	movs	r4, #0
   8287e:	e74d      	b.n	8271c <_malloc_r+0x18c>
   82880:	f046 0201 	orr.w	r2, r6, #1
   82884:	f043 0301 	orr.w	r3, r3, #1
   82888:	4426      	add	r6, r4
   8288a:	6062      	str	r2, [r4, #4]
   8288c:	4628      	mov	r0, r5
   8288e:	60be      	str	r6, [r7, #8]
   82890:	3408      	adds	r4, #8
   82892:	6073      	str	r3, [r6, #4]
   82894:	f000 f920 	bl	82ad8 <__malloc_unlock>
   82898:	4620      	mov	r0, r4
   8289a:	b003      	add	sp, #12
   8289c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828a0:	2b14      	cmp	r3, #20
   828a2:	d970      	bls.n	82986 <_malloc_r+0x3f6>
   828a4:	2b54      	cmp	r3, #84	; 0x54
   828a6:	f200 80a2 	bhi.w	829ee <_malloc_r+0x45e>
   828aa:	0b33      	lsrs	r3, r6, #12
   828ac:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   828b0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   828b4:	00c1      	lsls	r1, r0, #3
   828b6:	e68d      	b.n	825d4 <_malloc_r+0x44>
   828b8:	20072670 	.word	0x20072670
   828bc:	20072b50 	.word	0x20072b50
   828c0:	20072b20 	.word	0x20072b20
   828c4:	20072b48 	.word	0x20072b48
   828c8:	20072b4c 	.word	0x20072b4c
   828cc:	20072678 	.word	0x20072678
   828d0:	20072a78 	.word	0x20072a78
   828d4:	0a5a      	lsrs	r2, r3, #9
   828d6:	2a04      	cmp	r2, #4
   828d8:	d95b      	bls.n	82992 <_malloc_r+0x402>
   828da:	2a14      	cmp	r2, #20
   828dc:	f200 80ae 	bhi.w	82a3c <_malloc_r+0x4ac>
   828e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   828e4:	00c9      	lsls	r1, r1, #3
   828e6:	325b      	adds	r2, #91	; 0x5b
   828e8:	eb07 0c01 	add.w	ip, r7, r1
   828ec:	5879      	ldr	r1, [r7, r1]
   828ee:	f1ac 0c08 	sub.w	ip, ip, #8
   828f2:	458c      	cmp	ip, r1
   828f4:	f000 8088 	beq.w	82a08 <_malloc_r+0x478>
   828f8:	684a      	ldr	r2, [r1, #4]
   828fa:	f022 0203 	bic.w	r2, r2, #3
   828fe:	4293      	cmp	r3, r2
   82900:	d273      	bcs.n	829ea <_malloc_r+0x45a>
   82902:	6889      	ldr	r1, [r1, #8]
   82904:	458c      	cmp	ip, r1
   82906:	d1f7      	bne.n	828f8 <_malloc_r+0x368>
   82908:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8290c:	687a      	ldr	r2, [r7, #4]
   8290e:	60e3      	str	r3, [r4, #12]
   82910:	f8c4 c008 	str.w	ip, [r4, #8]
   82914:	609c      	str	r4, [r3, #8]
   82916:	f8cc 400c 	str.w	r4, [ip, #12]
   8291a:	e69e      	b.n	8265a <_malloc_r+0xca>
   8291c:	f046 0c01 	orr.w	ip, r6, #1
   82920:	f042 0101 	orr.w	r1, r2, #1
   82924:	4426      	add	r6, r4
   82926:	f8c4 c004 	str.w	ip, [r4, #4]
   8292a:	4628      	mov	r0, r5
   8292c:	617e      	str	r6, [r7, #20]
   8292e:	613e      	str	r6, [r7, #16]
   82930:	f8c6 e00c 	str.w	lr, [r6, #12]
   82934:	f8c6 e008 	str.w	lr, [r6, #8]
   82938:	6071      	str	r1, [r6, #4]
   8293a:	50e2      	str	r2, [r4, r3]
   8293c:	f000 f8cc 	bl	82ad8 <__malloc_unlock>
   82940:	3408      	adds	r4, #8
   82942:	e6eb      	b.n	8271c <_malloc_r+0x18c>
   82944:	687a      	ldr	r2, [r7, #4]
   82946:	e688      	b.n	8265a <_malloc_r+0xca>
   82948:	f108 0801 	add.w	r8, r8, #1
   8294c:	f018 0f03 	tst.w	r8, #3
   82950:	f10c 0c08 	add.w	ip, ip, #8
   82954:	f47f ae93 	bne.w	8267e <_malloc_r+0xee>
   82958:	e02d      	b.n	829b6 <_malloc_r+0x426>
   8295a:	68dc      	ldr	r4, [r3, #12]
   8295c:	42a3      	cmp	r3, r4
   8295e:	bf08      	it	eq
   82960:	3002      	addeq	r0, #2
   82962:	f43f ae4b 	beq.w	825fc <_malloc_r+0x6c>
   82966:	e6c9      	b.n	826fc <_malloc_r+0x16c>
   82968:	461c      	mov	r4, r3
   8296a:	4419      	add	r1, r3
   8296c:	684a      	ldr	r2, [r1, #4]
   8296e:	68db      	ldr	r3, [r3, #12]
   82970:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82974:	f042 0201 	orr.w	r2, r2, #1
   82978:	604a      	str	r2, [r1, #4]
   8297a:	4628      	mov	r0, r5
   8297c:	60f3      	str	r3, [r6, #12]
   8297e:	609e      	str	r6, [r3, #8]
   82980:	f000 f8aa 	bl	82ad8 <__malloc_unlock>
   82984:	e6ca      	b.n	8271c <_malloc_r+0x18c>
   82986:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8298a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8298e:	00c1      	lsls	r1, r0, #3
   82990:	e620      	b.n	825d4 <_malloc_r+0x44>
   82992:	099a      	lsrs	r2, r3, #6
   82994:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82998:	00c9      	lsls	r1, r1, #3
   8299a:	3238      	adds	r2, #56	; 0x38
   8299c:	e7a4      	b.n	828e8 <_malloc_r+0x358>
   8299e:	42bc      	cmp	r4, r7
   829a0:	d054      	beq.n	82a4c <_malloc_r+0x4bc>
   829a2:	68bc      	ldr	r4, [r7, #8]
   829a4:	6862      	ldr	r2, [r4, #4]
   829a6:	f022 0203 	bic.w	r2, r2, #3
   829aa:	e75e      	b.n	8286a <_malloc_r+0x2da>
   829ac:	f859 3908 	ldr.w	r3, [r9], #-8
   829b0:	4599      	cmp	r9, r3
   829b2:	f040 8086 	bne.w	82ac2 <_malloc_r+0x532>
   829b6:	f010 0f03 	tst.w	r0, #3
   829ba:	f100 30ff 	add.w	r0, r0, #4294967295
   829be:	d1f5      	bne.n	829ac <_malloc_r+0x41c>
   829c0:	687b      	ldr	r3, [r7, #4]
   829c2:	ea23 0304 	bic.w	r3, r3, r4
   829c6:	607b      	str	r3, [r7, #4]
   829c8:	0064      	lsls	r4, r4, #1
   829ca:	429c      	cmp	r4, r3
   829cc:	f63f aec8 	bhi.w	82760 <_malloc_r+0x1d0>
   829d0:	2c00      	cmp	r4, #0
   829d2:	f43f aec5 	beq.w	82760 <_malloc_r+0x1d0>
   829d6:	421c      	tst	r4, r3
   829d8:	4640      	mov	r0, r8
   829da:	f47f ae4c 	bne.w	82676 <_malloc_r+0xe6>
   829de:	0064      	lsls	r4, r4, #1
   829e0:	421c      	tst	r4, r3
   829e2:	f100 0004 	add.w	r0, r0, #4
   829e6:	d0fa      	beq.n	829de <_malloc_r+0x44e>
   829e8:	e645      	b.n	82676 <_malloc_r+0xe6>
   829ea:	468c      	mov	ip, r1
   829ec:	e78c      	b.n	82908 <_malloc_r+0x378>
   829ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   829f2:	d815      	bhi.n	82a20 <_malloc_r+0x490>
   829f4:	0bf3      	lsrs	r3, r6, #15
   829f6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   829fa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   829fe:	00c1      	lsls	r1, r0, #3
   82a00:	e5e8      	b.n	825d4 <_malloc_r+0x44>
   82a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82a06:	e6ee      	b.n	827e6 <_malloc_r+0x256>
   82a08:	2101      	movs	r1, #1
   82a0a:	687b      	ldr	r3, [r7, #4]
   82a0c:	1092      	asrs	r2, r2, #2
   82a0e:	fa01 f202 	lsl.w	r2, r1, r2
   82a12:	431a      	orrs	r2, r3
   82a14:	607a      	str	r2, [r7, #4]
   82a16:	4663      	mov	r3, ip
   82a18:	e779      	b.n	8290e <_malloc_r+0x37e>
   82a1a:	2301      	movs	r3, #1
   82a1c:	6053      	str	r3, [r2, #4]
   82a1e:	e72a      	b.n	82876 <_malloc_r+0x2e6>
   82a20:	f240 5254 	movw	r2, #1364	; 0x554
   82a24:	4293      	cmp	r3, r2
   82a26:	d822      	bhi.n	82a6e <_malloc_r+0x4de>
   82a28:	0cb3      	lsrs	r3, r6, #18
   82a2a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82a2e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82a32:	00c1      	lsls	r1, r0, #3
   82a34:	e5ce      	b.n	825d4 <_malloc_r+0x44>
   82a36:	f103 0b10 	add.w	fp, r3, #16
   82a3a:	e6af      	b.n	8279c <_malloc_r+0x20c>
   82a3c:	2a54      	cmp	r2, #84	; 0x54
   82a3e:	d829      	bhi.n	82a94 <_malloc_r+0x504>
   82a40:	0b1a      	lsrs	r2, r3, #12
   82a42:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82a46:	00c9      	lsls	r1, r1, #3
   82a48:	326e      	adds	r2, #110	; 0x6e
   82a4a:	e74d      	b.n	828e8 <_malloc_r+0x358>
   82a4c:	4b20      	ldr	r3, [pc, #128]	; (82ad0 <_malloc_r+0x540>)
   82a4e:	6819      	ldr	r1, [r3, #0]
   82a50:	4459      	add	r1, fp
   82a52:	6019      	str	r1, [r3, #0]
   82a54:	e6b3      	b.n	827be <_malloc_r+0x22e>
   82a56:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82a5a:	2800      	cmp	r0, #0
   82a5c:	f47f aeaf 	bne.w	827be <_malloc_r+0x22e>
   82a60:	eb08 030b 	add.w	r3, r8, fp
   82a64:	68ba      	ldr	r2, [r7, #8]
   82a66:	f043 0301 	orr.w	r3, r3, #1
   82a6a:	6053      	str	r3, [r2, #4]
   82a6c:	e6ef      	b.n	8284e <_malloc_r+0x2be>
   82a6e:	207f      	movs	r0, #127	; 0x7f
   82a70:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82a74:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   82a78:	e5ac      	b.n	825d4 <_malloc_r+0x44>
   82a7a:	f104 0108 	add.w	r1, r4, #8
   82a7e:	4628      	mov	r0, r5
   82a80:	9300      	str	r3, [sp, #0]
   82a82:	f7ff fc41 	bl	82308 <_free_r>
   82a86:	9b00      	ldr	r3, [sp, #0]
   82a88:	6819      	ldr	r1, [r3, #0]
   82a8a:	e6e0      	b.n	8284e <_malloc_r+0x2be>
   82a8c:	2001      	movs	r0, #1
   82a8e:	f04f 0900 	mov.w	r9, #0
   82a92:	e6bd      	b.n	82810 <_malloc_r+0x280>
   82a94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82a98:	d805      	bhi.n	82aa6 <_malloc_r+0x516>
   82a9a:	0bda      	lsrs	r2, r3, #15
   82a9c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   82aa0:	00c9      	lsls	r1, r1, #3
   82aa2:	3277      	adds	r2, #119	; 0x77
   82aa4:	e720      	b.n	828e8 <_malloc_r+0x358>
   82aa6:	f240 5154 	movw	r1, #1364	; 0x554
   82aaa:	428a      	cmp	r2, r1
   82aac:	d805      	bhi.n	82aba <_malloc_r+0x52a>
   82aae:	0c9a      	lsrs	r2, r3, #18
   82ab0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82ab4:	00c9      	lsls	r1, r1, #3
   82ab6:	327c      	adds	r2, #124	; 0x7c
   82ab8:	e716      	b.n	828e8 <_malloc_r+0x358>
   82aba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82abe:	227e      	movs	r2, #126	; 0x7e
   82ac0:	e712      	b.n	828e8 <_malloc_r+0x358>
   82ac2:	687b      	ldr	r3, [r7, #4]
   82ac4:	e780      	b.n	829c8 <_malloc_r+0x438>
   82ac6:	08f0      	lsrs	r0, r6, #3
   82ac8:	f106 0308 	add.w	r3, r6, #8
   82acc:	e60e      	b.n	826ec <_malloc_r+0x15c>
   82ace:	bf00      	nop
   82ad0:	20072b20 	.word	0x20072b20

00082ad4 <__malloc_lock>:
   82ad4:	4770      	bx	lr
   82ad6:	bf00      	nop

00082ad8 <__malloc_unlock>:
   82ad8:	4770      	bx	lr
   82ada:	bf00      	nop

00082adc <_sbrk_r>:
   82adc:	b538      	push	{r3, r4, r5, lr}
   82ade:	2300      	movs	r3, #0
   82ae0:	4c06      	ldr	r4, [pc, #24]	; (82afc <_sbrk_r+0x20>)
   82ae2:	4605      	mov	r5, r0
   82ae4:	4608      	mov	r0, r1
   82ae6:	6023      	str	r3, [r4, #0]
   82ae8:	f7ff f880 	bl	81bec <_sbrk>
   82aec:	1c43      	adds	r3, r0, #1
   82aee:	d000      	beq.n	82af2 <_sbrk_r+0x16>
   82af0:	bd38      	pop	{r3, r4, r5, pc}
   82af2:	6823      	ldr	r3, [r4, #0]
   82af4:	2b00      	cmp	r3, #0
   82af6:	d0fb      	beq.n	82af0 <_sbrk_r+0x14>
   82af8:	602b      	str	r3, [r5, #0]
   82afa:	bd38      	pop	{r3, r4, r5, pc}
   82afc:	20074fc4 	.word	0x20074fc4

00082b00 <__sread>:
   82b00:	b510      	push	{r4, lr}
   82b02:	460c      	mov	r4, r1
   82b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b08:	f000 f926 	bl	82d58 <_read_r>
   82b0c:	2800      	cmp	r0, #0
   82b0e:	db03      	blt.n	82b18 <__sread+0x18>
   82b10:	6d23      	ldr	r3, [r4, #80]	; 0x50
   82b12:	4403      	add	r3, r0
   82b14:	6523      	str	r3, [r4, #80]	; 0x50
   82b16:	bd10      	pop	{r4, pc}
   82b18:	89a3      	ldrh	r3, [r4, #12]
   82b1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82b1e:	81a3      	strh	r3, [r4, #12]
   82b20:	bd10      	pop	{r4, pc}
   82b22:	bf00      	nop

00082b24 <__swrite>:
   82b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82b28:	460c      	mov	r4, r1
   82b2a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   82b2e:	461f      	mov	r7, r3
   82b30:	05cb      	lsls	r3, r1, #23
   82b32:	4616      	mov	r6, r2
   82b34:	4605      	mov	r5, r0
   82b36:	d507      	bpl.n	82b48 <__swrite+0x24>
   82b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b3c:	2302      	movs	r3, #2
   82b3e:	2200      	movs	r2, #0
   82b40:	f000 f8f4 	bl	82d2c <_lseek_r>
   82b44:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   82b48:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82b4c:	81a1      	strh	r1, [r4, #12]
   82b4e:	463b      	mov	r3, r7
   82b50:	4632      	mov	r2, r6
   82b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82b56:	4628      	mov	r0, r5
   82b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82b5c:	f000 b814 	b.w	82b88 <_write_r>

00082b60 <__sseek>:
   82b60:	b510      	push	{r4, lr}
   82b62:	460c      	mov	r4, r1
   82b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b68:	f000 f8e0 	bl	82d2c <_lseek_r>
   82b6c:	89a3      	ldrh	r3, [r4, #12]
   82b6e:	1c42      	adds	r2, r0, #1
   82b70:	bf0e      	itee	eq
   82b72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82b76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82b7a:	6520      	strne	r0, [r4, #80]	; 0x50
   82b7c:	81a3      	strh	r3, [r4, #12]
   82b7e:	bd10      	pop	{r4, pc}

00082b80 <__sclose>:
   82b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b84:	f000 b86c 	b.w	82c60 <_close_r>

00082b88 <_write_r>:
   82b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b8a:	460e      	mov	r6, r1
   82b8c:	2500      	movs	r5, #0
   82b8e:	4c08      	ldr	r4, [pc, #32]	; (82bb0 <_write_r+0x28>)
   82b90:	4611      	mov	r1, r2
   82b92:	4607      	mov	r7, r0
   82b94:	461a      	mov	r2, r3
   82b96:	4630      	mov	r0, r6
   82b98:	6025      	str	r5, [r4, #0]
   82b9a:	f7fd fe6f 	bl	8087c <_write>
   82b9e:	1c43      	adds	r3, r0, #1
   82ba0:	d000      	beq.n	82ba4 <_write_r+0x1c>
   82ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ba4:	6823      	ldr	r3, [r4, #0]
   82ba6:	2b00      	cmp	r3, #0
   82ba8:	d0fb      	beq.n	82ba2 <_write_r+0x1a>
   82baa:	603b      	str	r3, [r7, #0]
   82bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82bae:	bf00      	nop
   82bb0:	20074fc4 	.word	0x20074fc4

00082bb4 <__register_exitproc>:
   82bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82bb8:	4c27      	ldr	r4, [pc, #156]	; (82c58 <__register_exitproc+0xa4>)
   82bba:	4607      	mov	r7, r0
   82bbc:	6826      	ldr	r6, [r4, #0]
   82bbe:	4688      	mov	r8, r1
   82bc0:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82bc4:	4692      	mov	sl, r2
   82bc6:	4699      	mov	r9, r3
   82bc8:	2c00      	cmp	r4, #0
   82bca:	d03c      	beq.n	82c46 <__register_exitproc+0x92>
   82bcc:	6865      	ldr	r5, [r4, #4]
   82bce:	2d1f      	cmp	r5, #31
   82bd0:	dc1a      	bgt.n	82c08 <__register_exitproc+0x54>
   82bd2:	f105 0e01 	add.w	lr, r5, #1
   82bd6:	b17f      	cbz	r7, 82bf8 <__register_exitproc+0x44>
   82bd8:	2001      	movs	r0, #1
   82bda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   82bde:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   82be2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   82be6:	fa00 f205 	lsl.w	r2, r0, r5
   82bea:	4311      	orrs	r1, r2
   82bec:	2f02      	cmp	r7, #2
   82bee:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   82bf2:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   82bf6:	d020      	beq.n	82c3a <__register_exitproc+0x86>
   82bf8:	3502      	adds	r5, #2
   82bfa:	f8c4 e004 	str.w	lr, [r4, #4]
   82bfe:	2000      	movs	r0, #0
   82c00:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   82c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82c08:	4b14      	ldr	r3, [pc, #80]	; (82c5c <__register_exitproc+0xa8>)
   82c0a:	b30b      	cbz	r3, 82c50 <__register_exitproc+0x9c>
   82c0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82c10:	f7ff fcb6 	bl	82580 <malloc>
   82c14:	4604      	mov	r4, r0
   82c16:	b1d8      	cbz	r0, 82c50 <__register_exitproc+0x9c>
   82c18:	2000      	movs	r0, #0
   82c1a:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   82c1e:	f04f 0e01 	mov.w	lr, #1
   82c22:	6060      	str	r0, [r4, #4]
   82c24:	6023      	str	r3, [r4, #0]
   82c26:	4605      	mov	r5, r0
   82c28:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82c2c:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82c30:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82c34:	2f00      	cmp	r7, #0
   82c36:	d0df      	beq.n	82bf8 <__register_exitproc+0x44>
   82c38:	e7ce      	b.n	82bd8 <__register_exitproc+0x24>
   82c3a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82c3e:	431a      	orrs	r2, r3
   82c40:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   82c44:	e7d8      	b.n	82bf8 <__register_exitproc+0x44>
   82c46:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82c4a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82c4e:	e7bd      	b.n	82bcc <__register_exitproc+0x18>
   82c50:	f04f 30ff 	mov.w	r0, #4294967295
   82c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82c58:	00083194 	.word	0x00083194
   82c5c:	00082581 	.word	0x00082581

00082c60 <_close_r>:
   82c60:	b538      	push	{r3, r4, r5, lr}
   82c62:	2300      	movs	r3, #0
   82c64:	4c06      	ldr	r4, [pc, #24]	; (82c80 <_close_r+0x20>)
   82c66:	4605      	mov	r5, r0
   82c68:	4608      	mov	r0, r1
   82c6a:	6023      	str	r3, [r4, #0]
   82c6c:	f7fe ffda 	bl	81c24 <_close>
   82c70:	1c43      	adds	r3, r0, #1
   82c72:	d000      	beq.n	82c76 <_close_r+0x16>
   82c74:	bd38      	pop	{r3, r4, r5, pc}
   82c76:	6823      	ldr	r3, [r4, #0]
   82c78:	2b00      	cmp	r3, #0
   82c7a:	d0fb      	beq.n	82c74 <_close_r+0x14>
   82c7c:	602b      	str	r3, [r5, #0]
   82c7e:	bd38      	pop	{r3, r4, r5, pc}
   82c80:	20074fc4 	.word	0x20074fc4

00082c84 <_fclose_r>:
   82c84:	b570      	push	{r4, r5, r6, lr}
   82c86:	b139      	cbz	r1, 82c98 <_fclose_r+0x14>
   82c88:	4605      	mov	r5, r0
   82c8a:	460c      	mov	r4, r1
   82c8c:	b108      	cbz	r0, 82c92 <_fclose_r+0xe>
   82c8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c90:	b383      	cbz	r3, 82cf4 <_fclose_r+0x70>
   82c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c96:	b913      	cbnz	r3, 82c9e <_fclose_r+0x1a>
   82c98:	2600      	movs	r6, #0
   82c9a:	4630      	mov	r0, r6
   82c9c:	bd70      	pop	{r4, r5, r6, pc}
   82c9e:	4621      	mov	r1, r4
   82ca0:	4628      	mov	r0, r5
   82ca2:	f7ff f98d 	bl	81fc0 <__sflush_r>
   82ca6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82ca8:	4606      	mov	r6, r0
   82caa:	b133      	cbz	r3, 82cba <_fclose_r+0x36>
   82cac:	69e1      	ldr	r1, [r4, #28]
   82cae:	4628      	mov	r0, r5
   82cb0:	4798      	blx	r3
   82cb2:	2800      	cmp	r0, #0
   82cb4:	bfb8      	it	lt
   82cb6:	f04f 36ff 	movlt.w	r6, #4294967295
   82cba:	89a3      	ldrh	r3, [r4, #12]
   82cbc:	061b      	lsls	r3, r3, #24
   82cbe:	d41c      	bmi.n	82cfa <_fclose_r+0x76>
   82cc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82cc2:	b141      	cbz	r1, 82cd6 <_fclose_r+0x52>
   82cc4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82cc8:	4299      	cmp	r1, r3
   82cca:	d002      	beq.n	82cd2 <_fclose_r+0x4e>
   82ccc:	4628      	mov	r0, r5
   82cce:	f7ff fb1b 	bl	82308 <_free_r>
   82cd2:	2300      	movs	r3, #0
   82cd4:	6323      	str	r3, [r4, #48]	; 0x30
   82cd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82cd8:	b121      	cbz	r1, 82ce4 <_fclose_r+0x60>
   82cda:	4628      	mov	r0, r5
   82cdc:	f7ff fb14 	bl	82308 <_free_r>
   82ce0:	2300      	movs	r3, #0
   82ce2:	6463      	str	r3, [r4, #68]	; 0x44
   82ce4:	f7ff faa2 	bl	8222c <__sfp_lock_acquire>
   82ce8:	2300      	movs	r3, #0
   82cea:	81a3      	strh	r3, [r4, #12]
   82cec:	f7ff faa0 	bl	82230 <__sfp_lock_release>
   82cf0:	4630      	mov	r0, r6
   82cf2:	bd70      	pop	{r4, r5, r6, pc}
   82cf4:	f7ff fa94 	bl	82220 <__sinit>
   82cf8:	e7cb      	b.n	82c92 <_fclose_r+0xe>
   82cfa:	6921      	ldr	r1, [r4, #16]
   82cfc:	4628      	mov	r0, r5
   82cfe:	f7ff fb03 	bl	82308 <_free_r>
   82d02:	e7dd      	b.n	82cc0 <_fclose_r+0x3c>

00082d04 <_fstat_r>:
   82d04:	b570      	push	{r4, r5, r6, lr}
   82d06:	460d      	mov	r5, r1
   82d08:	2300      	movs	r3, #0
   82d0a:	4c07      	ldr	r4, [pc, #28]	; (82d28 <_fstat_r+0x24>)
   82d0c:	4606      	mov	r6, r0
   82d0e:	4611      	mov	r1, r2
   82d10:	4628      	mov	r0, r5
   82d12:	6023      	str	r3, [r4, #0]
   82d14:	f7fe ff89 	bl	81c2a <_fstat>
   82d18:	1c43      	adds	r3, r0, #1
   82d1a:	d000      	beq.n	82d1e <_fstat_r+0x1a>
   82d1c:	bd70      	pop	{r4, r5, r6, pc}
   82d1e:	6823      	ldr	r3, [r4, #0]
   82d20:	2b00      	cmp	r3, #0
   82d22:	d0fb      	beq.n	82d1c <_fstat_r+0x18>
   82d24:	6033      	str	r3, [r6, #0]
   82d26:	bd70      	pop	{r4, r5, r6, pc}
   82d28:	20074fc4 	.word	0x20074fc4

00082d2c <_lseek_r>:
   82d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d2e:	460e      	mov	r6, r1
   82d30:	2500      	movs	r5, #0
   82d32:	4c08      	ldr	r4, [pc, #32]	; (82d54 <_lseek_r+0x28>)
   82d34:	4611      	mov	r1, r2
   82d36:	4607      	mov	r7, r0
   82d38:	461a      	mov	r2, r3
   82d3a:	4630      	mov	r0, r6
   82d3c:	6025      	str	r5, [r4, #0]
   82d3e:	f7fe ff79 	bl	81c34 <_lseek>
   82d42:	1c43      	adds	r3, r0, #1
   82d44:	d000      	beq.n	82d48 <_lseek_r+0x1c>
   82d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d48:	6823      	ldr	r3, [r4, #0]
   82d4a:	2b00      	cmp	r3, #0
   82d4c:	d0fb      	beq.n	82d46 <_lseek_r+0x1a>
   82d4e:	603b      	str	r3, [r7, #0]
   82d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d52:	bf00      	nop
   82d54:	20074fc4 	.word	0x20074fc4

00082d58 <_read_r>:
   82d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d5a:	460e      	mov	r6, r1
   82d5c:	2500      	movs	r5, #0
   82d5e:	4c08      	ldr	r4, [pc, #32]	; (82d80 <_read_r+0x28>)
   82d60:	4611      	mov	r1, r2
   82d62:	4607      	mov	r7, r0
   82d64:	461a      	mov	r2, r3
   82d66:	4630      	mov	r0, r6
   82d68:	6025      	str	r5, [r4, #0]
   82d6a:	f7fd fd6d 	bl	80848 <_read>
   82d6e:	1c43      	adds	r3, r0, #1
   82d70:	d000      	beq.n	82d74 <_read_r+0x1c>
   82d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d74:	6823      	ldr	r3, [r4, #0]
   82d76:	2b00      	cmp	r3, #0
   82d78:	d0fb      	beq.n	82d72 <_read_r+0x1a>
   82d7a:	603b      	str	r3, [r7, #0]
   82d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d7e:	bf00      	nop
   82d80:	20074fc4 	.word	0x20074fc4

00082d84 <crc32_tab>:
   82d84:	00000000 77073096 ee0e612c 990951ba     .....0.w,a...Q..
   82d94:	076dc419 706af48f e963a535 9e6495a3     ..m...jp5.c...d.
   82da4:	0edb8832 79dcb8a4 e0d5e91e 97d2d988     2......y........
   82db4:	09b64c2b 7eb17cbd e7b82d07 90bf1d91     +L...|.~.-......
   82dc4:	1db71064 6ab020f2 f3b97148 84be41de     d.... .jHq...A..
   82dd4:	1adad47d 6ddde4eb f4d4b551 83d385c7     }......mQ.......
   82de4:	136c9856 646ba8c0 fd62f97a 8a65c9ec     V.l...kdz.b...e.
   82df4:	14015c4f 63066cd9 fa0f3d63 8d080df5     O\...l.cc=......
   82e04:	3b6e20c8 4c69105e d56041e4 a2677172     . n;^.iL.A`.rqg.
   82e14:	3c03e4d1 4b04d447 d20d85fd a50ab56b     ...<G..K....k...
   82e24:	35b5a8fa 42b2986c dbbbc9d6 acbcf940     ...5l..B....@...
   82e34:	32d86ce3 45df5c75 dcd60dcf abd13d59     .l.2u\.E....Y=..
   82e44:	26d930ac 51de003a c8d75180 bfd06116     .0.&:..Q.Q...a..
   82e54:	21b4f4b5 56b3c423 cfba9599 b8bda50f     ...!#..V........
   82e64:	2802b89e 5f058808 c60cd9b2 b10be924     ...(..._....$...
   82e74:	2f6f7c87 58684c11 c1611dab b6662d3d     .|o/.LhX..a.=-f.
   82e84:	76dc4190 01db7106 98d220bc efd5102a     .A.v.q... ..*...
   82e94:	71b18589 06b6b51f 9fbfe4a5 e8b8d433     ...q........3...
   82ea4:	7807c9a2 0f00f934 9609a88e e10e9818     ...x4...........
   82eb4:	7f6a0dbb 086d3d2d 91646c97 e6635c01     ..j.-=m..ld..\c.
   82ec4:	6b6b51f4 1c6c6162 856530d8 f262004e     .Qkkbal..0e.N.b.
   82ed4:	6c0695ed 1b01a57b 8208f4c1 f50fc457     ...l{.......W...
   82ee4:	65b0d9c6 12b7e950 8bbeb8ea fcb9887c     ...eP.......|...
   82ef4:	62dd1ddf 15da2d49 8cd37cf3 fbd44c65     ...bI-...|..eL..
   82f04:	4db26158 3ab551ce a3bc0074 d4bb30e2     Xa.M.Q.:t....0..
   82f14:	4adfa541 3dd895d7 a4d1c46d d3d6f4fb     A..J...=m.......
   82f24:	4369e96a 346ed9fc ad678846 da60b8d0     j.iC..n4F.g...`.
   82f34:	44042d73 33031de5 aa0a4c5f dd0d7cc9     s-.D...3_L...|..
   82f44:	5005713c 270241aa be0b1010 c90c2086     <q.P.A.'..... ..
   82f54:	5768b525 206f85b3 b966d409 ce61e49f     %.hW..o ..f...a.
   82f64:	5edef90e 29d9c998 b0d09822 c7d7a8b4     ...^...)".......
   82f74:	59b33d17 2eb40d81 b7bd5c3b c0ba6cad     .=.Y....;\...l..
   82f84:	edb88320 9abfb3b6 03b6e20c 74b1d29a      ..............t
   82f94:	ead54739 9dd277af 04db2615 73dc1683     9G...w...&.....s
   82fa4:	e3630b12 94643b84 0d6d6a3e 7a6a5aa8     ..c..;d.>jm..Zjz
   82fb4:	e40ecf0b 9309ff9d 0a00ae27 7d079eb1     ........'......}
   82fc4:	f00f9344 8708a3d2 1e01f268 6906c2fe     D.......h......i
   82fd4:	f762575d 806567cb 196c3671 6e6b06e7     ]Wb..ge.q6l...kn
   82fe4:	fed41b76 89d32be0 10da7a5a 67dd4acc     v....+..Zz...J.g
   82ff4:	f9b9df6f 8ebeeff9 17b7be43 60b08ed5     o.......C......`
   83004:	d6d6a3e8 a1d1937e 38d8c2c4 4fdff252     ....~......8R..O
   83014:	d1bb67f1 a6bc5767 3fb506dd 48b2364b     .g..gW.....?K6.H
   83024:	d80d2bda af0a1b4c 36034af6 41047a60     .+..L....J.6`z.A
   83034:	df60efc3 a867df55 316e8eef 4669be79     ..`.U.g...n1y.iF
   83044:	cb61b38c bc66831a 256fd2a0 5268e236     ..a...f...o%6.hR
   83054:	cc0c7795 bb0b4703 220216b9 5505262f     .w...G....."/&.U
   83064:	c5ba3bbe b2bd0b28 2bb45a92 5cb36a04     .;..(....Z.+.j.\
   83074:	c2d7ffa7 b5d0cf31 2cd99e8b 5bdeae1d     ....1......,...[
   83084:	9b64c2b0 ec63f226 756aa39c 026d930a     ..d.&.c...ju..m.
   83094:	9c0906a9 eb0e363f 72076785 05005713     ....?6...g.r.W..
   830a4:	95bf4a82 e2b87a14 7bb12bae 0cb61b38     .J...z...+.{8...
   830b4:	92d28e9b e5d5be0d 7cdcefb7 0bdbdf21     ...........|!...
   830c4:	86d3d2d4 f1d4e242 68ddb3f8 1fda836e     ....B......hn...
   830d4:	81be16cd f6b9265b 6fb077e1 18b74777     ....[&...w.owG..
   830e4:	88085ae6 ff0f6a70 66063bca 11010b5c     .Z..pj...;.f\...
   830f4:	8f659eff f862ae69 616bffd3 166ccf45     ..e.i.b...kaE.l.
   83104:	a00ae278 d70dd2ee 4e048354 3903b3c2     x.......T..N...9
   83114:	a7672661 d06016f7 4969474d 3e6e77db     a&g...`.MGiI.wn>
   83124:	aed16a4a d9d65adc 40df0b66 37d83bf0     Jj...Z..f..@.;.7
   83134:	a9bcae53 debb9ec5 47b2cf7f 30b5ffe9     S..........G...0
   83144:	bdbdf21c cabac28a 53b39330 24b4a3a6     ........0..S...$
   83154:	bad03605 cdd70693 54de5729 23d967bf     .6......)W.T.g.#
   83164:	b3667a2e c4614ab8 5d681b02 2a6f2b94     .zf..Ja...h].+o*
   83174:	b40bbe37 c30c8ea1 5a05df1b 2d02ef8d     7..........Z...-
   83184:	92e84555 5962b1d6 f2c88afc 354ae1d6     UE....bY......J5

00083194 <_global_impure_ptr>:
   83194:	20072248                                H". 

00083198 <_init>:
   83198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8319a:	bf00      	nop
   8319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8319e:	bc08      	pop	{r3}
   831a0:	469e      	mov	lr, r3
   831a2:	4770      	bx	lr

000831a4 <__init_array_start>:
   831a4:	00081fa1 	.word	0x00081fa1

000831a8 <__frame_dummy_init_array_entry>:
   831a8:	00080119                                ....

000831ac <_fini>:
   831ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   831ae:	bf00      	nop
   831b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   831b2:	bc08      	pop	{r3}
   831b4:	469e      	mov	lr, r3
   831b6:	4770      	bx	lr

000831b8 <__portable_delay_cycles_veneer>:
   831b8:	f85f f000 	ldr.w	pc, [pc]	; 831bc <__portable_delay_cycles_veneer+0x4>
   831bc:	20070095 	.word	0x20070095

000831c0 <__efc_perform_fcr_veneer>:
   831c0:	f85f f000 	ldr.w	pc, [pc]	; 831c4 <__efc_perform_fcr_veneer+0x4>
   831c4:	20070079 	.word	0x20070079

000831c8 <__efc_write_fmr_veneer>:
   831c8:	f85f f000 	ldr.w	pc, [pc]	; 831cc <__efc_write_fmr_veneer+0x4>
   831cc:	20070075 	.word	0x20070075

000831d0 <__system_init_flash_veneer>:
   831d0:	f85f f000 	ldr.w	pc, [pc]	; 831d4 <__system_init_flash_veneer+0x4>
   831d4:	20070145 	.word	0x20070145

000831d8 <__fini_array_start>:
   831d8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9d06      	ldr	r5, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4c1a      	ldr	r4, [pc, #104]	; (20070070 <efc_perform_read_sequence+0x70>)
20070008:	42a0      	cmp	r0, r4
2007000a:	d012      	beq.n	20070032 <efc_perform_read_sequence+0x32>
2007000c:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070010:	b35b      	cbz	r3, 2007006a <efc_perform_read_sequence+0x6a>
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070012:	6804      	ldr	r4, [r0, #0]
20070014:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
20070018:	6004      	str	r4, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007001a:	b2c9      	uxtb	r1, r1
2007001c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070020:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070022:	6881      	ldr	r1, [r0, #8]
20070024:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070026:	9901      	ldr	r1, [sp, #4]
20070028:	f011 0f01 	tst.w	r1, #1
2007002c:	d1f9      	bne.n	20070022 <efc_perform_read_sequence+0x22>
2007002e:	2100      	movs	r1, #0
20070030:	e007      	b.n	20070042 <efc_perform_read_sequence+0x42>
			(uint32_t *) ((p_efc == EFC0) ?
20070032:	f44f 2600 	mov.w	r6, #524288	; 0x80000
20070036:	e7eb      	b.n	20070010 <efc_perform_read_sequence+0x10>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070038:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
2007003c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070040:	3101      	adds	r1, #1
20070042:	42a9      	cmp	r1, r5
20070044:	d3f8      	bcc.n	20070038 <efc_perform_read_sequence+0x38>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070046:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070048:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007004c:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007004e:	6883      	ldr	r3, [r0, #8]
20070050:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070052:	9b01      	ldr	r3, [sp, #4]
20070054:	f013 0f01 	tst.w	r3, #1
20070058:	d0f9      	beq.n	2007004e <efc_perform_read_sequence+0x4e>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005a:	6803      	ldr	r3, [r0, #0]
2007005c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070060:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070062:	2000      	movs	r0, #0
}
20070064:	b003      	add	sp, #12
20070066:	bc70      	pop	{r4, r5, r6}
20070068:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006a:	2002      	movs	r0, #2
2007006c:	e7fa      	b.n	20070064 <efc_perform_read_sequence+0x64>
2007006e:	bf00      	nop
20070070:	400e0a00 	.word	0x400e0a00

20070074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070074:	6001      	str	r1, [r0, #0]
20070076:	4770      	bx	lr

20070078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20070078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2007007c:	6883      	ldr	r3, [r0, #8]
2007007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070080:	9b01      	ldr	r3, [sp, #4]
20070082:	f013 0f01 	tst.w	r3, #1
20070086:	d0f9      	beq.n	2007007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20070088:	9801      	ldr	r0, [sp, #4]
}
2007008a:	f000 0006 	and.w	r0, r0, #6
2007008e:	b002      	add	sp, #8
20070090:	4770      	bx	lr
20070092:	bf00      	nop

20070094 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070094:	f3bf 8f5f 	dmb	sy
20070098:	3801      	subs	r0, #1
2007009a:	d1fb      	bne.n	20070094 <portable_delay_cycles>
2007009c:	4770      	bx	lr
	...

200700a0 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200700a4:	4a20      	ldr	r2, [pc, #128]	; (20070128 <SystemInit+0x88>)
200700a6:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ac:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700ae:	4b1f      	ldr	r3, [pc, #124]	; (2007012c <SystemInit+0x8c>)
200700b0:	6a1b      	ldr	r3, [r3, #32]
200700b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700b6:	d107      	bne.n	200700c8 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b8:	4a1d      	ldr	r2, [pc, #116]	; (20070130 <SystemInit+0x90>)
200700ba:	4b1c      	ldr	r3, [pc, #112]	; (2007012c <SystemInit+0x8c>)
200700bc:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700be:	4b1b      	ldr	r3, [pc, #108]	; (2007012c <SystemInit+0x8c>)
200700c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700c2:	f013 0f01 	tst.w	r3, #1
200700c6:	d0fa      	beq.n	200700be <SystemInit+0x1e>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c8:	4a1a      	ldr	r2, [pc, #104]	; (20070134 <SystemInit+0x94>)
200700ca:	4b18      	ldr	r3, [pc, #96]	; (2007012c <SystemInit+0x8c>)
200700cc:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700ce:	4b17      	ldr	r3, [pc, #92]	; (2007012c <SystemInit+0x8c>)
200700d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700d6:	d0fa      	beq.n	200700ce <SystemInit+0x2e>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d8:	4a14      	ldr	r2, [pc, #80]	; (2007012c <SystemInit+0x8c>)
200700da:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700dc:	f023 0303 	bic.w	r3, r3, #3
200700e0:	f043 0301 	orr.w	r3, r3, #1
200700e4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700e6:	4b11      	ldr	r3, [pc, #68]	; (2007012c <SystemInit+0x8c>)
200700e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700ea:	f013 0f08 	tst.w	r3, #8
200700ee:	d0fa      	beq.n	200700e6 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700f0:	4a11      	ldr	r2, [pc, #68]	; (20070138 <SystemInit+0x98>)
200700f2:	4b0e      	ldr	r3, [pc, #56]	; (2007012c <SystemInit+0x8c>)
200700f4:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700f6:	4b0d      	ldr	r3, [pc, #52]	; (2007012c <SystemInit+0x8c>)
200700f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700fa:	f013 0f02 	tst.w	r3, #2
200700fe:	d0fa      	beq.n	200700f6 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070100:	2211      	movs	r2, #17
20070102:	4b0a      	ldr	r3, [pc, #40]	; (2007012c <SystemInit+0x8c>)
20070104:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070106:	4b09      	ldr	r3, [pc, #36]	; (2007012c <SystemInit+0x8c>)
20070108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007010a:	f013 0f08 	tst.w	r3, #8
2007010e:	d0fa      	beq.n	20070106 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070110:	2212      	movs	r2, #18
20070112:	4b06      	ldr	r3, [pc, #24]	; (2007012c <SystemInit+0x8c>)
20070114:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070116:	4b05      	ldr	r3, [pc, #20]	; (2007012c <SystemInit+0x8c>)
20070118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007011a:	f013 0f08 	tst.w	r3, #8
2007011e:	d0fa      	beq.n	20070116 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070120:	4a06      	ldr	r2, [pc, #24]	; (2007013c <SystemInit+0x9c>)
20070122:	4b07      	ldr	r3, [pc, #28]	; (20070140 <SystemInit+0xa0>)
20070124:	601a      	str	r2, [r3, #0]
20070126:	4770      	bx	lr
20070128:	400e0a00 	.word	0x400e0a00
2007012c:	400e0600 	.word	0x400e0600
20070130:	00370809 	.word	0x00370809
20070134:	01370809 	.word	0x01370809
20070138:	200d3f01 	.word	0x200d3f01
2007013c:	0501bd00 	.word	0x0501bd00
20070140:	2007223c 	.word	0x2007223c

20070144 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070144:	4b1e      	ldr	r3, [pc, #120]	; (200701c0 <system_init_flash+0x7c>)
20070146:	4298      	cmp	r0, r3
20070148:	d913      	bls.n	20070172 <system_init_flash+0x2e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007014a:	4b1e      	ldr	r3, [pc, #120]	; (200701c4 <system_init_flash+0x80>)
2007014c:	4298      	cmp	r0, r3
2007014e:	d917      	bls.n	20070180 <system_init_flash+0x3c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070150:	4b1d      	ldr	r3, [pc, #116]	; (200701c8 <system_init_flash+0x84>)
20070152:	4298      	cmp	r0, r3
20070154:	d91c      	bls.n	20070190 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070156:	4b1d      	ldr	r3, [pc, #116]	; (200701cc <system_init_flash+0x88>)
20070158:	4298      	cmp	r0, r3
2007015a:	d921      	bls.n	200701a0 <system_init_flash+0x5c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007015c:	4b1c      	ldr	r3, [pc, #112]	; (200701d0 <system_init_flash+0x8c>)
2007015e:	4298      	cmp	r0, r3
20070160:	d926      	bls.n	200701b0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070162:	f44f 63a0 	mov.w	r3, #1280	; 0x500
20070166:	4a1b      	ldr	r2, [pc, #108]	; (200701d4 <system_init_flash+0x90>)
20070168:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007016a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016e:	6013      	str	r3, [r2, #0]
20070170:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070172:	2300      	movs	r3, #0
20070174:	4a17      	ldr	r2, [pc, #92]	; (200701d4 <system_init_flash+0x90>)
20070176:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070178:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007017c:	6013      	str	r3, [r2, #0]
2007017e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070180:	f44f 7380 	mov.w	r3, #256	; 0x100
20070184:	4a13      	ldr	r2, [pc, #76]	; (200701d4 <system_init_flash+0x90>)
20070186:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070188:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007018c:	6013      	str	r3, [r2, #0]
2007018e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070190:	f44f 7300 	mov.w	r3, #512	; 0x200
20070194:	4a0f      	ldr	r2, [pc, #60]	; (200701d4 <system_init_flash+0x90>)
20070196:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070198:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007019c:	6013      	str	r3, [r2, #0]
2007019e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200701a0:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a4:	4a0b      	ldr	r2, [pc, #44]	; (200701d4 <system_init_flash+0x90>)
200701a6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701ac:	6013      	str	r3, [r2, #0]
200701ae:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200701b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200701b4:	4a07      	ldr	r2, [pc, #28]	; (200701d4 <system_init_flash+0x90>)
200701b6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
200701b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701bc:	6013      	str	r3, [r2, #0]
200701be:	4770      	bx	lr
200701c0:	0121eabf 	.word	0x0121eabf
200701c4:	02faf07f 	.word	0x02faf07f
200701c8:	03d08fff 	.word	0x03d08fff
200701cc:	04c4b3ff 	.word	0x04c4b3ff
200701d0:	055d4a7f 	.word	0x055d4a7f
200701d4:	400e0a00 	.word	0x400e0a00

200701d8 <mdi>:
200701d8:	00000a10 00000000 00000000 00000000     ................
	...

20072200 <rom_ops>:
20072200:	00081329 0008110d 000812b1 0008121d     )...............
20072210:	00081191 00081075 00081031 00080ffd     ....u...1.......
20072220:	00080fb9 00080f79 00080f35 00080e1d     ....y...5.......
20072230:	00080eed 00080da9                       ........

20072238 <g_interrupt_enabled>:
20072238:	00000001                                ....

2007223c <SystemCoreClock>:
2007223c:	003d0900                                ..=.

20072240 <_impure_ptr>:
20072240:	20072248 00000000                       H". ....

20072248 <impure_data>:
20072248:	00000000 20072534 2007259c 20072604     ....4%. .%. .&. 
	...
200722f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20072300:	0005deec 0000000b 00000000 00000000     ................
	...

20072670 <__malloc_av_>:
	...
20072678:	20072670 20072670 20072678 20072678     p&. p&. x&. x&. 
20072688:	20072680 20072680 20072688 20072688     .&. .&. .&. .&. 
20072698:	20072690 20072690 20072698 20072698     .&. .&. .&. .&. 
200726a8:	200726a0 200726a0 200726a8 200726a8     .&. .&. .&. .&. 
200726b8:	200726b0 200726b0 200726b8 200726b8     .&. .&. .&. .&. 
200726c8:	200726c0 200726c0 200726c8 200726c8     .&. .&. .&. .&. 
200726d8:	200726d0 200726d0 200726d8 200726d8     .&. .&. .&. .&. 
200726e8:	200726e0 200726e0 200726e8 200726e8     .&. .&. .&. .&. 
200726f8:	200726f0 200726f0 200726f8 200726f8     .&. .&. .&. .&. 
20072708:	20072700 20072700 20072708 20072708     .'. .'. .'. .'. 
20072718:	20072710 20072710 20072718 20072718     .'. .'. .'. .'. 
20072728:	20072720 20072720 20072728 20072728      '.  '. ('. ('. 
20072738:	20072730 20072730 20072738 20072738     0'. 0'. 8'. 8'. 
20072748:	20072740 20072740 20072748 20072748     @'. @'. H'. H'. 
20072758:	20072750 20072750 20072758 20072758     P'. P'. X'. X'. 
20072768:	20072760 20072760 20072768 20072768     `'. `'. h'. h'. 
20072778:	20072770 20072770 20072778 20072778     p'. p'. x'. x'. 
20072788:	20072780 20072780 20072788 20072788     .'. .'. .'. .'. 
20072798:	20072790 20072790 20072798 20072798     .'. .'. .'. .'. 
200727a8:	200727a0 200727a0 200727a8 200727a8     .'. .'. .'. .'. 
200727b8:	200727b0 200727b0 200727b8 200727b8     .'. .'. .'. .'. 
200727c8:	200727c0 200727c0 200727c8 200727c8     .'. .'. .'. .'. 
200727d8:	200727d0 200727d0 200727d8 200727d8     .'. .'. .'. .'. 
200727e8:	200727e0 200727e0 200727e8 200727e8     .'. .'. .'. .'. 
200727f8:	200727f0 200727f0 200727f8 200727f8     .'. .'. .'. .'. 
20072808:	20072800 20072800 20072808 20072808     .(. .(. .(. .(. 
20072818:	20072810 20072810 20072818 20072818     .(. .(. .(. .(. 
20072828:	20072820 20072820 20072828 20072828      (.  (. ((. ((. 
20072838:	20072830 20072830 20072838 20072838     0(. 0(. 8(. 8(. 
20072848:	20072840 20072840 20072848 20072848     @(. @(. H(. H(. 
20072858:	20072850 20072850 20072858 20072858     P(. P(. X(. X(. 
20072868:	20072860 20072860 20072868 20072868     `(. `(. h(. h(. 
20072878:	20072870 20072870 20072878 20072878     p(. p(. x(. x(. 
20072888:	20072880 20072880 20072888 20072888     .(. .(. .(. .(. 
20072898:	20072890 20072890 20072898 20072898     .(. .(. .(. .(. 
200728a8:	200728a0 200728a0 200728a8 200728a8     .(. .(. .(. .(. 
200728b8:	200728b0 200728b0 200728b8 200728b8     .(. .(. .(. .(. 
200728c8:	200728c0 200728c0 200728c8 200728c8     .(. .(. .(. .(. 
200728d8:	200728d0 200728d0 200728d8 200728d8     .(. .(. .(. .(. 
200728e8:	200728e0 200728e0 200728e8 200728e8     .(. .(. .(. .(. 
200728f8:	200728f0 200728f0 200728f8 200728f8     .(. .(. .(. .(. 
20072908:	20072900 20072900 20072908 20072908     .). .). .). .). 
20072918:	20072910 20072910 20072918 20072918     .). .). .). .). 
20072928:	20072920 20072920 20072928 20072928      ).  ). (). (). 
20072938:	20072930 20072930 20072938 20072938     0). 0). 8). 8). 
20072948:	20072940 20072940 20072948 20072948     @). @). H). H). 
20072958:	20072950 20072950 20072958 20072958     P). P). X). X). 
20072968:	20072960 20072960 20072968 20072968     `). `). h). h). 
20072978:	20072970 20072970 20072978 20072978     p). p). x). x). 
20072988:	20072980 20072980 20072988 20072988     .). .). .). .). 
20072998:	20072990 20072990 20072998 20072998     .). .). .). .). 
200729a8:	200729a0 200729a0 200729a8 200729a8     .). .). .). .). 
200729b8:	200729b0 200729b0 200729b8 200729b8     .). .). .). .). 
200729c8:	200729c0 200729c0 200729c8 200729c8     .). .). .). .). 
200729d8:	200729d0 200729d0 200729d8 200729d8     .). .). .). .). 
200729e8:	200729e0 200729e0 200729e8 200729e8     .). .). .). .). 
200729f8:	200729f0 200729f0 200729f8 200729f8     .). .). .). .). 
20072a08:	20072a00 20072a00 20072a08 20072a08     .*. .*. .*. .*. 
20072a18:	20072a10 20072a10 20072a18 20072a18     .*. .*. .*. .*. 
20072a28:	20072a20 20072a20 20072a28 20072a28      *.  *. (*. (*. 
20072a38:	20072a30 20072a30 20072a38 20072a38     0*. 0*. 8*. 8*. 
20072a48:	20072a40 20072a40 20072a48 20072a48     @*. @*. H*. H*. 
20072a58:	20072a50 20072a50 20072a58 20072a58     P*. P*. X*. X*. 
20072a68:	20072a60 20072a60 20072a68 20072a68     `*. `*. h*. h*. 

20072a78 <__malloc_sbrk_base>:
20072a78:	ffffffff                                ....

20072a7c <__malloc_trim_threshold>:
20072a7c:	00020000                                ....
