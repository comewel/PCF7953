
ATSAM3X8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fcc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00002a74  20070000  00082fcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000108  20072a74  00085a40  00022a74  2**2
                  ALLOC
  3 .stack        00005004  20072b7c  00085b48  00022a74  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00022a74  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00022a9d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b459  00000000  00000000  00022af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fdc  00000000  00000000  0003df4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000057d5  00000000  00000000  00041f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c00  00000000  00000000  00047700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb8  00000000  00000000  00048300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a8c2  00000000  00000000  00048eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013138  00000000  00000000  0006377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062301  00000000  00000000  000768b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002288  00000000  00000000  000d8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	80 7b 07 20 8d 17 08 00 89 17 08 00 89 17 08 00     .{. ............
   80010:	89 17 08 00 89 17 08 00 89 17 08 00 00 00 00 00     ................
	...
   8002c:	89 17 08 00 89 17 08 00 00 00 00 00 89 17 08 00     ................
   8003c:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   8004c:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   8005c:	89 17 08 00 89 17 08 00 89 17 08 00 00 00 00 00     ................
   8006c:	51 13 08 00 61 13 08 00 71 13 08 00 81 13 08 00     Q...a...q.......
	...
   80084:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   80094:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   800a4:	00 00 00 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   800b4:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   800c4:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   800d4:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................
   800e4:	89 17 08 00 89 17 08 00 89 17 08 00 89 17 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20072a74 	.word	0x20072a74
   80110:	00000000 	.word	0x00000000
   80114:	00082fcc 	.word	0x00082fcc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082fcc 	.word	0x00082fcc
   80154:	20072a78 	.word	0x20072a78
   80158:	00082fcc 	.word	0x00082fcc
   8015c:	00000000 	.word	0x00000000

00080160 <efc_get_result>:
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
	return p_efc->EEFC_FRR;
   80160:	68c0      	ldr	r0, [r0, #12]
}
   80162:	4770      	bx	lr

00080164 <efc_init>:
{
   80164:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   80166:	0212      	lsls	r2, r2, #8
   80168:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   8016c:	4311      	orrs	r1, r2
   8016e:	f002 ff27 	bl	82fc0 <__efc_write_fmr_veneer>
}
   80172:	2000      	movs	r0, #0
   80174:	bd08      	pop	{r3, pc}
	...

00080178 <efc_perform_command>:
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80178:	f1a1 030e 	sub.w	r3, r1, #14
   8017c:	2b01      	cmp	r3, #1
   8017e:	d802      	bhi.n	80186 <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80180:	f04f 30ff 	mov.w	r0, #4294967295
   80184:	4770      	bx	lr
{
   80186:	b510      	push	{r4, lr}
   80188:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8018a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   8018e:	fab3 f383 	clz	r3, r3
   80192:	095b      	lsrs	r3, r3, #5
   80194:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80196:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80198:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8019c:	2400      	movs	r4, #0
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <efc_perform_command+0x54>)
   801a0:	701c      	strb	r4, [r3, #0]
	return flags;
   801a2:	9c01      	ldr	r4, [sp, #4]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   801a4:	0212      	lsls	r2, r2, #8
   801a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   801aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   801ae:	b2c9      	uxtb	r1, r1
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   801b0:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   801b2:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   801b6:	f002 feff 	bl	82fb8 <__efc_perform_fcr_veneer>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   801ba:	b12c      	cbz	r4, 801c8 <efc_perform_command+0x50>
		cpu_irq_enable();
   801bc:	2201      	movs	r2, #1
   801be:	4b03      	ldr	r3, [pc, #12]	; (801cc <efc_perform_command+0x54>)
   801c0:	701a      	strb	r2, [r3, #0]
   801c2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   801c6:	b662      	cpsie	i
}
   801c8:	b002      	add	sp, #8
   801ca:	bd10      	pop	{r4, pc}
   801cc:	2007222c 	.word	0x2007222c

000801d0 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   801d0:	b538      	push	{r3, r4, r5, lr}
   801d2:	4604      	mov	r4, r0
   801d4:	460d      	mov	r5, r1
	efc_init(EFC, ul_mode, ul_fws);
   801d6:	460a      	mov	r2, r1
   801d8:	4601      	mov	r1, r0
   801da:	4805      	ldr	r0, [pc, #20]	; (801f0 <flash_init+0x20>)
   801dc:	f7ff ffc2 	bl	80164 <efc_init>

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   801e0:	462a      	mov	r2, r5
   801e2:	4621      	mov	r1, r4
   801e4:	4803      	ldr	r0, [pc, #12]	; (801f4 <flash_init+0x24>)
   801e6:	f7ff ffbd 	bl	80164 <efc_init>
#endif

	return FLASH_RC_OK;
}
   801ea:	2000      	movs	r0, #0
   801ec:	bd38      	pop	{r3, r4, r5, pc}
   801ee:	bf00      	nop
   801f0:	400e0a00 	.word	0x400e0a00
   801f4:	400e0c00 	.word	0x400e0c00

000801f8 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   801f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   801fa:	2802      	cmp	r0, #2
   801fc:	d902      	bls.n	80204 <flash_is_gpnvm_set+0xc>
		return FLASH_RC_INVALID;
   801fe:	2511      	movs	r5, #17
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
		return FLASH_RC_YES;
	}

	return FLASH_RC_NO;
}
   80200:	4628      	mov	r0, r5
   80202:	bd38      	pop	{r3, r4, r5, pc}
   80204:	4604      	mov	r4, r0
	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80206:	2200      	movs	r2, #0
   80208:	210d      	movs	r1, #13
   8020a:	4808      	ldr	r0, [pc, #32]	; (8022c <flash_is_gpnvm_set+0x34>)
   8020c:	f7ff ffb4 	bl	80178 <efc_perform_command>
   80210:	4605      	mov	r5, r0
   80212:	b108      	cbz	r0, 80218 <flash_is_gpnvm_set+0x20>
		return FLASH_RC_ERROR;
   80214:	2510      	movs	r5, #16
   80216:	e7f3      	b.n	80200 <flash_is_gpnvm_set+0x8>
	ul_gpnvm_bits = efc_get_result(EFC);
   80218:	4804      	ldr	r0, [pc, #16]	; (8022c <flash_is_gpnvm_set+0x34>)
   8021a:	f7ff ffa1 	bl	80160 <efc_get_result>
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   8021e:	2301      	movs	r3, #1
   80220:	fa03 f404 	lsl.w	r4, r3, r4
   80224:	4220      	tst	r0, r4
   80226:	d0eb      	beq.n	80200 <flash_is_gpnvm_set+0x8>
		return FLASH_RC_YES;
   80228:	461d      	mov	r5, r3
   8022a:	e7e9      	b.n	80200 <flash_is_gpnvm_set+0x8>
   8022c:	400e0a00 	.word	0x400e0a00

00080230 <flash_set_gpnvm>:
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80230:	2802      	cmp	r0, #2
   80232:	d902      	bls.n	8023a <flash_set_gpnvm+0xa>
		return FLASH_RC_INVALID;
   80234:	2311      	movs	r3, #17
}
   80236:	4618      	mov	r0, r3
   80238:	4770      	bx	lr
{
   8023a:	b510      	push	{r4, lr}
   8023c:	4604      	mov	r4, r0
	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   8023e:	f7ff ffdb 	bl	801f8 <flash_is_gpnvm_set>
   80242:	2801      	cmp	r0, #1
   80244:	d009      	beq.n	8025a <flash_set_gpnvm+0x2a>
	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80246:	4622      	mov	r2, r4
   80248:	210b      	movs	r1, #11
   8024a:	4805      	ldr	r0, [pc, #20]	; (80260 <flash_set_gpnvm+0x30>)
   8024c:	f7ff ff94 	bl	80178 <efc_perform_command>
   80250:	4603      	mov	r3, r0
   80252:	b100      	cbz	r0, 80256 <flash_set_gpnvm+0x26>
	return FLASH_RC_ERROR;
   80254:	2310      	movs	r3, #16
}
   80256:	4618      	mov	r0, r3
   80258:	bd10      	pop	{r4, pc}
		return FLASH_RC_OK;
   8025a:	2300      	movs	r3, #0
   8025c:	e7fb      	b.n	80256 <flash_set_gpnvm+0x26>
   8025e:	bf00      	nop
   80260:	400e0a00 	.word	0x400e0a00

00080264 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80264:	b508      	push	{r3, lr}
	return flash_set_gpnvm(0);
   80266:	2000      	movs	r0, #0
   80268:	f7ff ffe2 	bl	80230 <flash_set_gpnvm>
}
   8026c:	bd08      	pop	{r3, pc}

0008026e <flash_is_security_bit_enabled>:
 * \retval 1 If the security bit is currently set.
 * \retval 0 If the security bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_security_bit_enabled(void)
{
   8026e:	b508      	push	{r3, lr}
	return flash_is_gpnvm_set(0);
   80270:	2000      	movs	r0, #0
   80272:	f7ff ffc1 	bl	801f8 <flash_is_gpnvm_set>
}
   80276:	bd08      	pop	{r3, pc}

00080278 <crc32_caculate>:
	size_t i;

	crc = 0xFFFFFFFFul;
	ptr = data;

	if ( ptr != NULL ) {
   80278:	b128      	cbz	r0, 80286 <crc32_caculate+0xe>
{
   8027a:	b430      	push	{r4, r5}
   8027c:	4604      	mov	r4, r0
   8027e:	2200      	movs	r2, #0
   80280:	f04f 30ff 	mov.w	r0, #4294967295
   80284:	e00d      	b.n	802a2 <crc32_caculate+0x2a>
	crc = 0xFFFFFFFFul;
   80286:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}
	
	return (crc ^ 0xFFFFFFFFul);

}
   8028a:	43c0      	mvns	r0, r0
   8028c:	4770      	bx	lr
			crc = (crc >> 8) ^ crc32_tab[ (crc ^ (unsigned long) *ptr++) & 0x000000FFul ];
   8028e:	7823      	ldrb	r3, [r4, #0]
   80290:	4043      	eors	r3, r0
   80292:	b2db      	uxtb	r3, r3
   80294:	4d05      	ldr	r5, [pc, #20]	; (802ac <crc32_caculate+0x34>)
   80296:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   8029a:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
		for (i = 0; i < len; i++) {
   8029e:	3201      	adds	r2, #1
			crc = (crc >> 8) ^ crc32_tab[ (crc ^ (unsigned long) *ptr++) & 0x000000FFul ];
   802a0:	3401      	adds	r4, #1
		for (i = 0; i < len; i++) {
   802a2:	428a      	cmp	r2, r1
   802a4:	d3f3      	bcc.n	8028e <crc32_caculate+0x16>
}
   802a6:	43c0      	mvns	r0, r0
   802a8:	bc30      	pop	{r4, r5}
   802aa:	4770      	bx	lr
   802ac:	00082b70 	.word	0x00082b70

000802b0 <byte_revert>:
 * return reverted data
 * revert byte
 */
static unsigned char byte_revert(unsigned char x)
{
	x = (((x & 0xaa) >> 1) | ((x & 0x55) << 1));
   802b0:	1043      	asrs	r3, r0, #1
   802b2:	f003 0355 	and.w	r3, r3, #85	; 0x55
   802b6:	0040      	lsls	r0, r0, #1
   802b8:	f020 0055 	bic.w	r0, r0, #85	; 0x55
   802bc:	b240      	sxtb	r0, r0
   802be:	4303      	orrs	r3, r0
   802c0:	b2db      	uxtb	r3, r3
	x = (((x & 0xcc) >> 2) | ((x & 0x33) << 2));
   802c2:	1098      	asrs	r0, r3, #2
   802c4:	f000 0033 	and.w	r0, r0, #51	; 0x33
   802c8:	009b      	lsls	r3, r3, #2
   802ca:	f023 0333 	bic.w	r3, r3, #51	; 0x33
   802ce:	b25b      	sxtb	r3, r3
   802d0:	4303      	orrs	r3, r0
   802d2:	b2db      	uxtb	r3, r3
	
	return((x >> 4) | (x << 4));
   802d4:	0918      	lsrs	r0, r3, #4
   802d6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
   802da:	b2c0      	uxtb	r0, r0
   802dc:	4770      	bx	lr

000802de <revert>:
 *
 * return -1:error 0:success
 * revert bytes
 */
int revert(unsigned char *data, unsigned long len)
{
   802de:	b570      	push	{r4, r5, r6, lr}
   802e0:	b082      	sub	sp, #8
	volatile unsigned char reverted = 0;
   802e2:	2300      	movs	r3, #0
   802e4:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if (data == NULL)
   802e8:	b188      	cbz	r0, 8030e <revert+0x30>
   802ea:	4605      	mov	r5, r0
   802ec:	460e      	mov	r6, r1
   802ee:	461c      	mov	r4, r3
   802f0:	e008      	b.n	80304 <revert+0x26>
		return -1;
		
	for (unsigned int i = 0; i < len; i++) {
		  reverted = byte_revert(data[i]);
   802f2:	5d28      	ldrb	r0, [r5, r4]
   802f4:	f7ff ffdc 	bl	802b0 <byte_revert>
   802f8:	f88d 0007 	strb.w	r0, [sp, #7]
		  data[i] = reverted;
   802fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80300:	552b      	strb	r3, [r5, r4]
	for (unsigned int i = 0; i < len; i++) {
   80302:	3401      	adds	r4, #1
   80304:	42b4      	cmp	r4, r6
   80306:	d3f4      	bcc.n	802f2 <revert+0x14>
	}
	
	return 0;
   80308:	2000      	movs	r0, #0
}
   8030a:	b002      	add	sp, #8
   8030c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   8030e:	f04f 30ff 	mov.w	r0, #4294967295
   80312:	e7fa      	b.n	8030a <revert+0x2c>

00080314 <uart_ops_recv>:
 * return none
 * read ops data from uart
 */

int uart_ops_recv(void)
{
   80314:	b510      	push	{r4, lr}
   80316:	b082      	sub	sp, #8
	volatile status_code_t status = STATUS_OK;
   80318:	2300      	movs	r3, #0
   8031a:	f88d 3007 	strb.w	r3, [sp, #7]
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data)) {
   8031e:	493c      	ldr	r1, [pc, #240]	; (80410 <uart_ops_recv+0xfc>)
   80320:	483c      	ldr	r0, [pc, #240]	; (80414 <uart_ops_recv+0x100>)
   80322:	f000 fa37 	bl	80794 <uart_read>
   80326:	2800      	cmp	r0, #0
   80328:	d1f9      	bne.n	8031e <uart_ops_recv+0xa>
	
	unsigned int crc32 = 0;
	unsigned int crc32_recv = 0;
	
	status = usart_serial_getchar((Usart *)UART, &mdi.ops, DISABLE);
   8032a:	2300      	movs	r3, #0
   8032c:	f88d 3007 	strb.w	r3, [sp, #7]
	status = usart_serial_read_packet((Usart *)UART, &mdi.address[0], 2, ENABLE);
   80330:	2301      	movs	r3, #1
   80332:	2202      	movs	r2, #2
   80334:	4938      	ldr	r1, [pc, #224]	; (80418 <uart_ops_recv+0x104>)
   80336:	4837      	ldr	r0, [pc, #220]	; (80414 <uart_ops_recv+0x100>)
   80338:	f000 f964 	bl	80604 <usart_serial_read_packet>
   8033c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (status == ERR_TIMEOUT)
   80340:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80344:	b25b      	sxtb	r3, r3
   80346:	f113 0f03 	cmn.w	r3, #3
   8034a:	d052      	beq.n	803f2 <uart_ops_recv+0xde>
		return -1;
	status = usart_serial_read_packet((Usart *)UART, &mdi.lens[0], 2, ENABLE);
   8034c:	2301      	movs	r3, #1
   8034e:	2202      	movs	r2, #2
   80350:	4932      	ldr	r1, [pc, #200]	; (8041c <uart_ops_recv+0x108>)
   80352:	4830      	ldr	r0, [pc, #192]	; (80414 <uart_ops_recv+0x100>)
   80354:	f000 f956 	bl	80604 <usart_serial_read_packet>
   80358:	f88d 0007 	strb.w	r0, [sp, #7]
	if (status == ERR_TIMEOUT)
   8035c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80360:	b25b      	sxtb	r3, r3
   80362:	f113 0f03 	cmn.w	r3, #3
   80366:	d047      	beq.n	803f8 <uart_ops_recv+0xe4>
		return -1;
	
	if (mdi.len > 0) {
   80368:	f242 0328 	movw	r3, #8232	; 0x2028
   8036c:	4a2c      	ldr	r2, [pc, #176]	; (80420 <uart_ops_recv+0x10c>)
   8036e:	5ad2      	ldrh	r2, [r2, r3]
   80370:	b912      	cbnz	r2, 80378 <uart_ops_recv+0x64>
		crc32 = crc32_caculate(mdi.recv, mdi.len);
		if (crc32 != crc32_recv)
			return -1;
	}
	
	return 0;
   80372:	2000      	movs	r0, #0
}
   80374:	b002      	add	sp, #8
   80376:	bd10      	pop	{r4, pc}
		status = usart_serial_read_packet((Usart *)UART, &mdi.recv[0], mdi.len, ENABLE);
   80378:	2301      	movs	r3, #1
   8037a:	492a      	ldr	r1, [pc, #168]	; (80424 <uart_ops_recv+0x110>)
   8037c:	4825      	ldr	r0, [pc, #148]	; (80414 <uart_ops_recv+0x100>)
   8037e:	f000 f941 	bl	80604 <usart_serial_read_packet>
   80382:	f88d 0007 	strb.w	r0, [sp, #7]
		if (status == ERR_TIMEOUT)
   80386:	f89d 3007 	ldrb.w	r3, [sp, #7]
   8038a:	b25b      	sxtb	r3, r3
   8038c:	f113 0f03 	cmn.w	r3, #3
   80390:	d035      	beq.n	803fe <uart_ops_recv+0xea>
		status = usart_serial_read_packet((Usart *)UART, &mdi.crc32[0], 4, ENABLE);
   80392:	2301      	movs	r3, #1
   80394:	2204      	movs	r2, #4
   80396:	4924      	ldr	r1, [pc, #144]	; (80428 <uart_ops_recv+0x114>)
   80398:	481e      	ldr	r0, [pc, #120]	; (80414 <uart_ops_recv+0x100>)
   8039a:	f000 f933 	bl	80604 <usart_serial_read_packet>
   8039e:	f88d 0007 	strb.w	r0, [sp, #7]
		if (status == ERR_TIMEOUT)
   803a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   803a6:	b25b      	sxtb	r3, r3
   803a8:	f113 0f03 	cmn.w	r3, #3
   803ac:	d02a      	beq.n	80404 <uart_ops_recv+0xf0>
		crc32_recv = mdi.crc32[0] | (mdi.crc32[1] << 8) | (mdi.crc32[2] << 16) | (mdi.crc32[3] << 24);
   803ae:	4a1c      	ldr	r2, [pc, #112]	; (80420 <uart_ops_recv+0x10c>)
   803b0:	f242 032a 	movw	r3, #8234	; 0x202a
   803b4:	5cd3      	ldrb	r3, [r2, r3]
   803b6:	f242 012b 	movw	r1, #8235	; 0x202b
   803ba:	5c51      	ldrb	r1, [r2, r1]
   803bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   803c0:	f242 012c 	movw	r1, #8236	; 0x202c
   803c4:	5c51      	ldrb	r1, [r2, r1]
   803c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   803ca:	f242 012d 	movw	r1, #8237	; 0x202d
   803ce:	5c54      	ldrb	r4, [r2, r1]
		if (crc32_recv == 0x00000000)
   803d0:	ea53 6404 	orrs.w	r4, r3, r4, lsl #24
   803d4:	d019      	beq.n	8040a <uart_ops_recv+0xf6>
		crc32 = crc32_caculate(mdi.recv, mdi.len);
   803d6:	4610      	mov	r0, r2
   803d8:	f242 0328 	movw	r3, #8232	; 0x2028
   803dc:	5ad1      	ldrh	r1, [r2, r3]
   803de:	3007      	adds	r0, #7
   803e0:	f7ff ff4a 	bl	80278 <crc32_caculate>
		if (crc32 != crc32_recv)
   803e4:	4284      	cmp	r4, r0
   803e6:	d101      	bne.n	803ec <uart_ops_recv+0xd8>
	return 0;
   803e8:	2000      	movs	r0, #0
   803ea:	e7c3      	b.n	80374 <uart_ops_recv+0x60>
			return -1;
   803ec:	f04f 30ff 	mov.w	r0, #4294967295
   803f0:	e7c0      	b.n	80374 <uart_ops_recv+0x60>
		return -1;
   803f2:	f04f 30ff 	mov.w	r0, #4294967295
   803f6:	e7bd      	b.n	80374 <uart_ops_recv+0x60>
		return -1;
   803f8:	f04f 30ff 	mov.w	r0, #4294967295
   803fc:	e7ba      	b.n	80374 <uart_ops_recv+0x60>
			return -1;
   803fe:	f04f 30ff 	mov.w	r0, #4294967295
   80402:	e7b7      	b.n	80374 <uart_ops_recv+0x60>
			return -1;		
   80404:	f04f 30ff 	mov.w	r0, #4294967295
   80408:	e7b4      	b.n	80374 <uart_ops_recv+0x60>
			return 0;
   8040a:	2000      	movs	r0, #0
   8040c:	e7b2      	b.n	80374 <uart_ops_recv+0x60>
   8040e:	bf00      	nop
   80410:	200701da 	.word	0x200701da
   80414:	400e0800 	.word	0x400e0800
   80418:	200701db 	.word	0x200701db
   8041c:	20072200 	.word	0x20072200
   80420:	200701d8 	.word	0x200701d8
   80424:	200701df 	.word	0x200701df
   80428:	20072202 	.word	0x20072202

0008042c <uart_ops_handler>:
 * return -1:error 0:success
 * handle uart ops
 */

int uart_ops_handler(void)
{
   8042c:	b510      	push	{r4, lr}
   8042e:	b082      	sub	sp, #8
	volatile unsigned char ops = mdi.ops;
   80430:	4b4e      	ldr	r3, [pc, #312]	; (8056c <uart_ops_handler+0x140>)
   80432:	789b      	ldrb	r3, [r3, #2]
   80434:	f88d 3007 	strb.w	r3, [sp, #7]
	volatile enum UART_STATUS_E status = SUCCESS;
   80438:	2306      	movs	r3, #6
   8043a:	f88d 3006 	strb.w	r3, [sp, #6]
	int ret = 0;
	
	switch(ops)	{
   8043e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   80442:	3b09      	subs	r3, #9
   80444:	2b14      	cmp	r3, #20
   80446:	f200 808c 	bhi.w	80562 <uart_ops_handler+0x136>
   8044a:	e8df f003 	tbb	[pc, r3]
   8044e:	220b      	.short	0x220b
   80450:	8a6b4c2d 	.word	0x8a6b4c2d
   80454:	8a8a8a8a 	.word	0x8a8a8a8a
   80458:	8a8a8a8a 	.word	0x8a8a8a8a
   8045c:	8a8a8a8a 	.word	0x8a8a8a8a
   80460:	5738      	.short	0x5738
   80462:	76          	.byte	0x76
   80463:	00          	.byte	0x00
	case CONNECT:
		ret = rom_ops.connect();
   80464:	4b42      	ldr	r3, [pc, #264]	; (80570 <uart_ops_handler+0x144>)
   80466:	681b      	ldr	r3, [r3, #0]
   80468:	4798      	blx	r3
		status = ret < 0 ? CONNECT_ERR : SUCCESS;
   8046a:	2800      	cmp	r0, #0
   8046c:	db0f      	blt.n	8048e <uart_ops_handler+0x62>
   8046e:	2306      	movs	r3, #6
   80470:	f88d 3006 	strb.w	r3, [sp, #6]
	default:
		status = COMMAND_ERR;
		break;	
	}
	
	usart_serial_putchar((Usart *)UART, status);
   80474:	f89d 4006 	ldrb.w	r4, [sp, #6]
   80478:	b2e4      	uxtb	r4, r4
		while (uart_write((Uart*)p_usart, c)!=0);
   8047a:	4621      	mov	r1, r4
   8047c:	483d      	ldr	r0, [pc, #244]	; (80574 <uart_ops_handler+0x148>)
   8047e:	f000 f980 	bl	80782 <uart_write>
   80482:	2800      	cmp	r0, #0
   80484:	d1f9      	bne.n	8047a <uart_ops_handler+0x4e>
	
	return status;
   80486:	f89d 0006 	ldrb.w	r0, [sp, #6]
}
   8048a:	b002      	add	sp, #8
   8048c:	bd10      	pop	{r4, pc}
		status = ret < 0 ? CONNECT_ERR : SUCCESS;
   8048e:	2390      	movs	r3, #144	; 0x90
   80490:	e7ee      	b.n	80470 <uart_ops_handler+0x44>
		ret = rom_ops.erase();
   80492:	4b37      	ldr	r3, [pc, #220]	; (80570 <uart_ops_handler+0x144>)
   80494:	685b      	ldr	r3, [r3, #4]
   80496:	4798      	blx	r3
		status = ret < 0 ? ERASE_ERR : SUCCESS;
   80498:	2800      	cmp	r0, #0
   8049a:	db03      	blt.n	804a4 <uart_ops_handler+0x78>
   8049c:	2306      	movs	r3, #6
   8049e:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   804a2:	e7e7      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? ERASE_ERR : SUCCESS;
   804a4:	23a0      	movs	r3, #160	; 0xa0
   804a6:	e7fa      	b.n	8049e <uart_ops_handler+0x72>
		ret = rom_ops.program_erom();
   804a8:	4b31      	ldr	r3, [pc, #196]	; (80570 <uart_ops_handler+0x144>)
   804aa:	689b      	ldr	r3, [r3, #8]
   804ac:	4798      	blx	r3
		status = ret < 0 ? PROGRAM_ER : SUCCESS;
   804ae:	2800      	cmp	r0, #0
   804b0:	db03      	blt.n	804ba <uart_ops_handler+0x8e>
   804b2:	2306      	movs	r3, #6
   804b4:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   804b8:	e7dc      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? PROGRAM_ER : SUCCESS;
   804ba:	230b      	movs	r3, #11
   804bc:	e7fa      	b.n	804b4 <uart_ops_handler+0x88>
		ret = revert(mdi.recv, mdi.len);
   804be:	482b      	ldr	r0, [pc, #172]	; (8056c <uart_ops_handler+0x140>)
   804c0:	f242 0328 	movw	r3, #8232	; 0x2028
   804c4:	5ac1      	ldrh	r1, [r0, r3]
   804c6:	3007      	adds	r0, #7
   804c8:	f7ff ff09 	bl	802de <revert>
   804cc:	4604      	mov	r4, r0
		ret |= rom_ops.program_eerom();
   804ce:	4b28      	ldr	r3, [pc, #160]	; (80570 <uart_ops_handler+0x144>)
   804d0:	68db      	ldr	r3, [r3, #12]
   804d2:	4798      	blx	r3
		status = ret < 0 ? PROGRAM_EE_ERR : SUCCESS;
   804d4:	ea54 0300 	orrs.w	r3, r4, r0
   804d8:	d403      	bmi.n	804e2 <uart_ops_handler+0xb6>
   804da:	2306      	movs	r3, #6
   804dc:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   804e0:	e7c8      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? PROGRAM_EE_ERR : SUCCESS;
   804e2:	23b1      	movs	r3, #177	; 0xb1
   804e4:	e7fa      	b.n	804dc <uart_ops_handler+0xb0>
		ret = rom_ops.verify_erom();
   804e6:	4b22      	ldr	r3, [pc, #136]	; (80570 <uart_ops_handler+0x144>)
   804e8:	699b      	ldr	r3, [r3, #24]
   804ea:	4798      	blx	r3
		status = ret < 0 ? VERIFY_ER_ERR : SUCCESS;
   804ec:	2800      	cmp	r0, #0
   804ee:	db03      	blt.n	804f8 <uart_ops_handler+0xcc>
   804f0:	2306      	movs	r3, #6
   804f2:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   804f6:	e7bd      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? VERIFY_ER_ERR : SUCCESS;
   804f8:	23c0      	movs	r3, #192	; 0xc0
   804fa:	e7fa      	b.n	804f2 <uart_ops_handler+0xc6>
		ret = revert(mdi.recv, mdi.len);
   804fc:	481b      	ldr	r0, [pc, #108]	; (8056c <uart_ops_handler+0x140>)
   804fe:	f242 0328 	movw	r3, #8232	; 0x2028
   80502:	5ac1      	ldrh	r1, [r0, r3]
   80504:	3007      	adds	r0, #7
   80506:	f7ff feea 	bl	802de <revert>
   8050a:	4604      	mov	r4, r0
		ret |= rom_ops.verify_eerom();
   8050c:	4b18      	ldr	r3, [pc, #96]	; (80570 <uart_ops_handler+0x144>)
   8050e:	69db      	ldr	r3, [r3, #28]
   80510:	4798      	blx	r3
		status = ret < 0 ? VERIFY_EE_ERR : SUCCESS;
   80512:	ea54 0300 	orrs.w	r3, r4, r0
   80516:	d403      	bmi.n	80520 <uart_ops_handler+0xf4>
   80518:	2306      	movs	r3, #6
   8051a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;	
   8051e:	e7a9      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? VERIFY_EE_ERR : SUCCESS;
   80520:	23c1      	movs	r3, #193	; 0xc1
   80522:	e7fa      	b.n	8051a <uart_ops_handler+0xee>
		ret = rom_ops.read_erom();
   80524:	4b12      	ldr	r3, [pc, #72]	; (80570 <uart_ops_handler+0x144>)
   80526:	691b      	ldr	r3, [r3, #16]
   80528:	4798      	blx	r3
		status = ret < 0 ? READ_ER_ERR : SUCCESS;
   8052a:	2800      	cmp	r0, #0
   8052c:	db03      	blt.n	80536 <uart_ops_handler+0x10a>
   8052e:	2306      	movs	r3, #6
   80530:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   80534:	e79e      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? READ_ER_ERR : SUCCESS;
   80536:	23d0      	movs	r3, #208	; 0xd0
   80538:	e7fa      	b.n	80530 <uart_ops_handler+0x104>
		ret = revert(mdi.recv, mdi.len);
   8053a:	480c      	ldr	r0, [pc, #48]	; (8056c <uart_ops_handler+0x140>)
   8053c:	f242 0328 	movw	r3, #8232	; 0x2028
   80540:	5ac1      	ldrh	r1, [r0, r3]
   80542:	3007      	adds	r0, #7
   80544:	f7ff fecb 	bl	802de <revert>
   80548:	4604      	mov	r4, r0
		ret |= rom_ops.read_eerom();
   8054a:	4b09      	ldr	r3, [pc, #36]	; (80570 <uart_ops_handler+0x144>)
   8054c:	695b      	ldr	r3, [r3, #20]
   8054e:	4798      	blx	r3
		status = ret < 0 ? READ_EE_ERR : SUCCESS;
   80550:	ea54 0300 	orrs.w	r3, r4, r0
   80554:	d403      	bmi.n	8055e <uart_ops_handler+0x132>
   80556:	2306      	movs	r3, #6
   80558:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   8055c:	e78a      	b.n	80474 <uart_ops_handler+0x48>
		status = ret < 0 ? READ_EE_ERR : SUCCESS;
   8055e:	23d1      	movs	r3, #209	; 0xd1
   80560:	e7fa      	b.n	80558 <uart_ops_handler+0x12c>
		status = COMMAND_ERR;
   80562:	2366      	movs	r3, #102	; 0x66
   80564:	f88d 3006 	strb.w	r3, [sp, #6]
		break;	
   80568:	e784      	b.n	80474 <uart_ops_handler+0x48>
   8056a:	bf00      	nop
   8056c:	200701d8 	.word	0x200701d8
   80570:	2007220c 	.word	0x2007220c
   80574:	400e0800 	.word	0x400e0800

00080578 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
   80578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8057a:	4604      	mov	r4, r0
   8057c:	460f      	mov	r7, r1
   8057e:	4616      	mov	r6, r2
	while (len) {
   80580:	e007      	b.n	80592 <usart_serial_write_packet+0x1a>
   80582:	4629      	mov	r1, r5
   80584:	4620      	mov	r0, r4
   80586:	f000 f8fc 	bl	80782 <uart_write>
   8058a:	2800      	cmp	r0, #0
   8058c:	d1f9      	bne.n	80582 <usart_serial_write_packet+0xa>
		usart_serial_putchar(usart, *data);
		len--;
   8058e:	3e01      	subs	r6, #1
		data++;
   80590:	3701      	adds	r7, #1
	while (len) {
   80592:	b35e      	cbz	r6, 805ec <usart_serial_write_packet+0x74>
		usart_serial_putchar(usart, *data);
   80594:	783d      	ldrb	r5, [r7, #0]
	if (UART == (Uart*)p_usart) {
   80596:	4b16      	ldr	r3, [pc, #88]	; (805f0 <usart_serial_write_packet+0x78>)
   80598:	429c      	cmp	r4, r3
   8059a:	d0f2      	beq.n	80582 <usart_serial_write_packet+0xa>
	if (USART0 == p_usart) {
   8059c:	4b15      	ldr	r3, [pc, #84]	; (805f4 <usart_serial_write_packet+0x7c>)
   8059e:	429c      	cmp	r4, r3
   805a0:	d00f      	beq.n	805c2 <usart_serial_write_packet+0x4a>
	if (USART1 == p_usart) {
   805a2:	4b15      	ldr	r3, [pc, #84]	; (805f8 <usart_serial_write_packet+0x80>)
   805a4:	429c      	cmp	r4, r3
   805a6:	d013      	beq.n	805d0 <usart_serial_write_packet+0x58>
	if (USART2 == p_usart) {
   805a8:	4b14      	ldr	r3, [pc, #80]	; (805fc <usart_serial_write_packet+0x84>)
   805aa:	429c      	cmp	r4, r3
   805ac:	d017      	beq.n	805de <usart_serial_write_packet+0x66>
	if (USART3 == p_usart) {
   805ae:	4b14      	ldr	r3, [pc, #80]	; (80600 <usart_serial_write_packet+0x88>)
   805b0:	429c      	cmp	r4, r3
   805b2:	d1ec      	bne.n	8058e <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   805b4:	4629      	mov	r1, r5
   805b6:	4620      	mov	r0, r4
   805b8:	f000 f8f6 	bl	807a8 <usart_write>
   805bc:	2800      	cmp	r0, #0
   805be:	d1f9      	bne.n	805b4 <usart_serial_write_packet+0x3c>
   805c0:	e7e5      	b.n	8058e <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   805c2:	4629      	mov	r1, r5
   805c4:	4620      	mov	r0, r4
   805c6:	f000 f8ef 	bl	807a8 <usart_write>
   805ca:	2800      	cmp	r0, #0
   805cc:	d1f9      	bne.n	805c2 <usart_serial_write_packet+0x4a>
   805ce:	e7de      	b.n	8058e <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   805d0:	4629      	mov	r1, r5
   805d2:	4620      	mov	r0, r4
   805d4:	f000 f8e8 	bl	807a8 <usart_write>
   805d8:	2800      	cmp	r0, #0
   805da:	d1f9      	bne.n	805d0 <usart_serial_write_packet+0x58>
   805dc:	e7d7      	b.n	8058e <usart_serial_write_packet+0x16>
		while (usart_write(p_usart, c)!=0);
   805de:	4629      	mov	r1, r5
   805e0:	4620      	mov	r0, r4
   805e2:	f000 f8e1 	bl	807a8 <usart_write>
   805e6:	2800      	cmp	r0, #0
   805e8:	d1f9      	bne.n	805de <usart_serial_write_packet+0x66>
   805ea:	e7d0      	b.n	8058e <usart_serial_write_packet+0x16>
	}
	return STATUS_OK;
}
   805ec:	2000      	movs	r0, #0
   805ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   805f0:	400e0800 	.word	0x400e0800
   805f4:	40098000 	.word	0x40098000
   805f8:	4009c000 	.word	0x4009c000
   805fc:	400a0000 	.word	0x400a0000
   80600:	400a4000 	.word	0x400a4000

00080604 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len, uint8_t timeout)
{
   80604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80608:	b082      	sub	sp, #8
   8060a:	4604      	mov	r4, r0
   8060c:	460d      	mov	r5, r1
   8060e:	4617      	mov	r7, r2
   80610:	4698      	mov	r8, r3
	int status = 0;
	
	while (len) {
   80612:	e031      	b.n	80678 <usart_serial_read_packet+0x74>
	if (UART == (Uart*)p_usart) {
   80614:	4e2a      	ldr	r6, [pc, #168]	; (806c0 <usart_serial_read_packet+0xbc>)
		while (uart_read((Uart*)p_usart, data)) {
   80616:	4629      	mov	r1, r5
   80618:	4620      	mov	r0, r4
   8061a:	f000 f8bb 	bl	80794 <uart_read>
   8061e:	b138      	cbz	r0, 80630 <usart_serial_read_packet+0x2c>
			if (timeout != 0) {
   80620:	f1b8 0f00 	cmp.w	r8, #0
   80624:	d0f7      	beq.n	80616 <usart_serial_read_packet+0x12>
				if (--times <= 0) {
   80626:	3e01      	subs	r6, #1
   80628:	d1f5      	bne.n	80616 <usart_serial_read_packet+0x12>
					status = ERR_TIMEOUT;
   8062a:	f06f 0602 	mvn.w	r6, #2
   8062e:	e02a      	b.n	80686 <usart_serial_read_packet+0x82>
	status_code_t status = STATUS_OK;
   80630:	2600      	movs	r6, #0
   80632:	e028      	b.n	80686 <usart_serial_read_packet+0x82>
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_read(p_usart, &val));
   80634:	a901      	add	r1, sp, #4
   80636:	4620      	mov	r0, r4
   80638:	f000 f8c1 	bl	807be <usart_read>
   8063c:	2800      	cmp	r0, #0
   8063e:	d1f9      	bne.n	80634 <usart_serial_read_packet+0x30>
		*data = (uint8_t)(val & 0xFF);
   80640:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80644:	702b      	strb	r3, [r5, #0]
   80646:	e021      	b.n	8068c <usart_serial_read_packet+0x88>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_read(p_usart, &val));
   80648:	a901      	add	r1, sp, #4
   8064a:	4620      	mov	r0, r4
   8064c:	f000 f8b7 	bl	807be <usart_read>
   80650:	2800      	cmp	r0, #0
   80652:	d1f9      	bne.n	80648 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80654:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80658:	702b      	strb	r3, [r5, #0]
   8065a:	e01a      	b.n	80692 <usart_serial_read_packet+0x8e>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_read(p_usart, &val));
   8065c:	a901      	add	r1, sp, #4
   8065e:	4620      	mov	r0, r4
   80660:	f000 f8ad 	bl	807be <usart_read>
   80664:	2800      	cmp	r0, #0
   80666:	d1f9      	bne.n	8065c <usart_serial_read_packet+0x58>
		*data = (uint8_t)(val & 0xFF);
   80668:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8066c:	702b      	strb	r3, [r5, #0]
   8066e:	e013      	b.n	80698 <usart_serial_read_packet+0x94>
		status = usart_serial_getchar(usart, data, timeout);
		if (status < 0)
   80670:	2e00      	cmp	r6, #0
   80672:	db22      	blt.n	806ba <usart_serial_read_packet+0xb6>
			return ERR_TIMEOUT;
		len--;
   80674:	3f01      	subs	r7, #1
		data++;
   80676:	3501      	adds	r5, #1
	while (len) {
   80678:	b1df      	cbz	r7, 806b2 <usart_serial_read_packet+0xae>
	uint32_t val = 0;
   8067a:	2300      	movs	r3, #0
   8067c:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8067e:	4b11      	ldr	r3, [pc, #68]	; (806c4 <usart_serial_read_packet+0xc0>)
   80680:	429c      	cmp	r4, r3
   80682:	d0c7      	beq.n	80614 <usart_serial_read_packet+0x10>
	status_code_t status = STATUS_OK;
   80684:	2600      	movs	r6, #0
	if (USART0 == p_usart) {
   80686:	4b10      	ldr	r3, [pc, #64]	; (806c8 <usart_serial_read_packet+0xc4>)
   80688:	429c      	cmp	r4, r3
   8068a:	d0d3      	beq.n	80634 <usart_serial_read_packet+0x30>
	if (USART1 == p_usart) {
   8068c:	4b0f      	ldr	r3, [pc, #60]	; (806cc <usart_serial_read_packet+0xc8>)
   8068e:	429c      	cmp	r4, r3
   80690:	d0da      	beq.n	80648 <usart_serial_read_packet+0x44>
	if (USART2 == p_usart) {
   80692:	4b0f      	ldr	r3, [pc, #60]	; (806d0 <usart_serial_read_packet+0xcc>)
   80694:	429c      	cmp	r4, r3
   80696:	d0e1      	beq.n	8065c <usart_serial_read_packet+0x58>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80698:	4b0e      	ldr	r3, [pc, #56]	; (806d4 <usart_serial_read_packet+0xd0>)
   8069a:	429c      	cmp	r4, r3
   8069c:	d1e8      	bne.n	80670 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8069e:	a901      	add	r1, sp, #4
   806a0:	4620      	mov	r0, r4
   806a2:	f000 f88c 	bl	807be <usart_read>
   806a6:	2800      	cmp	r0, #0
   806a8:	d1f9      	bne.n	8069e <usart_serial_read_packet+0x9a>
		*data = (uint8_t)(val & 0xFF);
   806aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   806ae:	702b      	strb	r3, [r5, #0]
   806b0:	e7de      	b.n	80670 <usart_serial_read_packet+0x6c>
	}
	return STATUS_OK;
   806b2:	2000      	movs	r0, #0
}
   806b4:	b002      	add	sp, #8
   806b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ERR_TIMEOUT;
   806ba:	f06f 0002 	mvn.w	r0, #2
   806be:	e7f9      	b.n	806b4 <usart_serial_read_packet+0xb0>
   806c0:	0007a120 	.word	0x0007a120
   806c4:	400e0800 	.word	0x400e0800
   806c8:	40098000 	.word	0x40098000
   806cc:	4009c000 	.word	0x4009c000
   806d0:	400a0000 	.word	0x400a0000
   806d4:	400a4000 	.word	0x400a4000

000806d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   806d8:	b570      	push	{r4, r5, r6, lr}
   806da:	460d      	mov	r5, r1
   806dc:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
   806de:	4606      	mov	r6, r0
   806e0:	b158      	cbz	r0, 806fa <_read+0x22>
		return -1;
   806e2:	f04f 36ff 	mov.w	r6, #4294967295
   806e6:	e00a      	b.n	806fe <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   806e8:	4b06      	ldr	r3, [pc, #24]	; (80704 <_read+0x2c>)
   806ea:	6818      	ldr	r0, [r3, #0]
   806ec:	4b06      	ldr	r3, [pc, #24]	; (80708 <_read+0x30>)
   806ee:	681b      	ldr	r3, [r3, #0]
   806f0:	4629      	mov	r1, r5
   806f2:	4798      	blx	r3
		ptr++;
   806f4:	3501      	adds	r5, #1
		nChars++;
   806f6:	3601      	adds	r6, #1
	for (; len > 0; --len) {
   806f8:	3c01      	subs	r4, #1
   806fa:	2c00      	cmp	r4, #0
   806fc:	dcf4      	bgt.n	806e8 <_read+0x10>
	}
	return nChars;
}
   806fe:	4630      	mov	r0, r6
   80700:	bd70      	pop	{r4, r5, r6, pc}
   80702:	bf00      	nop
   80704:	20072b50 	.word	0x20072b50
   80708:	20072b48 	.word	0x20072b48

0008070c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8070c:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8070e:	3801      	subs	r0, #1
   80710:	2802      	cmp	r0, #2
   80712:	d80f      	bhi.n	80734 <_write+0x28>
   80714:	4614      	mov	r4, r2
   80716:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
   80718:	b18c      	cbz	r4, 8073e <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8071a:	4b0a      	ldr	r3, [pc, #40]	; (80744 <_write+0x38>)
   8071c:	6818      	ldr	r0, [r3, #0]
   8071e:	1c4e      	adds	r6, r1, #1
   80720:	4b09      	ldr	r3, [pc, #36]	; (80748 <_write+0x3c>)
   80722:	681b      	ldr	r3, [r3, #0]
   80724:	7809      	ldrb	r1, [r1, #0]
   80726:	4798      	blx	r3
   80728:	2800      	cmp	r0, #0
   8072a:	db06      	blt.n	8073a <_write+0x2e>
			return -1;
		}
		++nChars;
   8072c:	3501      	adds	r5, #1
	for (; len != 0; --len) {
   8072e:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80730:	4631      	mov	r1, r6
   80732:	e7f1      	b.n	80718 <_write+0xc>
		return -1;
   80734:	f04f 35ff 	mov.w	r5, #4294967295
   80738:	e001      	b.n	8073e <_write+0x32>
			return -1;
   8073a:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
   8073e:	4628      	mov	r0, r5
   80740:	bd70      	pop	{r4, r5, r6, pc}
   80742:	bf00      	nop
   80744:	20072b50 	.word	0x20072b50
   80748:	20072b4c 	.word	0x20072b4c

0008074c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8074c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8074e:	23ac      	movs	r3, #172	; 0xac
   80750:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80752:	680b      	ldr	r3, [r1, #0]
   80754:	684a      	ldr	r2, [r1, #4]
   80756:	fbb3 f3f2 	udiv	r3, r3, r2
   8075a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8075c:	1e5c      	subs	r4, r3, #1
   8075e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80762:	4294      	cmp	r4, r2
   80764:	d80b      	bhi.n	8077e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80766:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80768:	688b      	ldr	r3, [r1, #8]
   8076a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8076c:	f240 2302 	movw	r3, #514	; 0x202
   80770:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80774:	2350      	movs	r3, #80	; 0x50
   80776:	6003      	str	r3, [r0, #0]

	return 0;
   80778:	2000      	movs	r0, #0
}
   8077a:	bc10      	pop	{r4}
   8077c:	4770      	bx	lr
		return 1;
   8077e:	2001      	movs	r0, #1
   80780:	e7fb      	b.n	8077a <uart_init+0x2e>

00080782 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80782:	6943      	ldr	r3, [r0, #20]
   80784:	f013 0f02 	tst.w	r3, #2
   80788:	d002      	beq.n	80790 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8078a:	61c1      	str	r1, [r0, #28]
	return 0;
   8078c:	2000      	movs	r0, #0
   8078e:	4770      	bx	lr
		return 1;
   80790:	2001      	movs	r0, #1
}
   80792:	4770      	bx	lr

00080794 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80794:	6943      	ldr	r3, [r0, #20]
   80796:	f013 0f01 	tst.w	r3, #1
   8079a:	d003      	beq.n	807a4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8079c:	6983      	ldr	r3, [r0, #24]
   8079e:	700b      	strb	r3, [r1, #0]
	return 0;
   807a0:	2000      	movs	r0, #0
   807a2:	4770      	bx	lr
		return 1;
   807a4:	2001      	movs	r0, #1
}
   807a6:	4770      	bx	lr

000807a8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   807a8:	6943      	ldr	r3, [r0, #20]
   807aa:	f013 0f02 	tst.w	r3, #2
   807ae:	d004      	beq.n	807ba <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   807b0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   807b4:	61c1      	str	r1, [r0, #28]
	return 0;
   807b6:	2000      	movs	r0, #0
   807b8:	4770      	bx	lr
		return 1;
   807ba:	2001      	movs	r0, #1
}
   807bc:	4770      	bx	lr

000807be <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   807be:	6943      	ldr	r3, [r0, #20]
   807c0:	f013 0f01 	tst.w	r3, #1
   807c4:	d005      	beq.n	807d2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   807c6:	6983      	ldr	r3, [r0, #24]
   807c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   807cc:	600b      	str	r3, [r1, #0]

	return 0;
   807ce:	2000      	movs	r0, #0
   807d0:	4770      	bx	lr
		return 1;
   807d2:	2001      	movs	r0, #1
}
   807d4:	4770      	bx	lr

000807d6 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   807d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   807da:	6043      	str	r3, [r0, #4]
   807dc:	4770      	bx	lr
	...

000807e0 <recv_byte>:
{
	static unsigned int bit = 0;
	static unsigned char data = 0;
	
	/* check if bits is error */
	if (bit >= MDI_RCV_BITS)
   807e0:	4b3b      	ldr	r3, [pc, #236]	; (808d0 <recv_byte+0xf0>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	2b08      	cmp	r3, #8
   807e6:	d902      	bls.n	807ee <recv_byte+0xe>
		bit = 0;
   807e8:	2200      	movs	r2, #0
   807ea:	4b39      	ldr	r3, [pc, #228]	; (808d0 <recv_byte+0xf0>)
   807ec:	601a      	str	r2, [r3, #0]
	
	if (mdi.status == INIT)	{
   807ee:	4b39      	ldr	r3, [pc, #228]	; (808d4 <recv_byte+0xf4>)
   807f0:	785b      	ldrb	r3, [r3, #1]
   807f2:	2b09      	cmp	r3, #9
   807f4:	d01f      	beq.n	80836 <recv_byte+0x56>
{
   807f6:	b510      	push	{r4, lr}
   807f8:	b082      	sub	sp, #8
		bit = 0;
		return data;
	}
	
	/* bit 0 is start bit */
	if (bit == 0) {
   807fa:	4b35      	ldr	r3, [pc, #212]	; (808d0 <recv_byte+0xf0>)
   807fc:	681b      	ldr	r3, [r3, #0]
   807fe:	bb1b      	cbnz	r3, 80848 <recv_byte+0x68>
		delay_us(5);
   80800:	201e      	movs	r0, #30
   80802:	f002 fbd5 	bl	82fb0 <__portable_delay_cycles_veneer>
		pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80806:	2201      	movs	r2, #1
   80808:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8080c:	4832      	ldr	r0, [pc, #200]	; (808d8 <recv_byte+0xf8>)
   8080e:	f000 fcbe 	bl	8118e <pio_set_input>
		mdi.status = BUSY;
   80812:	220b      	movs	r2, #11
   80814:	4b2f      	ldr	r3, [pc, #188]	; (808d4 <recv_byte+0xf4>)
   80816:	705a      	strb	r2, [r3, #1]
		data = 0;
   80818:	2300      	movs	r3, #0
   8081a:	4a30      	ldr	r2, [pc, #192]	; (808dc <recv_byte+0xfc>)
   8081c:	7013      	strb	r3, [r2, #0]
		bit = 0;
   8081e:	4a2c      	ldr	r2, [pc, #176]	; (808d0 <recv_byte+0xf0>)
   80820:	6013      	str	r3, [r2, #0]
		pio_clear(PIOA, PIO_PA14);
		pio_set(PIOA, PIO_PA14);
	}
	
	/* check if one byte received */
	if (++bit >= MDI_RCV_BITS) {
   80822:	4a2b      	ldr	r2, [pc, #172]	; (808d0 <recv_byte+0xf0>)
   80824:	6813      	ldr	r3, [r2, #0]
   80826:	3301      	adds	r3, #1
   80828:	6013      	str	r3, [r2, #0]
   8082a:	2b08      	cmp	r3, #8
   8082c:	d827      	bhi.n	8087e <recv_byte+0x9e>
		pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
		delay_us(5);
		mdi.status = DONE;
	}
	
	return data;	
   8082e:	4b2b      	ldr	r3, [pc, #172]	; (808dc <recv_byte+0xfc>)
   80830:	7818      	ldrb	r0, [r3, #0]
}
   80832:	b002      	add	sp, #8
   80834:	bd10      	pop	{r4, pc}
		mdi.status = IDLE;
   80836:	220a      	movs	r2, #10
   80838:	4b26      	ldr	r3, [pc, #152]	; (808d4 <recv_byte+0xf4>)
   8083a:	705a      	strb	r2, [r3, #1]
		bit = 0;
   8083c:	2200      	movs	r2, #0
   8083e:	4b24      	ldr	r3, [pc, #144]	; (808d0 <recv_byte+0xf0>)
   80840:	601a      	str	r2, [r3, #0]
		return data;
   80842:	4b26      	ldr	r3, [pc, #152]	; (808dc <recv_byte+0xfc>)
   80844:	7818      	ldrb	r0, [r3, #0]
   80846:	4770      	bx	lr
		data |= pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB26) << (bit - 1);
   80848:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8084c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80850:	4821      	ldr	r0, [pc, #132]	; (808d8 <recv_byte+0xf8>)
   80852:	f000 fc51 	bl	810f8 <pio_get>
   80856:	4b1e      	ldr	r3, [pc, #120]	; (808d0 <recv_byte+0xf0>)
   80858:	681b      	ldr	r3, [r3, #0]
   8085a:	3b01      	subs	r3, #1
   8085c:	4098      	lsls	r0, r3
   8085e:	4a1f      	ldr	r2, [pc, #124]	; (808dc <recv_byte+0xfc>)
   80860:	7813      	ldrb	r3, [r2, #0]
   80862:	4318      	orrs	r0, r3
   80864:	7010      	strb	r0, [r2, #0]
		pio_clear(PIOA, PIO_PA14);
   80866:	4c1e      	ldr	r4, [pc, #120]	; (808e0 <recv_byte+0x100>)
   80868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8086c:	4620      	mov	r0, r4
   8086e:	f000 fc41 	bl	810f4 <pio_clear>
		pio_set(PIOA, PIO_PA14);
   80872:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80876:	4620      	mov	r0, r4
   80878:	f000 fc3a 	bl	810f0 <pio_set>
   8087c:	e7d1      	b.n	80822 <recv_byte+0x42>
	unsigned long timeout = 0;
   8087e:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   80880:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80884:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80888:	4815      	ldr	r0, [pc, #84]	; (808e0 <recv_byte+0x100>)
   8088a:	f000 fc35 	bl	810f8 <pio_get>
   8088e:	2801      	cmp	r0, #1
   80890:	d109      	bne.n	808a6 <recv_byte+0xc6>
		delay_us(1);
   80892:	2006      	movs	r0, #6
   80894:	f002 fb8c 	bl	82fb0 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   80898:	3401      	adds	r4, #1
   8089a:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   8089e:	d3ef      	bcc.n	80880 <recv_byte+0xa0>
			return -1;
   808a0:	f04f 33ff 	mov.w	r3, #4294967295
   808a4:	e000      	b.n	808a8 <recv_byte+0xc8>
	return 0;
   808a6:	2300      	movs	r3, #0
		if (wait_mscl_low() < 0)
   808a8:	2b00      	cmp	r3, #0
   808aa:	da01      	bge.n	808b0 <recv_byte+0xd0>
			return -1;
   808ac:	20ff      	movs	r0, #255	; 0xff
   808ae:	e7c0      	b.n	80832 <recv_byte+0x52>
		pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
   808b0:	2201      	movs	r2, #1
   808b2:	9200      	str	r2, [sp, #0]
   808b4:	2300      	movs	r3, #0
   808b6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   808ba:	4807      	ldr	r0, [pc, #28]	; (808d8 <recv_byte+0xf8>)
   808bc:	f000 fc87 	bl	811ce <pio_set_output>
		delay_us(5);
   808c0:	201e      	movs	r0, #30
   808c2:	f002 fb75 	bl	82fb0 <__portable_delay_cycles_veneer>
		mdi.status = DONE;
   808c6:	220c      	movs	r2, #12
   808c8:	4b02      	ldr	r3, [pc, #8]	; (808d4 <recv_byte+0xf4>)
   808ca:	705a      	strb	r2, [r3, #1]
   808cc:	e7af      	b.n	8082e <recv_byte+0x4e>
   808ce:	bf00      	nop
   808d0:	20072a90 	.word	0x20072a90
   808d4:	200701d8 	.word	0x200701d8
   808d8:	400e1000 	.word	0x400e1000
   808dc:	20072a98 	.word	0x20072a98
   808e0:	400e0e00 	.word	0x400e0e00

000808e4 <send_byte>:
 *
 * return 0: success -1:error
 * send data called by external interrupt handler
 */
static int send_byte(unsigned char data)
{
   808e4:	b538      	push	{r3, r4, r5, lr}
   808e6:	4605      	mov	r5, r0
	static unsigned int bit = 0;
	
	/* check if bits is error */
	if (bit >= MDI_SND_BITS)
   808e8:	4b33      	ldr	r3, [pc, #204]	; (809b8 <send_byte+0xd4>)
   808ea:	681b      	ldr	r3, [r3, #0]
   808ec:	2b07      	cmp	r3, #7
   808ee:	d902      	bls.n	808f6 <send_byte+0x12>
		bit = 0;
   808f0:	2200      	movs	r2, #0
   808f2:	4b31      	ldr	r3, [pc, #196]	; (809b8 <send_byte+0xd4>)
   808f4:	601a      	str	r2, [r3, #0]
	
	if (mdi.status == IDLE)	{
   808f6:	4b31      	ldr	r3, [pc, #196]	; (809bc <send_byte+0xd8>)
   808f8:	785b      	ldrb	r3, [r3, #1]
   808fa:	2b0a      	cmp	r3, #10
   808fc:	d01e      	beq.n	8093c <send_byte+0x58>
		mdi.status = BUSY;
		bit = 0;
	}
	
	/* send the first bit */
	if (bit == 0) {
   808fe:	4b2e      	ldr	r3, [pc, #184]	; (809b8 <send_byte+0xd4>)
   80900:	681b      	ldr	r3, [r3, #0]
   80902:	b93b      	cbnz	r3, 80914 <send_byte+0x30>
		if ((data & 0x01) != 0)
   80904:	f015 0f01 	tst.w	r5, #1
   80908:	d01f      	beq.n	8094a <send_byte+0x66>
			pio_set(PIOB, PIO_PB26);
   8090a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8090e:	482c      	ldr	r0, [pc, #176]	; (809c0 <send_byte+0xdc>)
   80910:	f000 fbee 	bl	810f0 <pio_set>
	unsigned long timeout = 0;
   80914:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   80916:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8091a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8091e:	4829      	ldr	r0, [pc, #164]	; (809c4 <send_byte+0xe0>)
   80920:	f000 fbea 	bl	810f8 <pio_get>
   80924:	2801      	cmp	r0, #1
   80926:	d116      	bne.n	80956 <send_byte+0x72>
		delay_us(1);
   80928:	2006      	movs	r0, #6
   8092a:	f002 fb41 	bl	82fb0 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   8092e:	3401      	adds	r4, #1
   80930:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   80934:	d3ef      	bcc.n	80916 <send_byte+0x32>
			return -1;
   80936:	f04f 33ff 	mov.w	r3, #4294967295
   8093a:	e00d      	b.n	80958 <send_byte+0x74>
		mdi.status = BUSY;
   8093c:	220b      	movs	r2, #11
   8093e:	4b1f      	ldr	r3, [pc, #124]	; (809bc <send_byte+0xd8>)
   80940:	705a      	strb	r2, [r3, #1]
		bit = 0;
   80942:	2200      	movs	r2, #0
   80944:	4b1c      	ldr	r3, [pc, #112]	; (809b8 <send_byte+0xd4>)
   80946:	601a      	str	r2, [r3, #0]
   80948:	e7d9      	b.n	808fe <send_byte+0x1a>
		else
			pio_clear(PIOB, PIO_PB26);
   8094a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8094e:	481c      	ldr	r0, [pc, #112]	; (809c0 <send_byte+0xdc>)
   80950:	f000 fbd0 	bl	810f4 <pio_clear>
   80954:	e7de      	b.n	80914 <send_byte+0x30>
	return 0;
   80956:	2300      	movs	r3, #0
	}
	
	if (wait_mscl_low() < 0)
   80958:	2b00      	cmp	r3, #0
   8095a:	db29      	blt.n	809b0 <send_byte+0xcc>
		return -1;

	/* send the other bits */
	if (bit < (MDI_SND_BITS - 1)) {
   8095c:	4b16      	ldr	r3, [pc, #88]	; (809b8 <send_byte+0xd4>)
   8095e:	681b      	ldr	r3, [r3, #0]
   80960:	2b06      	cmp	r3, #6
   80962:	d80a      	bhi.n	8097a <send_byte+0x96>
		if ((data >> (bit + 1) & 0x01) != 0)
   80964:	3301      	adds	r3, #1
   80966:	fa45 f303 	asr.w	r3, r5, r3
   8096a:	f013 0f01 	tst.w	r3, #1
   8096e:	d00c      	beq.n	8098a <send_byte+0xa6>
			pio_set(PIOB, PIO_PB26);
   80970:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80974:	4812      	ldr	r0, [pc, #72]	; (809c0 <send_byte+0xdc>)
   80976:	f000 fbbb 	bl	810f0 <pio_set>
		else
			pio_clear(PIOB, PIO_PB26);
	}
	
	/* check if one byte sent */
	if (++bit >= MDI_SND_BITS) {
   8097a:	4a0f      	ldr	r2, [pc, #60]	; (809b8 <send_byte+0xd4>)
   8097c:	6813      	ldr	r3, [r2, #0]
   8097e:	3301      	adds	r3, #1
   80980:	6013      	str	r3, [r2, #0]
   80982:	2b07      	cmp	r3, #7
   80984:	d807      	bhi.n	80996 <send_byte+0xb2>
		pio_set(PIOB, PIO_PB26);
		delay_us(500);
		mdi.status = DONE;
	}
	
	return data;	
   80986:	4628      	mov	r0, r5
   80988:	bd38      	pop	{r3, r4, r5, pc}
			pio_clear(PIOB, PIO_PB26);
   8098a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8098e:	480c      	ldr	r0, [pc, #48]	; (809c0 <send_byte+0xdc>)
   80990:	f000 fbb0 	bl	810f4 <pio_clear>
   80994:	e7f1      	b.n	8097a <send_byte+0x96>
		pio_set(PIOB, PIO_PB26);
   80996:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8099a:	4809      	ldr	r0, [pc, #36]	; (809c0 <send_byte+0xdc>)
   8099c:	f000 fba8 	bl	810f0 <pio_set>
		delay_us(500);
   809a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
   809a4:	f002 fb04 	bl	82fb0 <__portable_delay_cycles_veneer>
		mdi.status = DONE;
   809a8:	220c      	movs	r2, #12
   809aa:	4b04      	ldr	r3, [pc, #16]	; (809bc <send_byte+0xd8>)
   809ac:	705a      	strb	r2, [r3, #1]
   809ae:	e7ea      	b.n	80986 <send_byte+0xa2>
		return -1;
   809b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   809b4:	bd38      	pop	{r3, r4, r5, pc}
   809b6:	bf00      	nop
   809b8:	20072a94 	.word	0x20072a94
   809bc:	200701d8 	.word	0x200701d8
   809c0:	400e1000 	.word	0x400e1000
   809c4:	400e0e00 	.word	0x400e0e00

000809c8 <enter_monitor_mode>:
{
   809c8:	b570      	push	{r4, r5, r6, lr}
   809ca:	b082      	sub	sp, #8

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   809cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   809d0:	4b3a      	ldr	r3, [pc, #232]	; (80abc <enter_monitor_mode+0xf4>)
   809d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pio_clear(PIOA, PIO_PA19);
   809d6:	4d3a      	ldr	r5, [pc, #232]	; (80ac0 <enter_monitor_mode+0xf8>)
   809d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   809dc:	4628      	mov	r0, r5
   809de:	f000 fb89 	bl	810f4 <pio_clear>
	delay_ms(100);
   809e2:	4e38      	ldr	r6, [pc, #224]	; (80ac4 <enter_monitor_mode+0xfc>)
   809e4:	4630      	mov	r0, r6
   809e6:	f002 fae3 	bl	82fb0 <__portable_delay_cycles_veneer>
	pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
   809ea:	4c37      	ldr	r4, [pc, #220]	; (80ac8 <enter_monitor_mode+0x100>)
   809ec:	2301      	movs	r3, #1
   809ee:	9300      	str	r3, [sp, #0]
   809f0:	2300      	movs	r3, #0
   809f2:	461a      	mov	r2, r3
   809f4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   809f8:	4620      	mov	r0, r4
   809fa:	f000 fbe8 	bl	811ce <pio_set_output>
	delay_ms(100);
   809fe:	4630      	mov	r0, r6
   80a00:	f002 fad6 	bl	82fb0 <__portable_delay_cycles_veneer>
	pio_set(PIOA, PIO_PA19);	
   80a04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   80a08:	4628      	mov	r0, r5
   80a0a:	f000 fb71 	bl	810f0 <pio_set>
	delay_us(650);
   80a0e:	f640 703c 	movw	r0, #3900	; 0xf3c
   80a12:	f002 facd 	bl	82fb0 <__portable_delay_cycles_veneer>
	pio_set(PIOB, PIO_PB26);
   80a16:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80a1a:	4620      	mov	r0, r4
   80a1c:	f000 fb68 	bl	810f0 <pio_set>
	unsigned long timeout = 0;
   80a20:	2400      	movs	r4, #0
	while(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA15) == 1) {
   80a22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80a26:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80a2a:	4825      	ldr	r0, [pc, #148]	; (80ac0 <enter_monitor_mode+0xf8>)
   80a2c:	f000 fb64 	bl	810f8 <pio_get>
   80a30:	2801      	cmp	r0, #1
   80a32:	d109      	bne.n	80a48 <enter_monitor_mode+0x80>
		delay_us(1);
   80a34:	2006      	movs	r0, #6
   80a36:	f002 fabb 	bl	82fb0 <__portable_delay_cycles_veneer>
		if (++timeout >= TIMEOUT_MSCL_LOW)
   80a3a:	3401      	adds	r4, #1
   80a3c:	f5b4 6f88 	cmp.w	r4, #1088	; 0x440
   80a40:	d3ef      	bcc.n	80a22 <enter_monitor_mode+0x5a>
			return -1;
   80a42:	f04f 33ff 	mov.w	r3, #4294967295
   80a46:	e000      	b.n	80a4a <enter_monitor_mode+0x82>
	return 0;
   80a48:	2300      	movs	r3, #0
	if (wait_mscl_low() < 0)
   80a4a:	2b00      	cmp	r3, #0
   80a4c:	db2f      	blt.n	80aae <enter_monitor_mode+0xe6>
	delay_us(2);
   80a4e:	200c      	movs	r0, #12
   80a50:	f002 faae 	bl	82fb0 <__portable_delay_cycles_veneer>
	pio_clear(PIOB, PIO_PB26);
   80a54:	4c1c      	ldr	r4, [pc, #112]	; (80ac8 <enter_monitor_mode+0x100>)
   80a56:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80a5a:	4620      	mov	r0, r4
   80a5c:	f000 fb4a 	bl	810f4 <pio_clear>
	mdi.status = INIT;
   80a60:	2209      	movs	r2, #9
   80a62:	4b1a      	ldr	r3, [pc, #104]	; (80acc <enter_monitor_mode+0x104>)
   80a64:	705a      	strb	r2, [r3, #1]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80a6a:	4b14      	ldr	r3, [pc, #80]	; (80abc <enter_monitor_mode+0xf4>)
   80a6c:	601a      	str	r2, [r3, #0]
	delay_us(10);
   80a6e:	203c      	movs	r0, #60	; 0x3c
   80a70:	f002 fa9e 	bl	82fb0 <__portable_delay_cycles_veneer>
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80a74:	2201      	movs	r2, #1
   80a76:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80a7a:	4620      	mov	r0, r4
   80a7c:	f000 fb87 	bl	8118e <pio_set_input>
	timeout = 0;
   80a80:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80a82:	4b12      	ldr	r3, [pc, #72]	; (80acc <enter_monitor_mode+0x104>)
   80a84:	785b      	ldrb	r3, [r3, #1]
   80a86:	2b0c      	cmp	r3, #12
   80a88:	d007      	beq.n	80a9a <enter_monitor_mode+0xd2>
		if (++timeout >= TIMEOUT_DEV_ACK)
   80a8a:	3401      	adds	r4, #1
   80a8c:	4b10      	ldr	r3, [pc, #64]	; (80ad0 <enter_monitor_mode+0x108>)
   80a8e:	429c      	cmp	r4, r3
   80a90:	d810      	bhi.n	80ab4 <enter_monitor_mode+0xec>
		delay_us(1);
   80a92:	2006      	movs	r0, #6
   80a94:	f002 fa8c 	bl	82fb0 <__portable_delay_cycles_veneer>
   80a98:	e7f3      	b.n	80a82 <enter_monitor_mode+0xba>
	if (mdi.data[0] != DEV_ACK)
   80a9a:	4b0c      	ldr	r3, [pc, #48]	; (80acc <enter_monitor_mode+0x104>)
   80a9c:	795b      	ldrb	r3, [r3, #5]
   80a9e:	2b55      	cmp	r3, #85	; 0x55
   80aa0:	d102      	bne.n	80aa8 <enter_monitor_mode+0xe0>
	return 0;
   80aa2:	2000      	movs	r0, #0
}
   80aa4:	b002      	add	sp, #8
   80aa6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   80aa8:	f04f 30ff 	mov.w	r0, #4294967295
   80aac:	e7fa      	b.n	80aa4 <enter_monitor_mode+0xdc>
		return -1;
   80aae:	f04f 30ff 	mov.w	r0, #4294967295
   80ab2:	e7f7      	b.n	80aa4 <enter_monitor_mode+0xdc>
			return -1;
   80ab4:	f04f 30ff 	mov.w	r0, #4294967295
   80ab8:	e7f4      	b.n	80aa4 <enter_monitor_mode+0xdc>
   80aba:	bf00      	nop
   80abc:	e000e100 	.word	0xe000e100
   80ac0:	400e0e00 	.word	0x400e0e00
   80ac4:	000927c0 	.word	0x000927c0
   80ac8:	400e1000 	.word	0x400e1000
   80acc:	200701d8 	.word	0x200701d8
   80ad0:	00030d3f 	.word	0x00030d3f

00080ad4 <send_data>:
 *
 * return 0: success -1:error
 * send data via external interrupt
 */
int send_data(unsigned char command, unsigned para, unsigned long len)
{				
   80ad4:	b570      	push	{r4, r5, r6, lr}
   80ad6:	b082      	sub	sp, #8
   80ad8:	4616      	mov	r6, r2
	mdi.command = command;
   80ada:	4b20      	ldr	r3, [pc, #128]	; (80b5c <send_data+0x88>)
   80adc:	7158      	strb	r0, [r3, #5]
	mdi.para = para;
   80ade:	7199      	strb	r1, [r3, #6]
		
	if (mdi.type == RECV)
   80ae0:	781b      	ldrb	r3, [r3, #0]
   80ae2:	2b10      	cmp	r3, #16
   80ae4:	d001      	beq.n	80aea <send_data+0x16>
	return 0;
   80ae6:	2500      	movs	r5, #0
   80ae8:	e00e      	b.n	80b08 <send_data+0x34>
		delay_us(500);
   80aea:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80aee:	f002 fa5f 	bl	82fb0 <__portable_delay_cycles_veneer>
   80af2:	e7f8      	b.n	80ae6 <send_data+0x12>
	return 0;
   80af4:	2300      	movs	r3, #0
		
	for (unsigned long i = 0; i < len; i++) {
		mdi.type = SEND;
		mdi.status = IDLE;
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);	
		if (wait_ops_done() < 0)
   80af6:	2b00      	cmp	r3, #0
   80af8:	db2c      	blt.n	80b54 <send_data+0x80>
			return -1;
		mdi.transfer = i + 1;
   80afa:	3501      	adds	r5, #1
   80afc:	f242 0330 	movw	r3, #8240	; 0x2030
   80b00:	4a16      	ldr	r2, [pc, #88]	; (80b5c <send_data+0x88>)
   80b02:	50d5      	str	r5, [r2, r3]
		if (mdi.transfer >= len)
   80b04:	42ae      	cmp	r6, r5
   80b06:	d91f      	bls.n	80b48 <send_data+0x74>
	for (unsigned long i = 0; i < len; i++) {
   80b08:	42b5      	cmp	r5, r6
   80b0a:	d220      	bcs.n	80b4e <send_data+0x7a>
		mdi.type = SEND;
   80b0c:	4b13      	ldr	r3, [pc, #76]	; (80b5c <send_data+0x88>)
   80b0e:	2220      	movs	r2, #32
   80b10:	701a      	strb	r2, [r3, #0]
		mdi.status = IDLE;
   80b12:	220a      	movs	r2, #10
   80b14:	705a      	strb	r2, [r3, #1]
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);	
   80b16:	2301      	movs	r3, #1
   80b18:	9300      	str	r3, [sp, #0]
   80b1a:	2300      	movs	r3, #0
   80b1c:	461a      	mov	r2, r3
   80b1e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80b22:	480f      	ldr	r0, [pc, #60]	; (80b60 <send_data+0x8c>)
   80b24:	f000 fb53 	bl	811ce <pio_set_output>
	unsigned long timeout = 0;
   80b28:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80b2a:	4b0c      	ldr	r3, [pc, #48]	; (80b5c <send_data+0x88>)
   80b2c:	785b      	ldrb	r3, [r3, #1]
   80b2e:	2b0c      	cmp	r3, #12
   80b30:	d0e0      	beq.n	80af4 <send_data+0x20>
		if (++timeout >= TIMEOUT_OPS_DONE)
   80b32:	3401      	adds	r4, #1
   80b34:	4b0b      	ldr	r3, [pc, #44]	; (80b64 <send_data+0x90>)
   80b36:	429c      	cmp	r4, r3
   80b38:	d803      	bhi.n	80b42 <send_data+0x6e>
		delay_us(1);
   80b3a:	2006      	movs	r0, #6
   80b3c:	f002 fa38 	bl	82fb0 <__portable_delay_cycles_veneer>
   80b40:	e7f3      	b.n	80b2a <send_data+0x56>
		return -1;
   80b42:	f04f 33ff 	mov.w	r3, #4294967295
   80b46:	e7d6      	b.n	80af6 <send_data+0x22>
			mdi.transfer = 0;
   80b48:	2100      	movs	r1, #0
   80b4a:	50d1      	str	r1, [r2, r3]
   80b4c:	e7dc      	b.n	80b08 <send_data+0x34>
	}
	
	return 0;
   80b4e:	2000      	movs	r0, #0
}
   80b50:	b002      	add	sp, #8
   80b52:	bd70      	pop	{r4, r5, r6, pc}
			return -1;
   80b54:	f04f 30ff 	mov.w	r0, #4294967295
   80b58:	e7fa      	b.n	80b50 <send_data+0x7c>
   80b5a:	bf00      	nop
   80b5c:	200701d8 	.word	0x200701d8
   80b60:	400e1000 	.word	0x400e1000
   80b64:	000f423f 	.word	0x000f423f

00080b68 <recv_data>:
 *
 * return 0: success -1:error
 * recv data via external interrupt
 */
int recv_data(unsigned long len)
{		
   80b68:	b570      	push	{r4, r5, r6, lr}
   80b6a:	b082      	sub	sp, #8
   80b6c:	4606      	mov	r6, r0
	if (mdi.type == SEND)
   80b6e:	4b1f      	ldr	r3, [pc, #124]	; (80bec <recv_data+0x84>)
   80b70:	781b      	ldrb	r3, [r3, #0]
   80b72:	2b20      	cmp	r3, #32
   80b74:	d001      	beq.n	80b7a <recv_data+0x12>
	return 0;
   80b76:	2500      	movs	r5, #0
   80b78:	e00e      	b.n	80b98 <recv_data+0x30>
		delay_us(500);
   80b7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80b7e:	f002 fa17 	bl	82fb0 <__portable_delay_cycles_veneer>
   80b82:	e7f8      	b.n	80b76 <recv_data+0xe>
	return 0;
   80b84:	2300      	movs	r3, #0
		
	for (unsigned long i = 0; i < len; i++) {
		mdi.type = RECV;
		mdi.status = IDLE;
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
		if (wait_ops_done() < 0)
   80b86:	2b00      	cmp	r3, #0
   80b88:	db2c      	blt.n	80be4 <recv_data+0x7c>
			return -1;
		mdi.transfer = i + 1;
   80b8a:	3501      	adds	r5, #1
   80b8c:	f242 0330 	movw	r3, #8240	; 0x2030
   80b90:	4a16      	ldr	r2, [pc, #88]	; (80bec <recv_data+0x84>)
   80b92:	50d5      	str	r5, [r2, r3]
		if (mdi.transfer >= len)
   80b94:	42ae      	cmp	r6, r5
   80b96:	d91f      	bls.n	80bd8 <recv_data+0x70>
	for (unsigned long i = 0; i < len; i++) {
   80b98:	42b5      	cmp	r5, r6
   80b9a:	d220      	bcs.n	80bde <recv_data+0x76>
		mdi.type = RECV;
   80b9c:	4b13      	ldr	r3, [pc, #76]	; (80bec <recv_data+0x84>)
   80b9e:	2210      	movs	r2, #16
   80ba0:	701a      	strb	r2, [r3, #0]
		mdi.status = IDLE;
   80ba2:	220a      	movs	r2, #10
   80ba4:	705a      	strb	r2, [r3, #1]
		pio_set_output(PIOB, PIO_PB26, LOW, DISABLE, ENABLE);
   80ba6:	2301      	movs	r3, #1
   80ba8:	9300      	str	r3, [sp, #0]
   80baa:	2300      	movs	r3, #0
   80bac:	461a      	mov	r2, r3
   80bae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80bb2:	480f      	ldr	r0, [pc, #60]	; (80bf0 <recv_data+0x88>)
   80bb4:	f000 fb0b 	bl	811ce <pio_set_output>
	unsigned long timeout = 0;
   80bb8:	2400      	movs	r4, #0
	while(mdi.status != DONE) {
   80bba:	4b0c      	ldr	r3, [pc, #48]	; (80bec <recv_data+0x84>)
   80bbc:	785b      	ldrb	r3, [r3, #1]
   80bbe:	2b0c      	cmp	r3, #12
   80bc0:	d0e0      	beq.n	80b84 <recv_data+0x1c>
		if (++timeout >= TIMEOUT_OPS_DONE)
   80bc2:	3401      	adds	r4, #1
   80bc4:	4b0b      	ldr	r3, [pc, #44]	; (80bf4 <recv_data+0x8c>)
   80bc6:	429c      	cmp	r4, r3
   80bc8:	d803      	bhi.n	80bd2 <recv_data+0x6a>
		delay_us(1);
   80bca:	2006      	movs	r0, #6
   80bcc:	f002 f9f0 	bl	82fb0 <__portable_delay_cycles_veneer>
   80bd0:	e7f3      	b.n	80bba <recv_data+0x52>
		return -1;
   80bd2:	f04f 33ff 	mov.w	r3, #4294967295
   80bd6:	e7d6      	b.n	80b86 <recv_data+0x1e>
			mdi.transfer = 0;
   80bd8:	2100      	movs	r1, #0
   80bda:	50d1      	str	r1, [r2, r3]
   80bdc:	e7dc      	b.n	80b98 <recv_data+0x30>
	}
	
	return 0;
   80bde:	2000      	movs	r0, #0
}
   80be0:	b002      	add	sp, #8
   80be2:	bd70      	pop	{r4, r5, r6, pc}
			return -1;
   80be4:	f04f 30ff 	mov.w	r0, #4294967295
   80be8:	e7fa      	b.n	80be0 <recv_data+0x78>
   80bea:	bf00      	nop
   80bec:	200701d8 	.word	0x200701d8
   80bf0:	400e1000 	.word	0x400e1000
   80bf4:	000f423f 	.word	0x000f423f

00080bf8 <data_handler>:
 * return none
 * external interrupt handler
 */
void data_handler(unsigned long id, unsigned long mask)
{	
	if ((id == ID_PIOA) && (mask == PIO_PA15))	{
   80bf8:	280b      	cmp	r0, #11
   80bfa:	d000      	beq.n	80bfe <data_handler+0x6>
   80bfc:	4770      	bx	lr
   80bfe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   80c02:	d1fb      	bne.n	80bfc <data_handler+0x4>
{	
   80c04:	b538      	push	{r3, r4, r5, lr}
		if (mdi.type == RECV) 
   80c06:	4b0b      	ldr	r3, [pc, #44]	; (80c34 <data_handler+0x3c>)
   80c08:	781b      	ldrb	r3, [r3, #0]
   80c0a:	2b10      	cmp	r3, #16
   80c0c:	d008      	beq.n	80c20 <data_handler+0x28>
			mdi.data[mdi.transfer] = recv_byte();
		else
			send_byte(mdi.data[mdi.transfer]);
   80c0e:	4b09      	ldr	r3, [pc, #36]	; (80c34 <data_handler+0x3c>)
   80c10:	f242 0230 	movw	r2, #8240	; 0x2030
   80c14:	589a      	ldr	r2, [r3, r2]
   80c16:	4413      	add	r3, r2
   80c18:	7958      	ldrb	r0, [r3, #5]
   80c1a:	f7ff fe63 	bl	808e4 <send_byte>
   80c1e:	bd38      	pop	{r3, r4, r5, pc}
			mdi.data[mdi.transfer] = recv_byte();
   80c20:	4c04      	ldr	r4, [pc, #16]	; (80c34 <data_handler+0x3c>)
   80c22:	f242 0330 	movw	r3, #8240	; 0x2030
   80c26:	58e5      	ldr	r5, [r4, r3]
   80c28:	f7ff fdda 	bl	807e0 <recv_byte>
   80c2c:	442c      	add	r4, r5
   80c2e:	7160      	strb	r0, [r4, #5]
   80c30:	bd38      	pop	{r3, r4, r5, pc}
   80c32:	bf00      	nop
   80c34:	200701d8 	.word	0x200701d8

00080c38 <ee_prog_conf>:
 *
 * return -1:error 0:success
 * prog byte2 and byte3 of page127
 */
static int ee_prog_conf(unsigned char page)
{
   80c38:	b510      	push	{r4, lr}
   80c3a:	b082      	sub	sp, #8
	int status = 0;
	volatile unsigned char byte2 = 0, byte3 = 0;
   80c3c:	2300      	movs	r3, #0
   80c3e:	f88d 3007 	strb.w	r3, [sp, #7]
   80c42:	f88d 3006 	strb.w	r3, [sp, #6]
	
	if (page == 127) {
   80c46:	287f      	cmp	r0, #127	; 0x7f
   80c48:	d013      	beq.n	80c72 <ee_prog_conf+0x3a>
		byte2 = mdi.recv[127 * 4 + 2];
		byte3 = mdi.recv[127 * 4 + 3];
		mdi.data[2] = byte3;
	} else if (page == (127 + 128))	{
   80c4a:	28ff      	cmp	r0, #255	; 0xff
   80c4c:	d01e      	beq.n	80c8c <ee_prog_conf+0x54>
		byte2 = mdi.recv[(127 + 128) * 4 + 2];
		byte3 = mdi.recv[(127 + 128) * 4 + 3];
		mdi.data[2] = byte3;
	}
			
	status = send_data(C_PROG_CONFIG, byte2, 0x03);
   80c4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80c52:	2203      	movs	r2, #3
   80c54:	2014      	movs	r0, #20
   80c56:	f7ff ff3d 	bl	80ad4 <send_data>
   80c5a:	4604      	mov	r4, r0
	
	/* check eecon */
	status |= recv_data(0x01);
   80c5c:	2001      	movs	r0, #1
   80c5e:	f7ff ff83 	bl	80b68 <recv_data>
   80c62:	4320      	orrs	r0, r4
	if ((mdi.data[0] & 0xC0) != 0x00)
   80c64:	4b11      	ldr	r3, [pc, #68]	; (80cac <ee_prog_conf+0x74>)
   80c66:	795b      	ldrb	r3, [r3, #5]
   80c68:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   80c6c:	d11b      	bne.n	80ca6 <ee_prog_conf+0x6e>
		return -1;
			
	return status; 
}
   80c6e:	b002      	add	sp, #8
   80c70:	bd10      	pop	{r4, pc}
		byte2 = mdi.recv[127 * 4 + 2];
   80c72:	4b0e      	ldr	r3, [pc, #56]	; (80cac <ee_prog_conf+0x74>)
   80c74:	f893 2205 	ldrb.w	r2, [r3, #517]	; 0x205
   80c78:	f88d 2007 	strb.w	r2, [sp, #7]
		byte3 = mdi.recv[127 * 4 + 3];
   80c7c:	f893 2206 	ldrb.w	r2, [r3, #518]	; 0x206
   80c80:	f88d 2006 	strb.w	r2, [sp, #6]
		mdi.data[2] = byte3;
   80c84:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80c88:	71da      	strb	r2, [r3, #7]
   80c8a:	e7e0      	b.n	80c4e <ee_prog_conf+0x16>
		byte2 = mdi.recv[(127 + 128) * 4 + 2];
   80c8c:	4b07      	ldr	r3, [pc, #28]	; (80cac <ee_prog_conf+0x74>)
   80c8e:	f893 2405 	ldrb.w	r2, [r3, #1029]	; 0x405
   80c92:	f88d 2007 	strb.w	r2, [sp, #7]
		byte3 = mdi.recv[(127 + 128) * 4 + 3];
   80c96:	f893 2406 	ldrb.w	r2, [r3, #1030]	; 0x406
   80c9a:	f88d 2006 	strb.w	r2, [sp, #6]
		mdi.data[2] = byte3;
   80c9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80ca2:	71da      	strb	r2, [r3, #7]
   80ca4:	e7d3      	b.n	80c4e <ee_prog_conf+0x16>
		return -1;
   80ca6:	f04f 30ff 	mov.w	r0, #4294967295
   80caa:	e7e0      	b.n	80c6e <ee_prog_conf+0x36>
   80cac:	200701d8 	.word	0x200701d8

00080cb0 <compare_eerom>:
 *
 * return -1:error 0:success
 * compare erom	with exisxting data
 */
static int compare_eerom(void)
{
   80cb0:	b570      	push	{r4, r5, r6, lr}
	volatile unsigned char *recv = NULL;
	int status = 0;

	if (mdi.len > EEROM_SIZE)
   80cb2:	f242 0328 	movw	r3, #8232	; 0x2028
   80cb6:	4a26      	ldr	r2, [pc, #152]	; (80d50 <compare_eerom+0xa0>)
   80cb8:	5ad3      	ldrh	r3, [r2, r3]
   80cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   80cbe:	d840      	bhi.n	80d42 <compare_eerom+0x92>
		return -1;
			
	recv = malloc(BUF_EE_SIZE);
   80cc0:	f44f 6082 	mov.w	r0, #1040	; 0x410
   80cc4:	f000 fe92 	bl	819ec <malloc>
	if (recv == NULL)
   80cc8:	4604      	mov	r4, r0
   80cca:	2800      	cmp	r0, #0
   80ccc:	d03c      	beq.n	80d48 <compare_eerom+0x98>
		return -1;
	memcpy((unsigned char *)recv, mdi.recv, EEROM_SIZE);
   80cce:	f44f 6680 	mov.w	r6, #1024	; 0x400
   80cd2:	4632      	mov	r2, r6
   80cd4:	491f      	ldr	r1, [pc, #124]	; (80d54 <compare_eerom+0xa4>)
   80cd6:	f001 f93b 	bl	81f50 <memcpy>
		
	/* send command */
	status = send_data(C_EE_DUMP, 0, 0x01);
   80cda:	2201      	movs	r2, #1
   80cdc:	2100      	movs	r1, #0
   80cde:	200e      	movs	r0, #14
   80ce0:	f7ff fef8 	bl	80ad4 <send_data>
   80ce4:	4605      	mov	r5, r0
	
	/* check eecon */	
	status |= recv_data(EEROM_SIZE);
   80ce6:	4630      	mov	r0, r6
   80ce8:	f7ff ff3e 	bl	80b68 <recv_data>
  	if (status < 0)	{
   80cec:	4305      	orrs	r5, r0
   80cee:	d401      	bmi.n	80cf4 <compare_eerom+0x44>
   80cf0:	2300      	movs	r3, #0
   80cf2:	e007      	b.n	80d04 <compare_eerom+0x54>
	  	free((unsigned char *)recv);
   80cf4:	4620      	mov	r0, r4
   80cf6:	f000 fe81 	bl	819fc <free>
  		return -1;
   80cfa:	f04f 35ff 	mov.w	r5, #4294967295
   80cfe:	e01e      	b.n	80d3e <compare_eerom+0x8e>
	}

	for (unsigned short i = 0; i < mdi.len; i++) {
   80d00:	3301      	adds	r3, #1
   80d02:	b29b      	uxth	r3, r3
   80d04:	f242 0228 	movw	r2, #8232	; 0x2028
   80d08:	4911      	ldr	r1, [pc, #68]	; (80d50 <compare_eerom+0xa0>)
   80d0a:	5a8a      	ldrh	r2, [r1, r2]
   80d0c:	4293      	cmp	r3, r2
   80d0e:	d213      	bcs.n	80d38 <compare_eerom+0x88>
		if ((i < 4) || ((i >= (125 * 4)) && (i < (128* 4))))
   80d10:	2b03      	cmp	r3, #3
   80d12:	d9f5      	bls.n	80d00 <compare_eerom+0x50>
   80d14:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
   80d18:	b292      	uxth	r2, r2
   80d1a:	2a0b      	cmp	r2, #11
   80d1c:	d9f0      	bls.n	80d00 <compare_eerom+0x50>
			continue;

		if (recv[i] != mdi.data[i])	{
   80d1e:	5ce2      	ldrb	r2, [r4, r3]
   80d20:	b2d2      	uxtb	r2, r2
   80d22:	490b      	ldr	r1, [pc, #44]	; (80d50 <compare_eerom+0xa0>)
   80d24:	4419      	add	r1, r3
   80d26:	7949      	ldrb	r1, [r1, #5]
   80d28:	428a      	cmp	r2, r1
   80d2a:	d0e9      	beq.n	80d00 <compare_eerom+0x50>
			free((unsigned char *)recv);
   80d2c:	4620      	mov	r0, r4
   80d2e:	f000 fe65 	bl	819fc <free>
			return -1;
   80d32:	f04f 35ff 	mov.w	r5, #4294967295
   80d36:	e002      	b.n	80d3e <compare_eerom+0x8e>
		}
	}
	
	free((unsigned char *)recv);
   80d38:	4620      	mov	r0, r4
   80d3a:	f000 fe5f 	bl	819fc <free>
		
	return status;	
}
   80d3e:	4628      	mov	r0, r5
   80d40:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   80d42:	f04f 35ff 	mov.w	r5, #4294967295
   80d46:	e7fa      	b.n	80d3e <compare_eerom+0x8e>
		return -1;
   80d48:	f04f 35ff 	mov.w	r5, #4294967295
   80d4c:	e7f7      	b.n	80d3e <compare_eerom+0x8e>
   80d4e:	bf00      	nop
   80d50:	200701d8 	.word	0x200701d8
   80d54:	200701df 	.word	0x200701df

00080d58 <compare_erom>:
{
   80d58:	b570      	push	{r4, r5, r6, lr}
	if (mdi.len > EROM_SIZE)
   80d5a:	f242 0328 	movw	r3, #8232	; 0x2028
   80d5e:	4a23      	ldr	r2, [pc, #140]	; (80dec <compare_erom+0x94>)
   80d60:	5ad3      	ldrh	r3, [r2, r3]
   80d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   80d66:	d83a      	bhi.n	80dde <compare_erom+0x86>
	 recv = malloc(BUF_ER_SIZE);
   80d68:	f242 0020 	movw	r0, #8224	; 0x2020
   80d6c:	f000 fe3e 	bl	819ec <malloc>
	 if (recv == NULL)
   80d70:	4604      	mov	r4, r0
   80d72:	2800      	cmp	r0, #0
   80d74:	d036      	beq.n	80de4 <compare_erom+0x8c>
	 memcpy((unsigned char *)recv, mdi.recv, EROM_SIZE);
   80d76:	f44f 5600 	mov.w	r6, #8192	; 0x2000
   80d7a:	4632      	mov	r2, r6
   80d7c:	491c      	ldr	r1, [pc, #112]	; (80df0 <compare_erom+0x98>)
   80d7e:	f001 f8e7 	bl	81f50 <memcpy>
	status = send_data(C_ER_DUMP, 0, 0x01);
   80d82:	2201      	movs	r2, #1
   80d84:	2100      	movs	r1, #0
   80d86:	200f      	movs	r0, #15
   80d88:	f7ff fea4 	bl	80ad4 <send_data>
   80d8c:	4605      	mov	r5, r0
	status |= recv_data(EROM_SIZE);
   80d8e:	4630      	mov	r0, r6
   80d90:	f7ff feea 	bl	80b68 <recv_data>
	if (status < 0)	{
   80d94:	4305      	orrs	r5, r0
   80d96:	d411      	bmi.n	80dbc <compare_erom+0x64>
   80d98:	2300      	movs	r3, #0
	for (unsigned short i = 0; i < mdi.len - 1; i++) {
   80d9a:	f242 0228 	movw	r2, #8232	; 0x2028
   80d9e:	4913      	ldr	r1, [pc, #76]	; (80dec <compare_erom+0x94>)
   80da0:	5a8a      	ldrh	r2, [r1, r2]
   80da2:	3a01      	subs	r2, #1
   80da4:	4293      	cmp	r3, r2
   80da6:	da15      	bge.n	80dd4 <compare_erom+0x7c>
		if (recv[i] != mdi.data[i])	{
   80da8:	5ce2      	ldrb	r2, [r4, r3]
   80daa:	b2d2      	uxtb	r2, r2
   80dac:	490f      	ldr	r1, [pc, #60]	; (80dec <compare_erom+0x94>)
   80dae:	4419      	add	r1, r3
   80db0:	7949      	ldrb	r1, [r1, #5]
   80db2:	428a      	cmp	r2, r1
   80db4:	d108      	bne.n	80dc8 <compare_erom+0x70>
	for (unsigned short i = 0; i < mdi.len - 1; i++) {
   80db6:	3301      	adds	r3, #1
   80db8:	b29b      	uxth	r3, r3
   80dba:	e7ee      	b.n	80d9a <compare_erom+0x42>
		free((unsigned char *)recv);
   80dbc:	4620      	mov	r0, r4
   80dbe:	f000 fe1d 	bl	819fc <free>
		return -1;
   80dc2:	f04f 35ff 	mov.w	r5, #4294967295
   80dc6:	e008      	b.n	80dda <compare_erom+0x82>
			free((unsigned char *)recv);
   80dc8:	4620      	mov	r0, r4
   80dca:	f000 fe17 	bl	819fc <free>
			return -1;
   80dce:	f04f 35ff 	mov.w	r5, #4294967295
   80dd2:	e002      	b.n	80dda <compare_erom+0x82>
	free((unsigned char *)recv);
   80dd4:	4620      	mov	r0, r4
   80dd6:	f000 fe11 	bl	819fc <free>
}
   80dda:	4628      	mov	r0, r5
   80ddc:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   80dde:	f04f 35ff 	mov.w	r5, #4294967295
   80de2:	e7fa      	b.n	80dda <compare_erom+0x82>
		return -1;
   80de4:	f04f 35ff 	mov.w	r5, #4294967295
   80de8:	e7f7      	b.n	80dda <compare_erom+0x82>
   80dea:	bf00      	nop
   80dec:	200701d8 	.word	0x200701d8
   80df0:	200701df 	.word	0x200701df

00080df4 <dump_eerom>:
{
   80df4:	b538      	push	{r3, r4, r5, lr}
	send_data(C_EE_DUMP, 0, 0x01);
   80df6:	2201      	movs	r2, #1
   80df8:	2100      	movs	r1, #0
   80dfa:	200e      	movs	r0, #14
   80dfc:	f7ff fe6a 	bl	80ad4 <send_data>
	status = recv_data(EEROM_SIZE);
   80e00:	f44f 6080 	mov.w	r0, #1024	; 0x400
   80e04:	f7ff feb0 	bl	80b68 <recv_data>
	if (status == 0) {
   80e08:	4604      	mov	r4, r0
   80e0a:	b108      	cbz	r0, 80e10 <dump_eerom+0x1c>
}
   80e0c:	4620      	mov	r0, r4
   80e0e:	bd38      	pop	{r3, r4, r5, pc}
		revert(mdi.data, EEROM_SIZE);	
   80e10:	4d06      	ldr	r5, [pc, #24]	; (80e2c <dump_eerom+0x38>)
   80e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80e16:	4628      	mov	r0, r5
   80e18:	f7ff fa61 	bl	802de <revert>
		usart_serial_write_packet((Usart *)UART, mdi.data, EEROM_SIZE);
   80e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80e20:	4629      	mov	r1, r5
   80e22:	4803      	ldr	r0, [pc, #12]	; (80e30 <dump_eerom+0x3c>)
   80e24:	f7ff fba8 	bl	80578 <usart_serial_write_packet>
	return status;	
   80e28:	e7f0      	b.n	80e0c <dump_eerom+0x18>
   80e2a:	bf00      	nop
   80e2c:	200701dd 	.word	0x200701dd
   80e30:	400e0800 	.word	0x400e0800

00080e34 <dump_erom>:
{
   80e34:	b510      	push	{r4, lr}
	send_data(C_ER_DUMP, 0, 0x01);
   80e36:	2201      	movs	r2, #1
   80e38:	2100      	movs	r1, #0
   80e3a:	200f      	movs	r0, #15
   80e3c:	f7ff fe4a 	bl	80ad4 <send_data>
	status = recv_data(EROM_SIZE);
   80e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   80e44:	f7ff fe90 	bl	80b68 <recv_data>
	if (status == 0)
   80e48:	4604      	mov	r4, r0
   80e4a:	b108      	cbz	r0, 80e50 <dump_erom+0x1c>
}
   80e4c:	4620      	mov	r0, r4
   80e4e:	bd10      	pop	{r4, pc}
		usart_serial_write_packet((Usart *)UART, mdi.data, EROM_SIZE);
   80e50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80e54:	4902      	ldr	r1, [pc, #8]	; (80e60 <dump_erom+0x2c>)
   80e56:	4803      	ldr	r0, [pc, #12]	; (80e64 <dump_erom+0x30>)
   80e58:	f7ff fb8e 	bl	80578 <usart_serial_write_packet>
	return status;	
   80e5c:	e7f6      	b.n	80e4c <dump_erom+0x18>
   80e5e:	bf00      	nop
   80e60:	200701dd 	.word	0x200701dd
   80e64:	400e0800 	.word	0x400e0800

00080e68 <write_eerom>:
{
   80e68:	b570      	push	{r4, r5, r6, lr}
	unsigned short address =  mdi.address[0] | (mdi.address[1] << 8);
   80e6a:	4a2b      	ldr	r2, [pc, #172]	; (80f18 <write_eerom+0xb0>)
   80e6c:	78d3      	ldrb	r3, [r2, #3]
   80e6e:	7912      	ldrb	r2, [r2, #4]
   80e70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	unsigned char start_page = address / EEPROM_PAGE_SIZE;
   80e74:	f3c3 0587 	ubfx	r5, r3, #2, #8
	if (address >= EEROM_SIZE)
   80e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   80e7c:	d242      	bcs.n	80f04 <write_eerom+0x9c>
	if (mdi.len > EEROM_SIZE)
   80e7e:	f242 0328 	movw	r3, #8232	; 0x2028
   80e82:	4a25      	ldr	r2, [pc, #148]	; (80f18 <write_eerom+0xb0>)
   80e84:	5ad3      	ldrh	r3, [r2, r3]
   80e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   80e8a:	d83e      	bhi.n	80f0a <write_eerom+0xa2>
   80e8c:	2400      	movs	r4, #0
   80e8e:	4626      	mov	r6, r4
   80e90:	e002      	b.n	80e98 <write_eerom+0x30>
			if ((start_page + i) == 127) {
   80e92:	297f      	cmp	r1, #127	; 0x7f
   80e94:	d02d      	beq.n	80ef2 <write_eerom+0x8a>
	for (unsigned int i = 0; i < mdi.len / EEPROM_PAGE_SIZE; i++) {
   80e96:	3401      	adds	r4, #1
   80e98:	f242 0328 	movw	r3, #8232	; 0x2028
   80e9c:	4a1e      	ldr	r2, [pc, #120]	; (80f18 <write_eerom+0xb0>)
   80e9e:	5ad3      	ldrh	r3, [r2, r3]
   80ea0:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
   80ea4:	d236      	bcs.n	80f14 <write_eerom+0xac>
		if (((start_page + i) == 0) || ((start_page + i) == 125) || ((start_page + i) == 126) || ((start_page + i) == 127) ) {
   80ea6:	1929      	adds	r1, r5, r4
   80ea8:	d0f3      	beq.n	80e92 <write_eerom+0x2a>
   80eaa:	297d      	cmp	r1, #125	; 0x7d
   80eac:	d0f1      	beq.n	80e92 <write_eerom+0x2a>
   80eae:	297e      	cmp	r1, #126	; 0x7e
   80eb0:	d0ef      	beq.n	80e92 <write_eerom+0x2a>
   80eb2:	297f      	cmp	r1, #127	; 0x7f
   80eb4:	d0ed      	beq.n	80e92 <write_eerom+0x2a>
		if (i != 0)
   80eb6:	b134      	cbz	r4, 80ec6 <write_eerom+0x5e>
			memcpy(&mdi.recv[0], &mdi.recv[i * EEPROM_PAGE_SIZE], EEPROM_PAGE_SIZE);
   80eb8:	4b17      	ldr	r3, [pc, #92]	; (80f18 <write_eerom+0xb0>)
   80eba:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   80ebe:	f8d2 2007 	ldr.w	r2, [r2, #7]
   80ec2:	f8c3 2007 	str.w	r2, [r3, #7]
		status |= send_data(C_WR_EEPROM, start_page + i, EEPROM_PAGE_SIZE + 0x02);
   80ec6:	2206      	movs	r2, #6
   80ec8:	200a      	movs	r0, #10
   80eca:	f7ff fe03 	bl	80ad4 <send_data>
   80ece:	4306      	orrs	r6, r0
		delay_ms(5);
   80ed0:	f247 5030 	movw	r0, #30000	; 0x7530
   80ed4:	f002 f86c 	bl	82fb0 <__portable_delay_cycles_veneer>
		status |= recv_data(0x01);
   80ed8:	2001      	movs	r0, #1
   80eda:	f7ff fe45 	bl	80b68 <recv_data>
		if (status < 0)
   80ede:	4306      	orrs	r6, r0
   80ee0:	d416      	bmi.n	80f10 <write_eerom+0xa8>
		if ((mdi.data[0] & 0xC0) != 0x00)
   80ee2:	4b0d      	ldr	r3, [pc, #52]	; (80f18 <write_eerom+0xb0>)
   80ee4:	795b      	ldrb	r3, [r3, #5]
   80ee6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   80eea:	d0d4      	beq.n	80e96 <write_eerom+0x2e>
			return -1;
   80eec:	f04f 36ff 	mov.w	r6, #4294967295
   80ef0:	e010      	b.n	80f14 <write_eerom+0xac>
				status = ee_prog_conf(start_page + i);
   80ef2:	1928      	adds	r0, r5, r4
   80ef4:	b2c0      	uxtb	r0, r0
   80ef6:	f7ff fe9f 	bl	80c38 <ee_prog_conf>
				if (status < 0)	
   80efa:	1e06      	subs	r6, r0, #0
   80efc:	dacb      	bge.n	80e96 <write_eerom+0x2e>
					return -1;
   80efe:	f04f 36ff 	mov.w	r6, #4294967295
   80f02:	e007      	b.n	80f14 <write_eerom+0xac>
		return -1;
   80f04:	f04f 36ff 	mov.w	r6, #4294967295
   80f08:	e004      	b.n	80f14 <write_eerom+0xac>
		return -1;
   80f0a:	f04f 36ff 	mov.w	r6, #4294967295
   80f0e:	e001      	b.n	80f14 <write_eerom+0xac>
			return -1;
   80f10:	f04f 36ff 	mov.w	r6, #4294967295
}
   80f14:	4630      	mov	r0, r6
   80f16:	bd70      	pop	{r4, r5, r6, pc}
   80f18:	200701d8 	.word	0x200701d8

00080f1c <write_erom>:
{
   80f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned short address =  mdi.address[0] | (mdi.address[1] << 8);
   80f1e:	4a2d      	ldr	r2, [pc, #180]	; (80fd4 <write_erom+0xb8>)
   80f20:	78d3      	ldrb	r3, [r2, #3]
   80f22:	7912      	ldrb	r2, [r2, #4]
   80f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	unsigned char start_page = address / EROM_PAGE_SIZE;
   80f28:	f3c3 1647 	ubfx	r6, r3, #5, #8
	if (address >= EROM_SIZE)
   80f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   80f30:	d246      	bcs.n	80fc0 <write_erom+0xa4>
	if (mdi.len > EROM_SIZE)
   80f32:	f242 0328 	movw	r3, #8232	; 0x2028
   80f36:	4a27      	ldr	r2, [pc, #156]	; (80fd4 <write_erom+0xb8>)
   80f38:	5ad3      	ldrh	r3, [r2, r3]
   80f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   80f3e:	d842      	bhi.n	80fc6 <write_erom+0xaa>
   80f40:	2400      	movs	r4, #0
   80f42:	4625      	mov	r5, r4
   80f44:	e014      	b.n	80f70 <write_erom+0x54>
		status |= send_data(C_WR_EROM, start_page + i, EROM_PAGE_SIZE + 0x02);
   80f46:	2222      	movs	r2, #34	; 0x22
   80f48:	1931      	adds	r1, r6, r4
   80f4a:	2009      	movs	r0, #9
   80f4c:	f7ff fdc2 	bl	80ad4 <send_data>
   80f50:	4305      	orrs	r5, r0
		delay_ms(5);
   80f52:	f247 5030 	movw	r0, #30000	; 0x7530
   80f56:	f002 f82b 	bl	82fb0 <__portable_delay_cycles_veneer>
		status |= recv_data(0x01);
   80f5a:	2001      	movs	r0, #1
   80f5c:	f7ff fe04 	bl	80b68 <recv_data>
		if (status < 0)
   80f60:	4305      	orrs	r5, r0
   80f62:	d435      	bmi.n	80fd0 <write_erom+0xb4>
		if ((mdi.data[0] & 0xC0) != 0x00)
   80f64:	4b1b      	ldr	r3, [pc, #108]	; (80fd4 <write_erom+0xb8>)
   80f66:	795b      	ldrb	r3, [r3, #5]
   80f68:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   80f6c:	d12e      	bne.n	80fcc <write_erom+0xb0>
	for (unsigned int i = 0; i < mdi.len / EROM_PAGE_SIZE; i++) {
   80f6e:	3401      	adds	r4, #1
   80f70:	f242 0328 	movw	r3, #8232	; 0x2028
   80f74:	4a17      	ldr	r2, [pc, #92]	; (80fd4 <write_erom+0xb8>)
   80f76:	5ad3      	ldrh	r3, [r2, r3]
   80f78:	ebb4 1f53 	cmp.w	r4, r3, lsr #5
   80f7c:	d228      	bcs.n	80fd0 <write_erom+0xb4>
		if (i != 0)
   80f7e:	2c00      	cmp	r4, #0
   80f80:	d0e1      	beq.n	80f46 <write_erom+0x2a>
			memcpy(&mdi.recv[0], &mdi.recv[i * EROM_PAGE_SIZE], EROM_PAGE_SIZE);
   80f82:	f8df c050 	ldr.w	ip, [pc, #80]	; 80fd4 <write_erom+0xb8>
   80f86:	eb0c 1344 	add.w	r3, ip, r4, lsl #5
   80f8a:	f853 ef07 	ldr.w	lr, [r3, #7]!
   80f8e:	685f      	ldr	r7, [r3, #4]
   80f90:	6898      	ldr	r0, [r3, #8]
   80f92:	68d9      	ldr	r1, [r3, #12]
   80f94:	f8cc e007 	str.w	lr, [ip, #7]
   80f98:	f8cc 700b 	str.w	r7, [ip, #11]
   80f9c:	f8cc 000f 	str.w	r0, [ip, #15]
   80fa0:	f8cc 1013 	str.w	r1, [ip, #19]
   80fa4:	f8d3 e010 	ldr.w	lr, [r3, #16]
   80fa8:	695f      	ldr	r7, [r3, #20]
   80faa:	6998      	ldr	r0, [r3, #24]
   80fac:	69d9      	ldr	r1, [r3, #28]
   80fae:	f8cc e017 	str.w	lr, [ip, #23]
   80fb2:	f8cc 701b 	str.w	r7, [ip, #27]
   80fb6:	f8cc 001f 	str.w	r0, [ip, #31]
   80fba:	f8cc 1023 	str.w	r1, [ip, #35]	; 0x23
   80fbe:	e7c2      	b.n	80f46 <write_erom+0x2a>
		return -1;
   80fc0:	f04f 35ff 	mov.w	r5, #4294967295
   80fc4:	e004      	b.n	80fd0 <write_erom+0xb4>
		return -1;
   80fc6:	f04f 35ff 	mov.w	r5, #4294967295
   80fca:	e001      	b.n	80fd0 <write_erom+0xb4>
			return -1;
   80fcc:	f04f 35ff 	mov.w	r5, #4294967295
}
   80fd0:	4628      	mov	r0, r5
   80fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80fd4:	200701d8 	.word	0x200701d8

00080fd8 <erase_erom>:
{																						
   80fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fda:	b085      	sub	sp, #20
	unsigned char magic[16] = {0x55, 0x45, 0xE8, 0x92, 0xD6, 0xB1, 0x62, 0x59, 0xFC, 0x8A, 0xC8, 0xF2, 0xD6, 0xE1, 0x4A, 0x35};
   80fdc:	4b1b      	ldr	r3, [pc, #108]	; (8104c <erase_erom+0x74>)
   80fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80fe0:	ac04      	add	r4, sp, #16
   80fe2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
	status = send_data(C_ER_EROM, 0, 0x01);
   80fe6:	2201      	movs	r2, #1
   80fe8:	2100      	movs	r1, #0
   80fea:	2008      	movs	r0, #8
   80fec:	f7ff fd72 	bl	80ad4 <send_data>
   80ff0:	4604      	mov	r4, r0
	status |= recv_data(0x01);
   80ff2:	2001      	movs	r0, #1
   80ff4:	f7ff fdb8 	bl	80b68 <recv_data>
   80ff8:	4304      	orrs	r4, r0
	if (mdi.data[0] != 0x88)
   80ffa:	4b15      	ldr	r3, [pc, #84]	; (81050 <erase_erom+0x78>)
   80ffc:	795b      	ldrb	r3, [r3, #5]
   80ffe:	2b88      	cmp	r3, #136	; 0x88
   81000:	d120      	bne.n	81044 <erase_erom+0x6c>
	memcpy(&mdi.data[0], magic, sizeof(magic));
   81002:	4e13      	ldr	r6, [pc, #76]	; (81050 <erase_erom+0x78>)
   81004:	466d      	mov	r5, sp
   81006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81008:	f8c6 0005 	str.w	r0, [r6, #5]
   8100c:	f8c6 1009 	str.w	r1, [r6, #9]
   81010:	f8c6 200d 	str.w	r2, [r6, #13]
   81014:	f8c6 3011 	str.w	r3, [r6, #17]
	status |= send_data(0x55, 0x45, sizeof(magic));
   81018:	2210      	movs	r2, #16
   8101a:	2145      	movs	r1, #69	; 0x45
   8101c:	2055      	movs	r0, #85	; 0x55
   8101e:	f7ff fd59 	bl	80ad4 <send_data>
   81022:	4304      	orrs	r4, r0
	delay_ms(100);
   81024:	480b      	ldr	r0, [pc, #44]	; (81054 <erase_erom+0x7c>)
   81026:	f001 ffc3 	bl	82fb0 <__portable_delay_cycles_veneer>
	status |= recv_data(0x01);
   8102a:	2001      	movs	r0, #1
   8102c:	f7ff fd9c 	bl	80b68 <recv_data>
   81030:	4320      	orrs	r0, r4
	if ((mdi.data[0] & 0xC0) != 0x00)
   81032:	7973      	ldrb	r3, [r6, #5]
   81034:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   81038:	d101      	bne.n	8103e <erase_erom+0x66>
}
   8103a:	b005      	add	sp, #20
   8103c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   8103e:	f04f 30ff 	mov.w	r0, #4294967295
   81042:	e7fa      	b.n	8103a <erase_erom+0x62>
		return -1;
   81044:	f04f 30ff 	mov.w	r0, #4294967295
   81048:	e7f7      	b.n	8103a <erase_erom+0x62>
   8104a:	bf00      	nop
   8104c:	00082f70 	.word	0x00082f70
   81050:	200701d8 	.word	0x200701d8
   81054:	000927c0 	.word	0x000927c0

00081058 <init_chip>:
{
   81058:	b510      	push	{r4, lr}
	status = enter_monitor_mode();
   8105a:	f7ff fcb5 	bl	809c8 <enter_monitor_mode>
   8105e:	4604      	mov	r4, r0
	delay_us(5);
   81060:	201e      	movs	r0, #30
   81062:	f001 ffa5 	bl	82fb0 <__portable_delay_cycles_veneer>
	status |= send_data(C_TRACE, 0, 0x01);
   81066:	2201      	movs	r2, #1
   81068:	2100      	movs	r1, #0
   8106a:	2002      	movs	r0, #2
   8106c:	f7ff fd32 	bl	80ad4 <send_data>
   81070:	4304      	orrs	r4, r0
	delay_ms(1);
   81072:	f241 7070 	movw	r0, #6000	; 0x1770
   81076:	f001 ff9b 	bl	82fb0 <__portable_delay_cycles_veneer>
	recv_data(0x02);
   8107a:	2002      	movs	r0, #2
   8107c:	f7ff fd74 	bl	80b68 <recv_data>
}
   81080:	4620      	mov	r0, r4
   81082:	bd10      	pop	{r4, pc}

00081084 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81084:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81086:	480e      	ldr	r0, [pc, #56]	; (810c0 <sysclk_init+0x3c>)
   81088:	f001 ff8e 	bl	82fa8 <__system_init_flash_veneer>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8108c:	213e      	movs	r1, #62	; 0x3e
   8108e:	2000      	movs	r0, #0
   81090:	f000 f9a8 	bl	813e4 <pmc_switch_mainck_to_xtal>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81094:	f000 f9d0 	bl	81438 <pmc_osc_is_ready_mainck>
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81098:	2800      	cmp	r0, #0
   8109a:	d0fb      	beq.n	81094 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8109c:	f000 f9d4 	bl	81448 <pmc_disable_pllack>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   810a0:	4a08      	ldr	r2, [pc, #32]	; (810c4 <sysclk_init+0x40>)
   810a2:	4b09      	ldr	r3, [pc, #36]	; (810c8 <sysclk_init+0x44>)
   810a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   810a6:	f000 f9d7 	bl	81458 <pmc_is_locked_pllack>
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   810aa:	2800      	cmp	r0, #0
   810ac:	d0fb      	beq.n	810a6 <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   810ae:	2010      	movs	r0, #16
   810b0:	f000 f96e 	bl	81390 <pmc_switch_mck_to_pllack>
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   810b4:	f000 fba4 	bl	81800 <SystemCoreClockUpdate>

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   810b8:	4801      	ldr	r0, [pc, #4]	; (810c0 <sysclk_init+0x3c>)
   810ba:	f001 ff75 	bl	82fa8 <__system_init_flash_veneer>
   810be:	bd08      	pop	{r3, pc}
   810c0:	0501bd00 	.word	0x0501bd00
   810c4:	200d3f01 	.word	0x200d3f01
   810c8:	400e0600 	.word	0x400e0600

000810cc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810cc:	b90a      	cbnz	r2, 810d2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810ce:	6601      	str	r1, [r0, #96]	; 0x60
   810d0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   810d2:	6641      	str	r1, [r0, #100]	; 0x64
   810d4:	4770      	bx	lr

000810d6 <pio_set_debounce_filter>:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
#elif (SAM3XA || SAM3U)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_DIFSR = ul_mask;
   810d6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
   810da:	0053      	lsls	r3, r2, #1
   810dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   810e0:	fbb2 f2f3 	udiv	r2, r2, r3
   810e4:	3a01      	subs	r2, #1
   810e6:	f3c2 020d 	ubfx	r2, r2, #0, #14
   810ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
   810ee:	4770      	bx	lr

000810f0 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
   810f0:	6301      	str	r1, [r0, #48]	; 0x30
   810f2:	4770      	bx	lr

000810f4 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
   810f4:	6341      	str	r1, [r0, #52]	; 0x34
   810f6:	4770      	bx	lr

000810f8 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   810f8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   810fc:	d007      	beq.n	8110e <pio_get+0x16>
   810fe:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81102:	d004      	beq.n	8110e <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
	} else {
		ul_reg = p_pio->PIO_PDSR;
   81104:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   81106:	4213      	tst	r3, r2
   81108:	d003      	beq.n	81112 <pio_get+0x1a>
		return 0;
	} else {
		return 1;
   8110a:	2001      	movs	r0, #1
	}
}
   8110c:	4770      	bx	lr
		ul_reg = p_pio->PIO_ODSR;
   8110e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81110:	e7f9      	b.n	81106 <pio_get+0xe>
		return 0;
   81112:	2000      	movs	r0, #0
   81114:	4770      	bx	lr

00081116 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81116:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81118:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8111c:	d016      	beq.n	8114c <pio_set_peripheral+0x36>
   8111e:	d80b      	bhi.n	81138 <pio_set_peripheral+0x22>
   81120:	b149      	cbz	r1, 81136 <pio_set_peripheral+0x20>
   81122:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81126:	d105      	bne.n	81134 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81128:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8112a:	6f03      	ldr	r3, [r0, #112]	; 0x70
   8112c:	ea21 0102 	bic.w	r1, r1, r2
   81130:	400b      	ands	r3, r1
   81132:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81134:	6042      	str	r2, [r0, #4]
   81136:	4770      	bx	lr
	switch (ul_type) {
   81138:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8113c:	d0fb      	beq.n	81136 <pio_set_peripheral+0x20>
   8113e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81142:	d0f8      	beq.n	81136 <pio_set_peripheral+0x20>
   81144:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81148:	d1f4      	bne.n	81134 <pio_set_peripheral+0x1e>
   8114a:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8114c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8114e:	4313      	orrs	r3, r2
   81150:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81152:	e7ef      	b.n	81134 <pio_set_peripheral+0x1e>

00081154 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   81154:	f012 0f10 	tst.w	r2, #16
   81158:	d012      	beq.n	81180 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   8115a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8115e:	f012 0f20 	tst.w	r2, #32
   81162:	d007      	beq.n	81174 <pio_configure_interrupt+0x20>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   81164:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   81168:	f012 0f40 	tst.w	r2, #64	; 0x40
   8116c:	d005      	beq.n	8117a <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8116e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   81172:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
   81174:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
   81178:	e7f6      	b.n	81168 <pio_configure_interrupt+0x14>
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8117a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8117e:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   81180:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81184:	4770      	bx	lr

00081186 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   81186:	6401      	str	r1, [r0, #64]	; 0x40
   81188:	4770      	bx	lr

0008118a <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8118a:	6441      	str	r1, [r0, #68]	; 0x44
   8118c:	4770      	bx	lr

0008118e <pio_set_input>:
{
   8118e:	b570      	push	{r4, r5, r6, lr}
   81190:	4604      	mov	r4, r0
   81192:	460d      	mov	r5, r1
   81194:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
   81196:	f7ff fff8 	bl	8118a <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8119a:	f006 0201 	and.w	r2, r6, #1
   8119e:	4629      	mov	r1, r5
   811a0:	4620      	mov	r0, r4
   811a2:	f7ff ff93 	bl	810cc <pio_pull_up>
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   811a6:	f016 0f0a 	tst.w	r6, #10
   811aa:	d009      	beq.n	811c0 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
   811ac:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
   811ae:	f016 0f02 	tst.w	r6, #2
   811b2:	d107      	bne.n	811c4 <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
   811b4:	f016 0f08 	tst.w	r6, #8
   811b8:	d006      	beq.n	811c8 <pio_set_input+0x3a>
			p_pio->PIO_DIFSR = ul_mask;
   811ba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   811be:	e003      	b.n	811c8 <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
   811c0:	6265      	str	r5, [r4, #36]	; 0x24
   811c2:	e7f4      	b.n	811ae <pio_set_input+0x20>
		p_pio->PIO_SCIFSR = ul_mask;
   811c4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
   811c8:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
   811ca:	6025      	str	r5, [r4, #0]
   811cc:	bd70      	pop	{r4, r5, r6, pc}

000811ce <pio_set_output>:
{
   811ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   811d0:	4604      	mov	r4, r0
   811d2:	460d      	mov	r5, r1
   811d4:	4616      	mov	r6, r2
   811d6:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
   811d8:	f7ff ffd7 	bl	8118a <pio_disable_interrupt>
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   811dc:	9a06      	ldr	r2, [sp, #24]
   811de:	4629      	mov	r1, r5
   811e0:	4620      	mov	r0, r4
   811e2:	f7ff ff73 	bl	810cc <pio_pull_up>
	if (ul_multidrive_enable) {
   811e6:	b12f      	cbz	r7, 811f4 <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
   811e8:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
   811ea:	b92e      	cbnz	r6, 811f8 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
   811ec:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   811ee:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
   811f0:	6025      	str	r5, [r4, #0]
   811f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
   811f4:	6565      	str	r5, [r4, #84]	; 0x54
   811f6:	e7f8      	b.n	811ea <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   811f8:	6325      	str	r5, [r4, #48]	; 0x30
   811fa:	e7f8      	b.n	811ee <pio_set_output+0x20>

000811fc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   811fc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   811fe:	4770      	bx	lr

00081200 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81200:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81202:	4770      	bx	lr

00081204 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81204:	b570      	push	{r4, r5, r6, lr}
   81206:	b082      	sub	sp, #8
   81208:	4605      	mov	r5, r0
   8120a:	460e      	mov	r6, r1
   8120c:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8120e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81212:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81216:	d029      	beq.n	8126c <pio_configure_pin_group+0x68>
   81218:	d812      	bhi.n	81240 <pio_configure_pin_group+0x3c>
   8121a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8121e:	d017      	beq.n	81250 <pio_configure_pin_group+0x4c>
   81220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81224:	d112      	bne.n	8124c <pio_configure_pin_group+0x48>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81226:	460a      	mov	r2, r1
   81228:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8122c:	f7ff ff73 	bl	81116 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81230:	f004 0201 	and.w	r2, r4, #1
   81234:	4631      	mov	r1, r6
   81236:	4628      	mov	r0, r5
   81238:	f7ff ff48 	bl	810cc <pio_pull_up>

	default:
		return 0;
	}

	return 1;
   8123c:	2001      	movs	r0, #1
		break;
   8123e:	e013      	b.n	81268 <pio_configure_pin_group+0x64>
	switch (ul_flags & PIO_TYPE_Msk) {
   81240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81244:	d016      	beq.n	81274 <pio_configure_pin_group+0x70>
   81246:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8124a:	d013      	beq.n	81274 <pio_configure_pin_group+0x70>
		return 0;
   8124c:	2000      	movs	r0, #0
   8124e:	e00b      	b.n	81268 <pio_configure_pin_group+0x64>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81250:	460a      	mov	r2, r1
   81252:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81256:	f7ff ff5e 	bl	81116 <pio_set_peripheral>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8125a:	f004 0201 	and.w	r2, r4, #1
   8125e:	4631      	mov	r1, r6
   81260:	4628      	mov	r0, r5
   81262:	f7ff ff33 	bl	810cc <pio_pull_up>
	return 1;
   81266:	2001      	movs	r0, #1
}
   81268:	b002      	add	sp, #8
   8126a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   8126c:	f7ff ff8f 	bl	8118e <pio_set_input>
	return 1;
   81270:	2001      	movs	r0, #1
		break;
   81272:	e7f9      	b.n	81268 <pio_configure_pin_group+0x64>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81274:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81278:	f004 0301 	and.w	r3, r4, #1
		pio_set_output(p_pio, ul_mask,
   8127c:	9300      	str	r3, [sp, #0]
   8127e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81282:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81286:	bf14      	ite	ne
   81288:	2200      	movne	r2, #0
   8128a:	2201      	moveq	r2, #1
   8128c:	4631      	mov	r1, r6
   8128e:	4628      	mov	r0, r5
   81290:	f7ff ff9d 	bl	811ce <pio_set_output>
	return 1;
   81294:	2001      	movs	r0, #1
		break;
   81296:	e7e7      	b.n	81268 <pio_configure_pin_group+0x64>

00081298 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8129a:	4604      	mov	r4, r0
   8129c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8129e:	f7ff ffad 	bl	811fc <pio_get_interrupt_status>
   812a2:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   812a4:	4620      	mov	r0, r4
   812a6:	f7ff ffab 	bl	81200 <pio_get_interrupt_mask>

	/* Check pending events */
	if (status != 0) {
   812aa:	4005      	ands	r5, r0
   812ac:	d001      	beq.n	812b2 <pio_handler_process+0x1a>
   812ae:	2400      	movs	r4, #0
   812b0:	e003      	b.n	812ba <pio_handler_process+0x22>
   812b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
   812b4:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
   812b6:	2c06      	cmp	r4, #6
   812b8:	d811      	bhi.n	812de <pio_handler_process+0x46>
		while (status != 0) {
   812ba:	b18d      	cbz	r5, 812e0 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
   812bc:	0123      	lsls	r3, r4, #4
   812be:	4a09      	ldr	r2, [pc, #36]	; (812e4 <pio_handler_process+0x4c>)
   812c0:	58d0      	ldr	r0, [r2, r3]
   812c2:	42b0      	cmp	r0, r6
   812c4:	d1f6      	bne.n	812b4 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   812c6:	eb02 1304 	add.w	r3, r2, r4, lsl #4
   812ca:	6859      	ldr	r1, [r3, #4]
   812cc:	420d      	tst	r5, r1
   812ce:	d0f1      	beq.n	812b4 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   812d0:	461f      	mov	r7, r3
   812d2:	68db      	ldr	r3, [r3, #12]
   812d4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   812d6:	687b      	ldr	r3, [r7, #4]
   812d8:	ea25 0503 	bic.w	r5, r5, r3
   812dc:	e7ea      	b.n	812b4 <pio_handler_process+0x1c>
   812de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   812e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   812e2:	bf00      	nop
   812e4:	20072a9c 	.word	0x20072a9c

000812e8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   812e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource = NULL;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   812ea:	4c17      	ldr	r4, [pc, #92]	; (81348 <pio_handler_set+0x60>)
   812ec:	6827      	ldr	r7, [r4, #0]
   812ee:	2f06      	cmp	r7, #6
   812f0:	d828      	bhi.n	81344 <pio_handler_set+0x5c>
   812f2:	f04f 0e00 	mov.w	lr, #0
   812f6:	4674      	mov	r4, lr
   812f8:	e001      	b.n	812fe <pio_handler_set+0x16>
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   812fa:	3401      	adds	r4, #1
   812fc:	b2e4      	uxtb	r4, r4
   812fe:	46a4      	mov	ip, r4
   81300:	42a7      	cmp	r7, r4
   81302:	d30a      	bcc.n	8131a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   81304:	4e11      	ldr	r6, [pc, #68]	; (8134c <pio_handler_set+0x64>)
   81306:	0125      	lsls	r5, r4, #4
   81308:	eb06 0e05 	add.w	lr, r6, r5
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8130c:	5975      	ldr	r5, [r6, r5]
   8130e:	428d      	cmp	r5, r1
   81310:	d1f3      	bne.n	812fa <pio_handler_set+0x12>
   81312:	f8de 5004 	ldr.w	r5, [lr, #4]
   81316:	4295      	cmp	r5, r2
   81318:	d1ef      	bne.n	812fa <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   8131a:	f8ce 1000 	str.w	r1, [lr]
	pSource->mask = ul_mask;
   8131e:	f8ce 2004 	str.w	r2, [lr, #4]
	pSource->attr = ul_attr;
   81322:	f8ce 3008 	str.w	r3, [lr, #8]
	pSource->handler = p_handler;
   81326:	9906      	ldr	r1, [sp, #24]
   81328:	f8ce 100c 	str.w	r1, [lr, #12]
	if (i == gs_ul_nb_sources + 1) {
   8132c:	3701      	adds	r7, #1
   8132e:	45bc      	cmp	ip, r7
   81330:	d005      	beq.n	8133e <pio_handler_set+0x56>
   81332:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81334:	461a      	mov	r2, r3
   81336:	f7ff ff0d 	bl	81154 <pio_configure_interrupt>

	return 0;
   8133a:	2000      	movs	r0, #0
   8133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
   8133e:	4902      	ldr	r1, [pc, #8]	; (81348 <pio_handler_set+0x60>)
   81340:	600f      	str	r7, [r1, #0]
   81342:	e7f6      	b.n	81332 <pio_handler_set+0x4a>
		return 1;
   81344:	2001      	movs	r0, #1
}
   81346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81348:	20072b0c 	.word	0x20072b0c
   8134c:	20072a9c 	.word	0x20072a9c

00081350 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81350:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81352:	210b      	movs	r1, #11
   81354:	4801      	ldr	r0, [pc, #4]	; (8135c <PIOA_Handler+0xc>)
   81356:	f7ff ff9f 	bl	81298 <pio_handler_process>
   8135a:	bd08      	pop	{r3, pc}
   8135c:	400e0e00 	.word	0x400e0e00

00081360 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81360:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81362:	210c      	movs	r1, #12
   81364:	4801      	ldr	r0, [pc, #4]	; (8136c <PIOB_Handler+0xc>)
   81366:	f7ff ff97 	bl	81298 <pio_handler_process>
   8136a:	bd08      	pop	{r3, pc}
   8136c:	400e1000 	.word	0x400e1000

00081370 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81370:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81372:	210d      	movs	r1, #13
   81374:	4801      	ldr	r0, [pc, #4]	; (8137c <PIOC_Handler+0xc>)
   81376:	f7ff ff8f 	bl	81298 <pio_handler_process>
   8137a:	bd08      	pop	{r3, pc}
   8137c:	400e1200 	.word	0x400e1200

00081380 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81380:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81382:	210e      	movs	r1, #14
   81384:	4801      	ldr	r0, [pc, #4]	; (8138c <PIOD_Handler+0xc>)
   81386:	f7ff ff87 	bl	81298 <pio_handler_process>
   8138a:	bd08      	pop	{r3, pc}
   8138c:	400e1400 	.word	0x400e1400

00081390 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81390:	4a13      	ldr	r2, [pc, #76]	; (813e0 <pmc_switch_mck_to_pllack+0x50>)
   81392:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81398:	4318      	orrs	r0, r3
   8139a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8139c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813a0:	4a0f      	ldr	r2, [pc, #60]	; (813e0 <pmc_switch_mck_to_pllack+0x50>)
   813a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
   813a4:	f012 0f08 	tst.w	r2, #8
   813a8:	d102      	bne.n	813b0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   813aa:	b1a3      	cbz	r3, 813d6 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
   813ac:	3b01      	subs	r3, #1
   813ae:	e7f7      	b.n	813a0 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   813b0:	4a0b      	ldr	r2, [pc, #44]	; (813e0 <pmc_switch_mck_to_pllack+0x50>)
   813b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   813b4:	f023 0303 	bic.w	r3, r3, #3
   813b8:	f043 0302 	orr.w	r3, r3, #2
   813bc:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   813be:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813c2:	4a07      	ldr	r2, [pc, #28]	; (813e0 <pmc_switch_mck_to_pllack+0x50>)
   813c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
   813c6:	f012 0f08 	tst.w	r2, #8
   813ca:	d102      	bne.n	813d2 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
   813cc:	b12b      	cbz	r3, 813da <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
   813ce:	3b01      	subs	r3, #1
   813d0:	e7f7      	b.n	813c2 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
   813d2:	2000      	movs	r0, #0
   813d4:	4770      	bx	lr
			return 1;
   813d6:	2001      	movs	r0, #1
   813d8:	4770      	bx	lr
			return 1;
   813da:	2001      	movs	r0, #1
}
   813dc:	4770      	bx	lr
   813de:	bf00      	nop
   813e0:	400e0600 	.word	0x400e0600

000813e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   813e4:	b9d0      	cbnz	r0, 8141c <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   813e6:	4a11      	ldr	r2, [pc, #68]	; (8142c <pmc_switch_mainck_to_xtal+0x48>)
   813e8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   813ea:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   813ee:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   813f2:	0209      	lsls	r1, r1, #8
   813f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   813f6:	430b      	orrs	r3, r1
   813f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   813fc:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81400:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81402:	4b0a      	ldr	r3, [pc, #40]	; (8142c <pmc_switch_mainck_to_xtal+0x48>)
   81404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81406:	f013 0f01 	tst.w	r3, #1
   8140a:	d0fa      	beq.n	81402 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8140c:	4a07      	ldr	r2, [pc, #28]	; (8142c <pmc_switch_mainck_to_xtal+0x48>)
   8140e:	6a13      	ldr	r3, [r2, #32]
   81410:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81418:	6213      	str	r3, [r2, #32]
   8141a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8141c:	4903      	ldr	r1, [pc, #12]	; (8142c <pmc_switch_mainck_to_xtal+0x48>)
   8141e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81420:	4a03      	ldr	r2, [pc, #12]	; (81430 <pmc_switch_mainck_to_xtal+0x4c>)
   81422:	401a      	ands	r2, r3
   81424:	4b03      	ldr	r3, [pc, #12]	; (81434 <pmc_switch_mainck_to_xtal+0x50>)
   81426:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81428:	620b      	str	r3, [r1, #32]
   8142a:	4770      	bx	lr
   8142c:	400e0600 	.word	0x400e0600
   81430:	fec8fffc 	.word	0xfec8fffc
   81434:	01370002 	.word	0x01370002

00081438 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81438:	4b02      	ldr	r3, [pc, #8]	; (81444 <pmc_osc_is_ready_mainck+0xc>)
   8143a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8143c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81440:	4770      	bx	lr
   81442:	bf00      	nop
   81444:	400e0600 	.word	0x400e0600

00081448 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81448:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8144c:	4b01      	ldr	r3, [pc, #4]	; (81454 <pmc_disable_pllack+0xc>)
   8144e:	629a      	str	r2, [r3, #40]	; 0x28
   81450:	4770      	bx	lr
   81452:	bf00      	nop
   81454:	400e0600 	.word	0x400e0600

00081458 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81458:	4b02      	ldr	r3, [pc, #8]	; (81464 <pmc_is_locked_pllack+0xc>)
   8145a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8145c:	f000 0002 	and.w	r0, r0, #2
   81460:	4770      	bx	lr
   81462:	bf00      	nop
   81464:	400e0600 	.word	0x400e0600

00081468 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81468:	282c      	cmp	r0, #44	; 0x2c
   8146a:	d81e      	bhi.n	814aa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8146c:	281f      	cmp	r0, #31
   8146e:	d80c      	bhi.n	8148a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81470:	4b11      	ldr	r3, [pc, #68]	; (814b8 <pmc_enable_periph_clk+0x50>)
   81472:	699a      	ldr	r2, [r3, #24]
   81474:	2301      	movs	r3, #1
   81476:	4083      	lsls	r3, r0
   81478:	4393      	bics	r3, r2
   8147a:	d018      	beq.n	814ae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8147c:	2301      	movs	r3, #1
   8147e:	fa03 f000 	lsl.w	r0, r3, r0
   81482:	4b0d      	ldr	r3, [pc, #52]	; (814b8 <pmc_enable_periph_clk+0x50>)
   81484:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81486:	2000      	movs	r0, #0
   81488:	4770      	bx	lr
		ul_id -= 32;
   8148a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8148c:	4b0a      	ldr	r3, [pc, #40]	; (814b8 <pmc_enable_periph_clk+0x50>)
   8148e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81492:	2301      	movs	r3, #1
   81494:	4083      	lsls	r3, r0
   81496:	4393      	bics	r3, r2
   81498:	d00b      	beq.n	814b2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8149a:	2301      	movs	r3, #1
   8149c:	fa03 f000 	lsl.w	r0, r3, r0
   814a0:	4b05      	ldr	r3, [pc, #20]	; (814b8 <pmc_enable_periph_clk+0x50>)
   814a2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   814a6:	2000      	movs	r0, #0
   814a8:	4770      	bx	lr
		return 1;
   814aa:	2001      	movs	r0, #1
   814ac:	4770      	bx	lr
	return 0;
   814ae:	2000      	movs	r0, #0
   814b0:	4770      	bx	lr
   814b2:	2000      	movs	r0, #0
}
   814b4:	4770      	bx	lr
   814b6:	bf00      	nop
   814b8:	400e0600 	.word	0x400e0600

000814bc <pin_init>:
 *
 * return none
 * pio  pins init
 */
static void pin_init(void)
{
   814bc:	b530      	push	{r4, r5, lr}
   814be:	b083      	sub	sp, #12
	/* Configure PIO clock. */
	pmc_enable_periph_clk(ID_PIOB);
   814c0:	200c      	movs	r0, #12
   814c2:	f7ff ffd1 	bl	81468 <pmc_enable_periph_clk>
	
	pio_set_output(PIOB, PIO_PB26, HIGH, DISABLE, ENABLE);
   814c6:	2401      	movs	r4, #1
   814c8:	9400      	str	r4, [sp, #0]
   814ca:	2300      	movs	r3, #0
   814cc:	4622      	mov	r2, r4
   814ce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   814d2:	480b      	ldr	r0, [pc, #44]	; (81500 <pin_init+0x44>)
   814d4:	f7ff fe7b 	bl	811ce <pio_set_output>
	pio_set_output(PIOA, PIO_PA14, LOW, DISABLE, ENABLE);
   814d8:	4d0a      	ldr	r5, [pc, #40]	; (81504 <pin_init+0x48>)
   814da:	9400      	str	r4, [sp, #0]
   814dc:	2300      	movs	r3, #0
   814de:	461a      	mov	r2, r3
   814e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   814e4:	4628      	mov	r0, r5
   814e6:	f7ff fe72 	bl	811ce <pio_set_output>
	pio_set_output(PIOA, PIO_PA19, LOW, DISABLE, ENABLE);
   814ea:	9400      	str	r4, [sp, #0]
   814ec:	2300      	movs	r3, #0
   814ee:	461a      	mov	r2, r3
   814f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   814f4:	4628      	mov	r0, r5
   814f6:	f7ff fe6a 	bl	811ce <pio_set_output>
}
   814fa:	b003      	add	sp, #12
   814fc:	bd30      	pop	{r4, r5, pc}
   814fe:	bf00      	nop
   81500:	400e1000 	.word	0x400e1000
   81504:	400e0e00 	.word	0x400e0e00

00081508 <external_interrupt_init>:
{
   81508:	b510      	push	{r4, lr}
   8150a:	b082      	sub	sp, #8
	pmc_enable_periph_clk(ID_PIOA);
   8150c:	200b      	movs	r0, #11
   8150e:	f7ff ffab 	bl	81468 <pmc_enable_periph_clk>
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP);
   81512:	4c10      	ldr	r4, [pc, #64]	; (81554 <external_interrupt_init+0x4c>)
   81514:	2201      	movs	r2, #1
   81516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8151a:	4620      	mov	r0, r4
   8151c:	f7ff fe37 	bl	8118e <pio_set_input>
	pio_set_debounce_filter(PIOA, PIO_PA15, 100000);
   81520:	4a0d      	ldr	r2, [pc, #52]	; (81558 <external_interrupt_init+0x50>)
   81522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81526:	4620      	mov	r0, r4
   81528:	f7ff fdd5 	bl	810d6 <pio_set_debounce_filter>
	pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_PULLUP | PIO_DEBOUNCE | PIO_IT_RISE_EDGE, data_handler);
   8152c:	4b0b      	ldr	r3, [pc, #44]	; (8155c <external_interrupt_init+0x54>)
   8152e:	9300      	str	r3, [sp, #0]
   81530:	2379      	movs	r3, #121	; 0x79
   81532:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81536:	210b      	movs	r1, #11
   81538:	4620      	mov	r0, r4
   8153a:	f7ff fed5 	bl	812e8 <pio_handler_set>
	pio_enable_interrupt(PIOA, PIO_PA15);
   8153e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81542:	4620      	mov	r0, r4
   81544:	f7ff fe1f 	bl	81186 <pio_enable_interrupt>
   81548:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8154c:	4b04      	ldr	r3, [pc, #16]	; (81560 <external_interrupt_init+0x58>)
   8154e:	601a      	str	r2, [r3, #0]
}
   81550:	b002      	add	sp, #8
   81552:	bd10      	pop	{r4, pc}
   81554:	400e0e00 	.word	0x400e0e00
   81558:	000186a0 	.word	0x000186a0
   8155c:	00080bf9 	.word	0x00080bf9
   81560:	e000e100 	.word	0xe000e100

00081564 <usart_serial_getchar>:
{
   81564:	b5f0      	push	{r4, r5, r6, r7, lr}
   81566:	b083      	sub	sp, #12
   81568:	4604      	mov	r4, r0
   8156a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8156c:	2300      	movs	r3, #0
   8156e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   81570:	4b25      	ldr	r3, [pc, #148]	; (81608 <usart_serial_getchar+0xa4>)
   81572:	4298      	cmp	r0, r3
   81574:	d00f      	beq.n	81596 <usart_serial_getchar+0x32>
	status_code_t status = STATUS_OK;
   81576:	2600      	movs	r6, #0
	if (USART0 == p_usart) {
   81578:	4b24      	ldr	r3, [pc, #144]	; (8160c <usart_serial_getchar+0xa8>)
   8157a:	429c      	cmp	r4, r3
   8157c:	d01b      	beq.n	815b6 <usart_serial_getchar+0x52>
	if (USART1 == p_usart) {
   8157e:	4b24      	ldr	r3, [pc, #144]	; (81610 <usart_serial_getchar+0xac>)
   81580:	429c      	cmp	r4, r3
   81582:	d022      	beq.n	815ca <usart_serial_getchar+0x66>
	if (USART2 == p_usart) {
   81584:	4b23      	ldr	r3, [pc, #140]	; (81614 <usart_serial_getchar+0xb0>)
   81586:	429c      	cmp	r4, r3
   81588:	d029      	beq.n	815de <usart_serial_getchar+0x7a>
	if (USART3 == p_usart) {
   8158a:	4b23      	ldr	r3, [pc, #140]	; (81618 <usart_serial_getchar+0xb4>)
   8158c:	429c      	cmp	r4, r3
   8158e:	d030      	beq.n	815f2 <usart_serial_getchar+0x8e>
	}
# endif
#endif /* ifdef USART */

	return status;
}
   81590:	4630      	mov	r0, r6
   81592:	b003      	add	sp, #12
   81594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81596:	4617      	mov	r7, r2
   81598:	4e20      	ldr	r6, [pc, #128]	; (8161c <usart_serial_getchar+0xb8>)
		while (uart_read((Uart*)p_usart, data)) {
   8159a:	4629      	mov	r1, r5
   8159c:	4620      	mov	r0, r4
   8159e:	f7ff f8f9 	bl	80794 <uart_read>
   815a2:	b130      	cbz	r0, 815b2 <usart_serial_getchar+0x4e>
			if (timeout != 0) {
   815a4:	2f00      	cmp	r7, #0
   815a6:	d0f8      	beq.n	8159a <usart_serial_getchar+0x36>
				if (--times <= 0) {
   815a8:	3e01      	subs	r6, #1
   815aa:	d1f6      	bne.n	8159a <usart_serial_getchar+0x36>
					status = ERR_TIMEOUT;
   815ac:	f06f 0602 	mvn.w	r6, #2
   815b0:	e7e2      	b.n	81578 <usart_serial_getchar+0x14>
	status_code_t status = STATUS_OK;
   815b2:	2600      	movs	r6, #0
   815b4:	e7e0      	b.n	81578 <usart_serial_getchar+0x14>
		while (usart_read(p_usart, &val));
   815b6:	a901      	add	r1, sp, #4
   815b8:	4620      	mov	r0, r4
   815ba:	f7ff f900 	bl	807be <usart_read>
   815be:	2800      	cmp	r0, #0
   815c0:	d1f9      	bne.n	815b6 <usart_serial_getchar+0x52>
		*data = (uint8_t)(val & 0xFF);
   815c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   815c6:	702b      	strb	r3, [r5, #0]
   815c8:	e7d9      	b.n	8157e <usart_serial_getchar+0x1a>
		while (usart_read(p_usart, &val));
   815ca:	a901      	add	r1, sp, #4
   815cc:	4620      	mov	r0, r4
   815ce:	f7ff f8f6 	bl	807be <usart_read>
   815d2:	2800      	cmp	r0, #0
   815d4:	d1f9      	bne.n	815ca <usart_serial_getchar+0x66>
		*data = (uint8_t)(val & 0xFF);
   815d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   815da:	702b      	strb	r3, [r5, #0]
   815dc:	e7d2      	b.n	81584 <usart_serial_getchar+0x20>
		while (usart_read(p_usart, &val));
   815de:	a901      	add	r1, sp, #4
   815e0:	4620      	mov	r0, r4
   815e2:	f7ff f8ec 	bl	807be <usart_read>
   815e6:	2800      	cmp	r0, #0
   815e8:	d1f9      	bne.n	815de <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   815ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   815ee:	702b      	strb	r3, [r5, #0]
   815f0:	e7cb      	b.n	8158a <usart_serial_getchar+0x26>
		while (usart_read(p_usart, &val));
   815f2:	a901      	add	r1, sp, #4
   815f4:	4620      	mov	r0, r4
   815f6:	f7ff f8e2 	bl	807be <usart_read>
   815fa:	2800      	cmp	r0, #0
   815fc:	d1f9      	bne.n	815f2 <usart_serial_getchar+0x8e>
		*data = (uint8_t)(val & 0xFF);
   815fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   81602:	702b      	strb	r3, [r5, #0]
   81604:	e7c4      	b.n	81590 <usart_serial_getchar+0x2c>
   81606:	bf00      	nop
   81608:	400e0800 	.word	0x400e0800
   8160c:	40098000 	.word	0x40098000
   81610:	4009c000 	.word	0x4009c000
   81614:	400a0000 	.word	0x400a0000
   81618:	400a4000 	.word	0x400a4000
   8161c:	0007a120 	.word	0x0007a120

00081620 <usart_serial_putchar>:
{
   81620:	b538      	push	{r3, r4, r5, lr}
   81622:	4604      	mov	r4, r0
   81624:	460d      	mov	r5, r1
	if (UART == (Uart*)p_usart) {
   81626:	4b1c      	ldr	r3, [pc, #112]	; (81698 <usart_serial_putchar+0x78>)
   81628:	4298      	cmp	r0, r3
   8162a:	d00d      	beq.n	81648 <usart_serial_putchar+0x28>
	if (USART0 == p_usart) {
   8162c:	4b1b      	ldr	r3, [pc, #108]	; (8169c <usart_serial_putchar+0x7c>)
   8162e:	4298      	cmp	r0, r3
   81630:	d012      	beq.n	81658 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81632:	4b1b      	ldr	r3, [pc, #108]	; (816a0 <usart_serial_putchar+0x80>)
   81634:	4298      	cmp	r0, r3
   81636:	d017      	beq.n	81668 <usart_serial_putchar+0x48>
	if (USART2 == p_usart) {
   81638:	4b1a      	ldr	r3, [pc, #104]	; (816a4 <usart_serial_putchar+0x84>)
   8163a:	4298      	cmp	r0, r3
   8163c:	d01c      	beq.n	81678 <usart_serial_putchar+0x58>
	if (USART3 == p_usart) {
   8163e:	4b1a      	ldr	r3, [pc, #104]	; (816a8 <usart_serial_putchar+0x88>)
   81640:	4298      	cmp	r0, r3
   81642:	d021      	beq.n	81688 <usart_serial_putchar+0x68>
	return 0;
   81644:	2000      	movs	r0, #0
}
   81646:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81648:	4629      	mov	r1, r5
   8164a:	4620      	mov	r0, r4
   8164c:	f7ff f899 	bl	80782 <uart_write>
   81650:	2800      	cmp	r0, #0
   81652:	d1f9      	bne.n	81648 <usart_serial_putchar+0x28>
		return 1;
   81654:	2001      	movs	r0, #1
   81656:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81658:	4629      	mov	r1, r5
   8165a:	4620      	mov	r0, r4
   8165c:	f7ff f8a4 	bl	807a8 <usart_write>
   81660:	2800      	cmp	r0, #0
   81662:	d1f9      	bne.n	81658 <usart_serial_putchar+0x38>
		return 1;
   81664:	2001      	movs	r0, #1
   81666:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81668:	4629      	mov	r1, r5
   8166a:	4620      	mov	r0, r4
   8166c:	f7ff f89c 	bl	807a8 <usart_write>
   81670:	2800      	cmp	r0, #0
   81672:	d1f9      	bne.n	81668 <usart_serial_putchar+0x48>
		return 1;
   81674:	2001      	movs	r0, #1
   81676:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81678:	4629      	mov	r1, r5
   8167a:	4620      	mov	r0, r4
   8167c:	f7ff f894 	bl	807a8 <usart_write>
   81680:	2800      	cmp	r0, #0
   81682:	d1f9      	bne.n	81678 <usart_serial_putchar+0x58>
		return 1;
   81684:	2001      	movs	r0, #1
   81686:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
   81688:	4629      	mov	r1, r5
   8168a:	4620      	mov	r0, r4
   8168c:	f7ff f88c 	bl	807a8 <usart_write>
   81690:	2800      	cmp	r0, #0
   81692:	d1f9      	bne.n	81688 <usart_serial_putchar+0x68>
		return 1;
   81694:	2001      	movs	r0, #1
   81696:	bd38      	pop	{r3, r4, r5, pc}
   81698:	400e0800 	.word	0x400e0800
   8169c:	40098000 	.word	0x40098000
   816a0:	4009c000 	.word	0x4009c000
   816a4:	400a0000 	.word	0x400a0000
   816a8:	400a4000 	.word	0x400a4000

000816ac <flash01_init>:
 *
 * return none
 * external interrupt  init
 */
static int flash01_init(void)
{
   816ac:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   816ae:	2006      	movs	r0, #6
   816b0:	f7ff feda 	bl	81468 <pmc_enable_periph_clk>
   816b4:	2007      	movs	r0, #7
   816b6:	f7ff fed7 	bl	81468 <pmc_enable_periph_clk>
 	unsigned char status = 0;
	 
	sysclk_enable_peripheral_clock(ID_EFC0);
	sysclk_enable_peripheral_clock(ID_EFC1);
	
	flash_init(FLASH_ACCESS_MODE_128, 6);											
   816ba:	2106      	movs	r1, #6
   816bc:	2000      	movs	r0, #0
   816be:	f7fe fd87 	bl	801d0 <flash_init>
	
	if (flash_is_security_bit_enabled() != 1)
   816c2:	f7fe fdd4 	bl	8026e <flash_is_security_bit_enabled>
   816c6:	2801      	cmp	r0, #1
   816c8:	d001      	beq.n	816ce <flash01_init+0x22>
		flash_enable_security_bit();
   816ca:	f7fe fdcb 	bl	80264 <flash_enable_security_bit>
		
	return status;
}
   816ce:	2000      	movs	r0, #0
   816d0:	bd08      	pop	{r3, pc}
	...

000816d4 <usart_init>:
{
   816d4:	b510      	push	{r4, lr}
   816d6:	b088      	sub	sp, #32
	usart_serial_options_t uart_serial_options = {
   816d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   816dc:	9304      	str	r3, [sp, #16]
   816de:	f44f 6300 	mov.w	r3, #2048	; 0x800
   816e2:	9306      	str	r3, [sp, #24]
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   816e4:	4a15      	ldr	r2, [pc, #84]	; (8173c <usart_init+0x68>)
   816e6:	f44f 7140 	mov.w	r1, #768	; 0x300
   816ea:	4815      	ldr	r0, [pc, #84]	; (81740 <usart_init+0x6c>)
   816ec:	f7ff fd8a 	bl	81204 <pio_configure_pin_group>
   816f0:	2008      	movs	r0, #8
   816f2:	f7ff feb9 	bl	81468 <pmc_enable_periph_clk>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   816f6:	4c13      	ldr	r4, [pc, #76]	; (81744 <usart_init+0x70>)
   816f8:	4b13      	ldr	r3, [pc, #76]	; (81748 <usart_init+0x74>)
   816fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   816fc:	4a13      	ldr	r2, [pc, #76]	; (8174c <usart_init+0x78>)
   816fe:	4b14      	ldr	r3, [pc, #80]	; (81750 <usart_init+0x7c>)
   81700:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81702:	4a14      	ldr	r2, [pc, #80]	; (81754 <usart_init+0x80>)
   81704:	4b14      	ldr	r3, [pc, #80]	; (81758 <usart_init+0x84>)
   81706:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81708:	4b14      	ldr	r3, [pc, #80]	; (8175c <usart_init+0x88>)
   8170a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8170c:	9b04      	ldr	r3, [sp, #16]
   8170e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81710:	9b06      	ldr	r3, [sp, #24]
   81712:	9303      	str	r3, [sp, #12]
   81714:	2008      	movs	r0, #8
   81716:	f7ff fea7 	bl	81468 <pmc_enable_periph_clk>
		uart_init((Uart*)p_usart, &uart_settings);
   8171a:	a901      	add	r1, sp, #4
   8171c:	4620      	mov	r0, r4
   8171e:	f7ff f815 	bl	8074c <uart_init>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81722:	4c0f      	ldr	r4, [pc, #60]	; (81760 <usart_init+0x8c>)
   81724:	6823      	ldr	r3, [r4, #0]
   81726:	2100      	movs	r1, #0
   81728:	6898      	ldr	r0, [r3, #8]
   8172a:	f000 fcf3 	bl	82114 <setbuf>
	setbuf(stdin, NULL);
   8172e:	6823      	ldr	r3, [r4, #0]
   81730:	2100      	movs	r1, #0
   81732:	6858      	ldr	r0, [r3, #4]
   81734:	f000 fcee 	bl	82114 <setbuf>
}
   81738:	b008      	add	sp, #32
   8173a:	bd10      	pop	{r4, pc}
   8173c:	08000001 	.word	0x08000001
   81740:	400e0e00 	.word	0x400e0e00
   81744:	400e0800 	.word	0x400e0800
   81748:	20072b50 	.word	0x20072b50
   8174c:	00081621 	.word	0x00081621
   81750:	20072b4c 	.word	0x20072b4c
   81754:	00081565 	.word	0x00081565
   81758:	20072b48 	.word	0x20072b48
   8175c:	0501bd00 	.word	0x0501bd00
   81760:	20072234 	.word	0x20072234

00081764 <board_init>:
 *
 * return none
 * board init
 */
void board_init(void)
{	
   81764:	b508      	push	{r3, lr}
	/* clock setup */
	sysclk_init();
   81766:	f7ff fc8d 	bl	81084 <sysclk_init>

	/* disable wdt */
	wdt_disable(WDT);
   8176a:	4806      	ldr	r0, [pc, #24]	; (81784 <board_init+0x20>)
   8176c:	f7ff f833 	bl	807d6 <wdt_disable>
	
	/* init pins */
	pin_init();
   81770:	f7ff fea4 	bl	814bc <pin_init>
	
	/* init external interrupt */
	external_interrupt_init();
   81774:	f7ff fec8 	bl	81508 <external_interrupt_init>
	
	/* init uart */
	usart_init();
   81778:	f7ff ffac 	bl	816d4 <usart_init>
	
	/* init flash */
	flash01_init();
   8177c:	f7ff ff96 	bl	816ac <flash01_init>
   81780:	bd08      	pop	{r3, pc}
   81782:	bf00      	nop
   81784:	400e1a50 	.word	0x400e1a50

00081788 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81788:	e7fe      	b.n	81788 <Dummy_Handler>
	...

0008178c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8178c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8178e:	4b15      	ldr	r3, [pc, #84]	; (817e4 <Reset_Handler+0x58>)
   81790:	4a15      	ldr	r2, [pc, #84]	; (817e8 <Reset_Handler+0x5c>)
   81792:	429a      	cmp	r2, r3
   81794:	d009      	beq.n	817aa <Reset_Handler+0x1e>
   81796:	4b13      	ldr	r3, [pc, #76]	; (817e4 <Reset_Handler+0x58>)
   81798:	4a13      	ldr	r2, [pc, #76]	; (817e8 <Reset_Handler+0x5c>)
   8179a:	e003      	b.n	817a4 <Reset_Handler+0x18>
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   8179c:	6811      	ldr	r1, [r2, #0]
   8179e:	6019      	str	r1, [r3, #0]
   817a0:	3304      	adds	r3, #4
   817a2:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
   817a4:	4911      	ldr	r1, [pc, #68]	; (817ec <Reset_Handler+0x60>)
   817a6:	428b      	cmp	r3, r1
   817a8:	d3f8      	bcc.n	8179c <Reset_Handler+0x10>
			*pDest++ = *pSrc++;
   817aa:	4b11      	ldr	r3, [pc, #68]	; (817f0 <Reset_Handler+0x64>)
   817ac:	e002      	b.n	817b4 <Reset_Handler+0x28>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   817ae:	2200      	movs	r2, #0
   817b0:	601a      	str	r2, [r3, #0]
   817b2:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
   817b4:	4a0f      	ldr	r2, [pc, #60]	; (817f4 <Reset_Handler+0x68>)
   817b6:	4293      	cmp	r3, r2
   817b8:	d3f9      	bcc.n	817ae <Reset_Handler+0x22>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   817ba:	4b0f      	ldr	r3, [pc, #60]	; (817f8 <Reset_Handler+0x6c>)
   817bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   817c0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   817c4:	490d      	ldr	r1, [pc, #52]	; (817fc <Reset_Handler+0x70>)
   817c6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   817c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   817cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   817d0:	d203      	bcs.n	817da <Reset_Handler+0x4e>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   817d2:	688b      	ldr	r3, [r1, #8]
   817d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   817d8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   817da:	f000 f8df 	bl	8199c <__libc_init_array>

	/* Branch to main function */
	main();
   817de:	f000 f8c3 	bl	81968 <main>
   817e2:	e7fe      	b.n	817e2 <Reset_Handler+0x56>
   817e4:	20070000 	.word	0x20070000
   817e8:	00082fcc 	.word	0x00082fcc
   817ec:	20072a74 	.word	0x20072a74
   817f0:	20072a74 	.word	0x20072a74
   817f4:	20072b7c 	.word	0x20072b7c
   817f8:	00080000 	.word	0x00080000
   817fc:	e000ed00 	.word	0xe000ed00

00081800 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81800:	4b3e      	ldr	r3, [pc, #248]	; (818fc <SystemCoreClockUpdate+0xfc>)
   81802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81804:	f003 0303 	and.w	r3, r3, #3
   81808:	2b03      	cmp	r3, #3
   8180a:	d83f      	bhi.n	8188c <SystemCoreClockUpdate+0x8c>
   8180c:	e8df f003 	tbb	[pc, r3]
   81810:	2d2d1102 	.word	0x2d2d1102
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81814:	4b3a      	ldr	r3, [pc, #232]	; (81900 <SystemCoreClockUpdate+0x100>)
   81816:	695b      	ldr	r3, [r3, #20]
   81818:	f013 0f80 	tst.w	r3, #128	; 0x80
   8181c:	d004      	beq.n	81828 <SystemCoreClockUpdate+0x28>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8181e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81822:	4b38      	ldr	r3, [pc, #224]	; (81904 <SystemCoreClockUpdate+0x104>)
   81824:	601a      	str	r2, [r3, #0]
   81826:	e031      	b.n	8188c <SystemCoreClockUpdate+0x8c>
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81828:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8182c:	4b35      	ldr	r3, [pc, #212]	; (81904 <SystemCoreClockUpdate+0x104>)
   8182e:	601a      	str	r2, [r3, #0]
   81830:	e02c      	b.n	8188c <SystemCoreClockUpdate+0x8c>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81832:	4b32      	ldr	r3, [pc, #200]	; (818fc <SystemCoreClockUpdate+0xfc>)
   81834:	6a1b      	ldr	r3, [r3, #32]
   81836:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8183a:	d003      	beq.n	81844 <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8183c:	4a32      	ldr	r2, [pc, #200]	; (81908 <SystemCoreClockUpdate+0x108>)
   8183e:	4b31      	ldr	r3, [pc, #196]	; (81904 <SystemCoreClockUpdate+0x104>)
   81840:	601a      	str	r2, [r3, #0]
   81842:	e023      	b.n	8188c <SystemCoreClockUpdate+0x8c>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81844:	4a31      	ldr	r2, [pc, #196]	; (8190c <SystemCoreClockUpdate+0x10c>)
   81846:	4b2f      	ldr	r3, [pc, #188]	; (81904 <SystemCoreClockUpdate+0x104>)
   81848:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8184a:	4b2c      	ldr	r3, [pc, #176]	; (818fc <SystemCoreClockUpdate+0xfc>)
   8184c:	6a1b      	ldr	r3, [r3, #32]
   8184e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81852:	2b10      	cmp	r3, #16
   81854:	d005      	beq.n	81862 <SystemCoreClockUpdate+0x62>
   81856:	2b20      	cmp	r3, #32
   81858:	d118      	bne.n	8188c <SystemCoreClockUpdate+0x8c>
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8185a:	4a2b      	ldr	r2, [pc, #172]	; (81908 <SystemCoreClockUpdate+0x108>)
   8185c:	4b29      	ldr	r3, [pc, #164]	; (81904 <SystemCoreClockUpdate+0x104>)
   8185e:	601a      	str	r2, [r3, #0]
				break;
   81860:	e014      	b.n	8188c <SystemCoreClockUpdate+0x8c>
				SystemCoreClock *= 2U;
   81862:	4a2b      	ldr	r2, [pc, #172]	; (81910 <SystemCoreClockUpdate+0x110>)
   81864:	4b27      	ldr	r3, [pc, #156]	; (81904 <SystemCoreClockUpdate+0x104>)
   81866:	601a      	str	r2, [r3, #0]
				break;
   81868:	e010      	b.n	8188c <SystemCoreClockUpdate+0x8c>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8186a:	4b24      	ldr	r3, [pc, #144]	; (818fc <SystemCoreClockUpdate+0xfc>)
   8186c:	6a1b      	ldr	r3, [r3, #32]
   8186e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81872:	d01a      	beq.n	818aa <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81874:	4a24      	ldr	r2, [pc, #144]	; (81908 <SystemCoreClockUpdate+0x108>)
   81876:	4b23      	ldr	r3, [pc, #140]	; (81904 <SystemCoreClockUpdate+0x104>)
   81878:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8187a:	4b20      	ldr	r3, [pc, #128]	; (818fc <SystemCoreClockUpdate+0xfc>)
   8187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8187e:	f003 0303 	and.w	r3, r3, #3
   81882:	2b02      	cmp	r3, #2
   81884:	d024      	beq.n	818d0 <SystemCoreClockUpdate+0xd0>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81886:	4a23      	ldr	r2, [pc, #140]	; (81914 <SystemCoreClockUpdate+0x114>)
   81888:	4b1e      	ldr	r3, [pc, #120]	; (81904 <SystemCoreClockUpdate+0x104>)
   8188a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8188c:	4b1b      	ldr	r3, [pc, #108]	; (818fc <SystemCoreClockUpdate+0xfc>)
   8188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81890:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81894:	2b70      	cmp	r3, #112	; 0x70
   81896:	d029      	beq.n	818ec <SystemCoreClockUpdate+0xec>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81898:	4b18      	ldr	r3, [pc, #96]	; (818fc <SystemCoreClockUpdate+0xfc>)
   8189a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8189c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   818a0:	4918      	ldr	r1, [pc, #96]	; (81904 <SystemCoreClockUpdate+0x104>)
   818a2:	680b      	ldr	r3, [r1, #0]
   818a4:	40d3      	lsrs	r3, r2
   818a6:	600b      	str	r3, [r1, #0]
   818a8:	4770      	bx	lr
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   818aa:	4a18      	ldr	r2, [pc, #96]	; (8190c <SystemCoreClockUpdate+0x10c>)
   818ac:	4b15      	ldr	r3, [pc, #84]	; (81904 <SystemCoreClockUpdate+0x104>)
   818ae:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   818b0:	4b12      	ldr	r3, [pc, #72]	; (818fc <SystemCoreClockUpdate+0xfc>)
   818b2:	6a1b      	ldr	r3, [r3, #32]
   818b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   818b8:	2b10      	cmp	r3, #16
   818ba:	d005      	beq.n	818c8 <SystemCoreClockUpdate+0xc8>
   818bc:	2b20      	cmp	r3, #32
   818be:	d1dc      	bne.n	8187a <SystemCoreClockUpdate+0x7a>
				SystemCoreClock *= 3U;
   818c0:	4a11      	ldr	r2, [pc, #68]	; (81908 <SystemCoreClockUpdate+0x108>)
   818c2:	4b10      	ldr	r3, [pc, #64]	; (81904 <SystemCoreClockUpdate+0x104>)
   818c4:	601a      	str	r2, [r3, #0]
				break;
   818c6:	e7d8      	b.n	8187a <SystemCoreClockUpdate+0x7a>
				SystemCoreClock *= 2U;
   818c8:	4a11      	ldr	r2, [pc, #68]	; (81910 <SystemCoreClockUpdate+0x110>)
   818ca:	4b0e      	ldr	r3, [pc, #56]	; (81904 <SystemCoreClockUpdate+0x104>)
   818cc:	601a      	str	r2, [r3, #0]
				break;
   818ce:	e7d4      	b.n	8187a <SystemCoreClockUpdate+0x7a>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   818d0:	480a      	ldr	r0, [pc, #40]	; (818fc <SystemCoreClockUpdate+0xfc>)
   818d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   818d4:	f3c2 420a 	ubfx	r2, r2, #16, #11
   818d8:	490a      	ldr	r1, [pc, #40]	; (81904 <SystemCoreClockUpdate+0x104>)
   818da:	680b      	ldr	r3, [r1, #0]
   818dc:	fb02 3303 	mla	r3, r2, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   818e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   818e2:	b2d2      	uxtb	r2, r2
   818e4:	fbb3 f3f2 	udiv	r3, r3, r2
   818e8:	600b      	str	r3, [r1, #0]
   818ea:	e7cf      	b.n	8188c <SystemCoreClockUpdate+0x8c>
		SystemCoreClock /= 3U;
   818ec:	4a05      	ldr	r2, [pc, #20]	; (81904 <SystemCoreClockUpdate+0x104>)
   818ee:	6813      	ldr	r3, [r2, #0]
   818f0:	4909      	ldr	r1, [pc, #36]	; (81918 <SystemCoreClockUpdate+0x118>)
   818f2:	fba1 1303 	umull	r1, r3, r1, r3
   818f6:	085b      	lsrs	r3, r3, #1
   818f8:	6013      	str	r3, [r2, #0]
   818fa:	4770      	bx	lr
   818fc:	400e0600 	.word	0x400e0600
   81900:	400e1a10 	.word	0x400e1a10
   81904:	20072230 	.word	0x20072230
   81908:	00b71b00 	.word	0x00b71b00
   8190c:	003d0900 	.word	0x003d0900
   81910:	007a1200 	.word	0x007a1200
   81914:	0e4e1c00 	.word	0x0e4e1c00
   81918:	aaaaaaab 	.word	0xaaaaaaab

0008191c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8191c:	4b0a      	ldr	r3, [pc, #40]	; (81948 <_sbrk+0x2c>)
   8191e:	681b      	ldr	r3, [r3, #0]
   81920:	b153      	cbz	r3, 81938 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81922:	4b09      	ldr	r3, [pc, #36]	; (81948 <_sbrk+0x2c>)
   81924:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81926:	181a      	adds	r2, r3, r0
   81928:	4908      	ldr	r1, [pc, #32]	; (8194c <_sbrk+0x30>)
   8192a:	4291      	cmp	r1, r2
   8192c:	db08      	blt.n	81940 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8192e:	4610      	mov	r0, r2
   81930:	4a05      	ldr	r2, [pc, #20]	; (81948 <_sbrk+0x2c>)
   81932:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81934:	4618      	mov	r0, r3
   81936:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81938:	4a05      	ldr	r2, [pc, #20]	; (81950 <_sbrk+0x34>)
   8193a:	4b03      	ldr	r3, [pc, #12]	; (81948 <_sbrk+0x2c>)
   8193c:	601a      	str	r2, [r3, #0]
   8193e:	e7f0      	b.n	81922 <_sbrk+0x6>
		return (caddr_t) -1;	
   81940:	f04f 30ff 	mov.w	r0, #4294967295
}
   81944:	4770      	bx	lr
   81946:	bf00      	nop
   81948:	20072b10 	.word	0x20072b10
   8194c:	20087ffc 	.word	0x20087ffc
   81950:	20077b80 	.word	0x20077b80

00081954 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81954:	f04f 30ff 	mov.w	r0, #4294967295
   81958:	4770      	bx	lr

0008195a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8195a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8195e:	604b      	str	r3, [r1, #4]

	return 0;
}
   81960:	2000      	movs	r0, #0
   81962:	4770      	bx	lr

00081964 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81964:	2000      	movs	r0, #0
   81966:	4770      	bx	lr

00081968 <main>:
#include <asf.h>
#include "uart_ops.h"
#include "rom.h"

int main (void)
{
   81968:	b508      	push	{r3, lr}
	mdi.type = RECV;
   8196a:	4b0a      	ldr	r3, [pc, #40]	; (81994 <main+0x2c>)
   8196c:	2210      	movs	r2, #16
   8196e:	701a      	strb	r2, [r3, #0]
	mdi.status = IDLE;
   81970:	220a      	movs	r2, #10
   81972:	705a      	strb	r2, [r3, #1]
		
	board_init();
   81974:	f7ff fef6 	bl	81764 <board_init>
   81978:	e005      	b.n	81986 <main+0x1e>
		while (uart_write((Uart*)p_usart, c)!=0);
   8197a:	2166      	movs	r1, #102	; 0x66
   8197c:	4806      	ldr	r0, [pc, #24]	; (81998 <main+0x30>)
   8197e:	f7fe ff00 	bl	80782 <uart_write>
   81982:	2800      	cmp	r0, #0
   81984:	d1f9      	bne.n	8197a <main+0x12>
							
	while(true) {
		if (uart_ops_recv() < 0)
   81986:	f7fe fcc5 	bl	80314 <uart_ops_recv>
   8198a:	2800      	cmp	r0, #0
   8198c:	dbf5      	blt.n	8197a <main+0x12>
			usart_serial_putchar((Usart *)UART, COMMAND_ERR);
		else 	
			uart_ops_handler();
   8198e:	f7fe fd4d 	bl	8042c <uart_ops_handler>
   81992:	e7f8      	b.n	81986 <main+0x1e>
   81994:	200701d8 	.word	0x200701d8
   81998:	400e0800 	.word	0x400e0800

0008199c <__libc_init_array>:
   8199c:	b570      	push	{r4, r5, r6, lr}
   8199e:	4e0f      	ldr	r6, [pc, #60]	; (819dc <__libc_init_array+0x40>)
   819a0:	4d0f      	ldr	r5, [pc, #60]	; (819e0 <__libc_init_array+0x44>)
   819a2:	1b76      	subs	r6, r6, r5
   819a4:	10b6      	asrs	r6, r6, #2
   819a6:	bf18      	it	ne
   819a8:	2400      	movne	r4, #0
   819aa:	d005      	beq.n	819b8 <__libc_init_array+0x1c>
   819ac:	3401      	adds	r4, #1
   819ae:	f855 3b04 	ldr.w	r3, [r5], #4
   819b2:	4798      	blx	r3
   819b4:	42a6      	cmp	r6, r4
   819b6:	d1f9      	bne.n	819ac <__libc_init_array+0x10>
   819b8:	4e0a      	ldr	r6, [pc, #40]	; (819e4 <__libc_init_array+0x48>)
   819ba:	4d0b      	ldr	r5, [pc, #44]	; (819e8 <__libc_init_array+0x4c>)
   819bc:	f001 fae2 	bl	82f84 <_init>
   819c0:	1b76      	subs	r6, r6, r5
   819c2:	10b6      	asrs	r6, r6, #2
   819c4:	bf18      	it	ne
   819c6:	2400      	movne	r4, #0
   819c8:	d006      	beq.n	819d8 <__libc_init_array+0x3c>
   819ca:	3401      	adds	r4, #1
   819cc:	f855 3b04 	ldr.w	r3, [r5], #4
   819d0:	4798      	blx	r3
   819d2:	42a6      	cmp	r6, r4
   819d4:	d1f9      	bne.n	819ca <__libc_init_array+0x2e>
   819d6:	bd70      	pop	{r4, r5, r6, pc}
   819d8:	bd70      	pop	{r4, r5, r6, pc}
   819da:	bf00      	nop
   819dc:	00082f90 	.word	0x00082f90
   819e0:	00082f90 	.word	0x00082f90
   819e4:	00082f98 	.word	0x00082f98
   819e8:	00082f90 	.word	0x00082f90

000819ec <malloc>:
   819ec:	4b02      	ldr	r3, [pc, #8]	; (819f8 <malloc+0xc>)
   819ee:	4601      	mov	r1, r0
   819f0:	6818      	ldr	r0, [r3, #0]
   819f2:	f000 b80b 	b.w	81a0c <_malloc_r>
   819f6:	bf00      	nop
   819f8:	20072234 	.word	0x20072234

000819fc <free>:
   819fc:	4b02      	ldr	r3, [pc, #8]	; (81a08 <free+0xc>)
   819fe:	4601      	mov	r1, r0
   81a00:	6818      	ldr	r0, [r3, #0]
   81a02:	f000 be01 	b.w	82608 <_free_r>
   81a06:	bf00      	nop
   81a08:	20072234 	.word	0x20072234

00081a0c <_malloc_r>:
   81a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a10:	f101 060b 	add.w	r6, r1, #11
   81a14:	2e16      	cmp	r6, #22
   81a16:	b083      	sub	sp, #12
   81a18:	4605      	mov	r5, r0
   81a1a:	f240 809e 	bls.w	81b5a <_malloc_r+0x14e>
   81a1e:	f036 0607 	bics.w	r6, r6, #7
   81a22:	f100 80bd 	bmi.w	81ba0 <_malloc_r+0x194>
   81a26:	42b1      	cmp	r1, r6
   81a28:	f200 80ba 	bhi.w	81ba0 <_malloc_r+0x194>
   81a2c:	f000 fb54 	bl	820d8 <__malloc_lock>
   81a30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81a34:	f0c0 8285 	bcc.w	81f42 <_malloc_r+0x536>
   81a38:	0a73      	lsrs	r3, r6, #9
   81a3a:	f000 80b8 	beq.w	81bae <_malloc_r+0x1a2>
   81a3e:	2b04      	cmp	r3, #4
   81a40:	f200 816c 	bhi.w	81d1c <_malloc_r+0x310>
   81a44:	09b3      	lsrs	r3, r6, #6
   81a46:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81a4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81a4e:	00c1      	lsls	r1, r0, #3
   81a50:	4fb8      	ldr	r7, [pc, #736]	; (81d34 <_malloc_r+0x328>)
   81a52:	4439      	add	r1, r7
   81a54:	684c      	ldr	r4, [r1, #4]
   81a56:	3908      	subs	r1, #8
   81a58:	42a1      	cmp	r1, r4
   81a5a:	d106      	bne.n	81a6a <_malloc_r+0x5e>
   81a5c:	e00c      	b.n	81a78 <_malloc_r+0x6c>
   81a5e:	2a00      	cmp	r2, #0
   81a60:	f280 80ab 	bge.w	81bba <_malloc_r+0x1ae>
   81a64:	68e4      	ldr	r4, [r4, #12]
   81a66:	42a1      	cmp	r1, r4
   81a68:	d006      	beq.n	81a78 <_malloc_r+0x6c>
   81a6a:	6863      	ldr	r3, [r4, #4]
   81a6c:	f023 0303 	bic.w	r3, r3, #3
   81a70:	1b9a      	subs	r2, r3, r6
   81a72:	2a0f      	cmp	r2, #15
   81a74:	ddf3      	ble.n	81a5e <_malloc_r+0x52>
   81a76:	4670      	mov	r0, lr
   81a78:	693c      	ldr	r4, [r7, #16]
   81a7a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81d48 <_malloc_r+0x33c>
   81a7e:	4574      	cmp	r4, lr
   81a80:	f000 819e 	beq.w	81dc0 <_malloc_r+0x3b4>
   81a84:	6863      	ldr	r3, [r4, #4]
   81a86:	f023 0303 	bic.w	r3, r3, #3
   81a8a:	1b9a      	subs	r2, r3, r6
   81a8c:	2a0f      	cmp	r2, #15
   81a8e:	f300 8183 	bgt.w	81d98 <_malloc_r+0x38c>
   81a92:	2a00      	cmp	r2, #0
   81a94:	f8c7 e014 	str.w	lr, [r7, #20]
   81a98:	f8c7 e010 	str.w	lr, [r7, #16]
   81a9c:	f280 8091 	bge.w	81bc2 <_malloc_r+0x1b6>
   81aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81aa4:	f080 8154 	bcs.w	81d50 <_malloc_r+0x344>
   81aa8:	2201      	movs	r2, #1
   81aaa:	08db      	lsrs	r3, r3, #3
   81aac:	6879      	ldr	r1, [r7, #4]
   81aae:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81ab2:	4413      	add	r3, r2
   81ab4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81ab8:	fa02 f20c 	lsl.w	r2, r2, ip
   81abc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81ac0:	430a      	orrs	r2, r1
   81ac2:	f1ac 0108 	sub.w	r1, ip, #8
   81ac6:	60e1      	str	r1, [r4, #12]
   81ac8:	f8c4 8008 	str.w	r8, [r4, #8]
   81acc:	607a      	str	r2, [r7, #4]
   81ace:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   81ad2:	f8c8 400c 	str.w	r4, [r8, #12]
   81ad6:	2401      	movs	r4, #1
   81ad8:	1083      	asrs	r3, r0, #2
   81ada:	409c      	lsls	r4, r3
   81adc:	4294      	cmp	r4, r2
   81ade:	d87d      	bhi.n	81bdc <_malloc_r+0x1d0>
   81ae0:	4214      	tst	r4, r2
   81ae2:	d106      	bne.n	81af2 <_malloc_r+0xe6>
   81ae4:	f020 0003 	bic.w	r0, r0, #3
   81ae8:	0064      	lsls	r4, r4, #1
   81aea:	4214      	tst	r4, r2
   81aec:	f100 0004 	add.w	r0, r0, #4
   81af0:	d0fa      	beq.n	81ae8 <_malloc_r+0xdc>
   81af2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81af6:	46cc      	mov	ip, r9
   81af8:	4680      	mov	r8, r0
   81afa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81afe:	459c      	cmp	ip, r3
   81b00:	d107      	bne.n	81b12 <_malloc_r+0x106>
   81b02:	e15f      	b.n	81dc4 <_malloc_r+0x3b8>
   81b04:	2a00      	cmp	r2, #0
   81b06:	f280 816d 	bge.w	81de4 <_malloc_r+0x3d8>
   81b0a:	68db      	ldr	r3, [r3, #12]
   81b0c:	459c      	cmp	ip, r3
   81b0e:	f000 8159 	beq.w	81dc4 <_malloc_r+0x3b8>
   81b12:	6859      	ldr	r1, [r3, #4]
   81b14:	f021 0103 	bic.w	r1, r1, #3
   81b18:	1b8a      	subs	r2, r1, r6
   81b1a:	2a0f      	cmp	r2, #15
   81b1c:	ddf2      	ble.n	81b04 <_malloc_r+0xf8>
   81b1e:	68dc      	ldr	r4, [r3, #12]
   81b20:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81b24:	f046 0801 	orr.w	r8, r6, #1
   81b28:	4628      	mov	r0, r5
   81b2a:	441e      	add	r6, r3
   81b2c:	f042 0501 	orr.w	r5, r2, #1
   81b30:	f8c3 8004 	str.w	r8, [r3, #4]
   81b34:	f8cc 400c 	str.w	r4, [ip, #12]
   81b38:	f8c4 c008 	str.w	ip, [r4, #8]
   81b3c:	617e      	str	r6, [r7, #20]
   81b3e:	613e      	str	r6, [r7, #16]
   81b40:	f8c6 e00c 	str.w	lr, [r6, #12]
   81b44:	f8c6 e008 	str.w	lr, [r6, #8]
   81b48:	6075      	str	r5, [r6, #4]
   81b4a:	505a      	str	r2, [r3, r1]
   81b4c:	9300      	str	r3, [sp, #0]
   81b4e:	f000 fac9 	bl	820e4 <__malloc_unlock>
   81b52:	9b00      	ldr	r3, [sp, #0]
   81b54:	f103 0408 	add.w	r4, r3, #8
   81b58:	e01e      	b.n	81b98 <_malloc_r+0x18c>
   81b5a:	2910      	cmp	r1, #16
   81b5c:	d820      	bhi.n	81ba0 <_malloc_r+0x194>
   81b5e:	f000 fabb 	bl	820d8 <__malloc_lock>
   81b62:	2610      	movs	r6, #16
   81b64:	2318      	movs	r3, #24
   81b66:	2002      	movs	r0, #2
   81b68:	4f72      	ldr	r7, [pc, #456]	; (81d34 <_malloc_r+0x328>)
   81b6a:	443b      	add	r3, r7
   81b6c:	685c      	ldr	r4, [r3, #4]
   81b6e:	f1a3 0208 	sub.w	r2, r3, #8
   81b72:	4294      	cmp	r4, r2
   81b74:	f000 812f 	beq.w	81dd6 <_malloc_r+0x3ca>
   81b78:	6863      	ldr	r3, [r4, #4]
   81b7a:	68e1      	ldr	r1, [r4, #12]
   81b7c:	f023 0303 	bic.w	r3, r3, #3
   81b80:	4423      	add	r3, r4
   81b82:	685a      	ldr	r2, [r3, #4]
   81b84:	68a6      	ldr	r6, [r4, #8]
   81b86:	f042 0201 	orr.w	r2, r2, #1
   81b8a:	60f1      	str	r1, [r6, #12]
   81b8c:	4628      	mov	r0, r5
   81b8e:	608e      	str	r6, [r1, #8]
   81b90:	605a      	str	r2, [r3, #4]
   81b92:	f000 faa7 	bl	820e4 <__malloc_unlock>
   81b96:	3408      	adds	r4, #8
   81b98:	4620      	mov	r0, r4
   81b9a:	b003      	add	sp, #12
   81b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ba0:	2400      	movs	r4, #0
   81ba2:	230c      	movs	r3, #12
   81ba4:	4620      	mov	r0, r4
   81ba6:	602b      	str	r3, [r5, #0]
   81ba8:	b003      	add	sp, #12
   81baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bae:	2040      	movs	r0, #64	; 0x40
   81bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
   81bb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81bb8:	e74a      	b.n	81a50 <_malloc_r+0x44>
   81bba:	4423      	add	r3, r4
   81bbc:	685a      	ldr	r2, [r3, #4]
   81bbe:	68e1      	ldr	r1, [r4, #12]
   81bc0:	e7e0      	b.n	81b84 <_malloc_r+0x178>
   81bc2:	4423      	add	r3, r4
   81bc4:	685a      	ldr	r2, [r3, #4]
   81bc6:	4628      	mov	r0, r5
   81bc8:	f042 0201 	orr.w	r2, r2, #1
   81bcc:	605a      	str	r2, [r3, #4]
   81bce:	3408      	adds	r4, #8
   81bd0:	f000 fa88 	bl	820e4 <__malloc_unlock>
   81bd4:	4620      	mov	r0, r4
   81bd6:	b003      	add	sp, #12
   81bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bdc:	68bc      	ldr	r4, [r7, #8]
   81bde:	6863      	ldr	r3, [r4, #4]
   81be0:	f023 0803 	bic.w	r8, r3, #3
   81be4:	45b0      	cmp	r8, r6
   81be6:	d304      	bcc.n	81bf2 <_malloc_r+0x1e6>
   81be8:	eba8 0306 	sub.w	r3, r8, r6
   81bec:	2b0f      	cmp	r3, #15
   81bee:	f300 8085 	bgt.w	81cfc <_malloc_r+0x2f0>
   81bf2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81d4c <_malloc_r+0x340>
   81bf6:	4b50      	ldr	r3, [pc, #320]	; (81d38 <_malloc_r+0x32c>)
   81bf8:	f8d9 2000 	ldr.w	r2, [r9]
   81bfc:	681b      	ldr	r3, [r3, #0]
   81bfe:	3201      	adds	r2, #1
   81c00:	4433      	add	r3, r6
   81c02:	eb04 0a08 	add.w	sl, r4, r8
   81c06:	f000 8154 	beq.w	81eb2 <_malloc_r+0x4a6>
   81c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81c0e:	330f      	adds	r3, #15
   81c10:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   81c14:	f02b 0b0f 	bic.w	fp, fp, #15
   81c18:	4659      	mov	r1, fp
   81c1a:	4628      	mov	r0, r5
   81c1c:	f000 fa68 	bl	820f0 <_sbrk_r>
   81c20:	1c41      	adds	r1, r0, #1
   81c22:	4602      	mov	r2, r0
   81c24:	f000 80fb 	beq.w	81e1e <_malloc_r+0x412>
   81c28:	4582      	cmp	sl, r0
   81c2a:	f200 80f6 	bhi.w	81e1a <_malloc_r+0x40e>
   81c2e:	4b43      	ldr	r3, [pc, #268]	; (81d3c <_malloc_r+0x330>)
   81c30:	6819      	ldr	r1, [r3, #0]
   81c32:	4459      	add	r1, fp
   81c34:	6019      	str	r1, [r3, #0]
   81c36:	f000 814c 	beq.w	81ed2 <_malloc_r+0x4c6>
   81c3a:	f8d9 0000 	ldr.w	r0, [r9]
   81c3e:	3001      	adds	r0, #1
   81c40:	bf1b      	ittet	ne
   81c42:	eba2 0a0a 	subne.w	sl, r2, sl
   81c46:	4451      	addne	r1, sl
   81c48:	f8c9 2000 	streq.w	r2, [r9]
   81c4c:	6019      	strne	r1, [r3, #0]
   81c4e:	f012 0107 	ands.w	r1, r2, #7
   81c52:	f000 8114 	beq.w	81e7e <_malloc_r+0x472>
   81c56:	f1c1 0008 	rsb	r0, r1, #8
   81c5a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81c5e:	4402      	add	r2, r0
   81c60:	3108      	adds	r1, #8
   81c62:	eb02 090b 	add.w	r9, r2, fp
   81c66:	f3c9 090b 	ubfx	r9, r9, #0, #12
   81c6a:	eba1 0909 	sub.w	r9, r1, r9
   81c6e:	4649      	mov	r1, r9
   81c70:	4628      	mov	r0, r5
   81c72:	9301      	str	r3, [sp, #4]
   81c74:	9200      	str	r2, [sp, #0]
   81c76:	f000 fa3b 	bl	820f0 <_sbrk_r>
   81c7a:	1c43      	adds	r3, r0, #1
   81c7c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81c80:	f000 8142 	beq.w	81f08 <_malloc_r+0x4fc>
   81c84:	1a80      	subs	r0, r0, r2
   81c86:	4448      	add	r0, r9
   81c88:	f040 0001 	orr.w	r0, r0, #1
   81c8c:	6819      	ldr	r1, [r3, #0]
   81c8e:	42bc      	cmp	r4, r7
   81c90:	4449      	add	r1, r9
   81c92:	60ba      	str	r2, [r7, #8]
   81c94:	6019      	str	r1, [r3, #0]
   81c96:	6050      	str	r0, [r2, #4]
   81c98:	d017      	beq.n	81cca <_malloc_r+0x2be>
   81c9a:	f1b8 0f0f 	cmp.w	r8, #15
   81c9e:	f240 80fa 	bls.w	81e96 <_malloc_r+0x48a>
   81ca2:	f04f 0c05 	mov.w	ip, #5
   81ca6:	6862      	ldr	r2, [r4, #4]
   81ca8:	f1a8 000c 	sub.w	r0, r8, #12
   81cac:	f020 0007 	bic.w	r0, r0, #7
   81cb0:	f002 0201 	and.w	r2, r2, #1
   81cb4:	eb04 0e00 	add.w	lr, r4, r0
   81cb8:	4302      	orrs	r2, r0
   81cba:	280f      	cmp	r0, #15
   81cbc:	6062      	str	r2, [r4, #4]
   81cbe:	f8ce c004 	str.w	ip, [lr, #4]
   81cc2:	f8ce c008 	str.w	ip, [lr, #8]
   81cc6:	f200 8116 	bhi.w	81ef6 <_malloc_r+0x4ea>
   81cca:	4b1d      	ldr	r3, [pc, #116]	; (81d40 <_malloc_r+0x334>)
   81ccc:	68bc      	ldr	r4, [r7, #8]
   81cce:	681a      	ldr	r2, [r3, #0]
   81cd0:	4291      	cmp	r1, r2
   81cd2:	bf88      	it	hi
   81cd4:	6019      	strhi	r1, [r3, #0]
   81cd6:	4b1b      	ldr	r3, [pc, #108]	; (81d44 <_malloc_r+0x338>)
   81cd8:	681a      	ldr	r2, [r3, #0]
   81cda:	4291      	cmp	r1, r2
   81cdc:	6862      	ldr	r2, [r4, #4]
   81cde:	bf88      	it	hi
   81ce0:	6019      	strhi	r1, [r3, #0]
   81ce2:	f022 0203 	bic.w	r2, r2, #3
   81ce6:	4296      	cmp	r6, r2
   81ce8:	eba2 0306 	sub.w	r3, r2, r6
   81cec:	d801      	bhi.n	81cf2 <_malloc_r+0x2e6>
   81cee:	2b0f      	cmp	r3, #15
   81cf0:	dc04      	bgt.n	81cfc <_malloc_r+0x2f0>
   81cf2:	4628      	mov	r0, r5
   81cf4:	f000 f9f6 	bl	820e4 <__malloc_unlock>
   81cf8:	2400      	movs	r4, #0
   81cfa:	e74d      	b.n	81b98 <_malloc_r+0x18c>
   81cfc:	f046 0201 	orr.w	r2, r6, #1
   81d00:	f043 0301 	orr.w	r3, r3, #1
   81d04:	4426      	add	r6, r4
   81d06:	6062      	str	r2, [r4, #4]
   81d08:	4628      	mov	r0, r5
   81d0a:	60be      	str	r6, [r7, #8]
   81d0c:	3408      	adds	r4, #8
   81d0e:	6073      	str	r3, [r6, #4]
   81d10:	f000 f9e8 	bl	820e4 <__malloc_unlock>
   81d14:	4620      	mov	r0, r4
   81d16:	b003      	add	sp, #12
   81d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d1c:	2b14      	cmp	r3, #20
   81d1e:	d970      	bls.n	81e02 <_malloc_r+0x3f6>
   81d20:	2b54      	cmp	r3, #84	; 0x54
   81d22:	f200 80a2 	bhi.w	81e6a <_malloc_r+0x45e>
   81d26:	0b33      	lsrs	r3, r6, #12
   81d28:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   81d2c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81d30:	00c1      	lsls	r1, r0, #3
   81d32:	e68d      	b.n	81a50 <_malloc_r+0x44>
   81d34:	20072660 	.word	0x20072660
   81d38:	20072b44 	.word	0x20072b44
   81d3c:	20072b14 	.word	0x20072b14
   81d40:	20072b3c 	.word	0x20072b3c
   81d44:	20072b40 	.word	0x20072b40
   81d48:	20072668 	.word	0x20072668
   81d4c:	20072a68 	.word	0x20072a68
   81d50:	0a5a      	lsrs	r2, r3, #9
   81d52:	2a04      	cmp	r2, #4
   81d54:	d95b      	bls.n	81e0e <_malloc_r+0x402>
   81d56:	2a14      	cmp	r2, #20
   81d58:	f200 80ae 	bhi.w	81eb8 <_malloc_r+0x4ac>
   81d5c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81d60:	00c9      	lsls	r1, r1, #3
   81d62:	325b      	adds	r2, #91	; 0x5b
   81d64:	eb07 0c01 	add.w	ip, r7, r1
   81d68:	5879      	ldr	r1, [r7, r1]
   81d6a:	f1ac 0c08 	sub.w	ip, ip, #8
   81d6e:	458c      	cmp	ip, r1
   81d70:	f000 8088 	beq.w	81e84 <_malloc_r+0x478>
   81d74:	684a      	ldr	r2, [r1, #4]
   81d76:	f022 0203 	bic.w	r2, r2, #3
   81d7a:	4293      	cmp	r3, r2
   81d7c:	d273      	bcs.n	81e66 <_malloc_r+0x45a>
   81d7e:	6889      	ldr	r1, [r1, #8]
   81d80:	458c      	cmp	ip, r1
   81d82:	d1f7      	bne.n	81d74 <_malloc_r+0x368>
   81d84:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81d88:	687a      	ldr	r2, [r7, #4]
   81d8a:	60e3      	str	r3, [r4, #12]
   81d8c:	f8c4 c008 	str.w	ip, [r4, #8]
   81d90:	609c      	str	r4, [r3, #8]
   81d92:	f8cc 400c 	str.w	r4, [ip, #12]
   81d96:	e69e      	b.n	81ad6 <_malloc_r+0xca>
   81d98:	f046 0c01 	orr.w	ip, r6, #1
   81d9c:	f042 0101 	orr.w	r1, r2, #1
   81da0:	4426      	add	r6, r4
   81da2:	f8c4 c004 	str.w	ip, [r4, #4]
   81da6:	4628      	mov	r0, r5
   81da8:	617e      	str	r6, [r7, #20]
   81daa:	613e      	str	r6, [r7, #16]
   81dac:	f8c6 e00c 	str.w	lr, [r6, #12]
   81db0:	f8c6 e008 	str.w	lr, [r6, #8]
   81db4:	6071      	str	r1, [r6, #4]
   81db6:	50e2      	str	r2, [r4, r3]
   81db8:	f000 f994 	bl	820e4 <__malloc_unlock>
   81dbc:	3408      	adds	r4, #8
   81dbe:	e6eb      	b.n	81b98 <_malloc_r+0x18c>
   81dc0:	687a      	ldr	r2, [r7, #4]
   81dc2:	e688      	b.n	81ad6 <_malloc_r+0xca>
   81dc4:	f108 0801 	add.w	r8, r8, #1
   81dc8:	f018 0f03 	tst.w	r8, #3
   81dcc:	f10c 0c08 	add.w	ip, ip, #8
   81dd0:	f47f ae93 	bne.w	81afa <_malloc_r+0xee>
   81dd4:	e02d      	b.n	81e32 <_malloc_r+0x426>
   81dd6:	68dc      	ldr	r4, [r3, #12]
   81dd8:	42a3      	cmp	r3, r4
   81dda:	bf08      	it	eq
   81ddc:	3002      	addeq	r0, #2
   81dde:	f43f ae4b 	beq.w	81a78 <_malloc_r+0x6c>
   81de2:	e6c9      	b.n	81b78 <_malloc_r+0x16c>
   81de4:	461c      	mov	r4, r3
   81de6:	4419      	add	r1, r3
   81de8:	684a      	ldr	r2, [r1, #4]
   81dea:	68db      	ldr	r3, [r3, #12]
   81dec:	f854 6f08 	ldr.w	r6, [r4, #8]!
   81df0:	f042 0201 	orr.w	r2, r2, #1
   81df4:	604a      	str	r2, [r1, #4]
   81df6:	4628      	mov	r0, r5
   81df8:	60f3      	str	r3, [r6, #12]
   81dfa:	609e      	str	r6, [r3, #8]
   81dfc:	f000 f972 	bl	820e4 <__malloc_unlock>
   81e00:	e6ca      	b.n	81b98 <_malloc_r+0x18c>
   81e02:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   81e06:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   81e0a:	00c1      	lsls	r1, r0, #3
   81e0c:	e620      	b.n	81a50 <_malloc_r+0x44>
   81e0e:	099a      	lsrs	r2, r3, #6
   81e10:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81e14:	00c9      	lsls	r1, r1, #3
   81e16:	3238      	adds	r2, #56	; 0x38
   81e18:	e7a4      	b.n	81d64 <_malloc_r+0x358>
   81e1a:	42bc      	cmp	r4, r7
   81e1c:	d054      	beq.n	81ec8 <_malloc_r+0x4bc>
   81e1e:	68bc      	ldr	r4, [r7, #8]
   81e20:	6862      	ldr	r2, [r4, #4]
   81e22:	f022 0203 	bic.w	r2, r2, #3
   81e26:	e75e      	b.n	81ce6 <_malloc_r+0x2da>
   81e28:	f859 3908 	ldr.w	r3, [r9], #-8
   81e2c:	4599      	cmp	r9, r3
   81e2e:	f040 8086 	bne.w	81f3e <_malloc_r+0x532>
   81e32:	f010 0f03 	tst.w	r0, #3
   81e36:	f100 30ff 	add.w	r0, r0, #4294967295
   81e3a:	d1f5      	bne.n	81e28 <_malloc_r+0x41c>
   81e3c:	687b      	ldr	r3, [r7, #4]
   81e3e:	ea23 0304 	bic.w	r3, r3, r4
   81e42:	607b      	str	r3, [r7, #4]
   81e44:	0064      	lsls	r4, r4, #1
   81e46:	429c      	cmp	r4, r3
   81e48:	f63f aec8 	bhi.w	81bdc <_malloc_r+0x1d0>
   81e4c:	2c00      	cmp	r4, #0
   81e4e:	f43f aec5 	beq.w	81bdc <_malloc_r+0x1d0>
   81e52:	421c      	tst	r4, r3
   81e54:	4640      	mov	r0, r8
   81e56:	f47f ae4c 	bne.w	81af2 <_malloc_r+0xe6>
   81e5a:	0064      	lsls	r4, r4, #1
   81e5c:	421c      	tst	r4, r3
   81e5e:	f100 0004 	add.w	r0, r0, #4
   81e62:	d0fa      	beq.n	81e5a <_malloc_r+0x44e>
   81e64:	e645      	b.n	81af2 <_malloc_r+0xe6>
   81e66:	468c      	mov	ip, r1
   81e68:	e78c      	b.n	81d84 <_malloc_r+0x378>
   81e6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81e6e:	d815      	bhi.n	81e9c <_malloc_r+0x490>
   81e70:	0bf3      	lsrs	r3, r6, #15
   81e72:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81e76:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   81e7a:	00c1      	lsls	r1, r0, #3
   81e7c:	e5e8      	b.n	81a50 <_malloc_r+0x44>
   81e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81e82:	e6ee      	b.n	81c62 <_malloc_r+0x256>
   81e84:	2101      	movs	r1, #1
   81e86:	687b      	ldr	r3, [r7, #4]
   81e88:	1092      	asrs	r2, r2, #2
   81e8a:	fa01 f202 	lsl.w	r2, r1, r2
   81e8e:	431a      	orrs	r2, r3
   81e90:	607a      	str	r2, [r7, #4]
   81e92:	4663      	mov	r3, ip
   81e94:	e779      	b.n	81d8a <_malloc_r+0x37e>
   81e96:	2301      	movs	r3, #1
   81e98:	6053      	str	r3, [r2, #4]
   81e9a:	e72a      	b.n	81cf2 <_malloc_r+0x2e6>
   81e9c:	f240 5254 	movw	r2, #1364	; 0x554
   81ea0:	4293      	cmp	r3, r2
   81ea2:	d822      	bhi.n	81eea <_malloc_r+0x4de>
   81ea4:	0cb3      	lsrs	r3, r6, #18
   81ea6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   81eaa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   81eae:	00c1      	lsls	r1, r0, #3
   81eb0:	e5ce      	b.n	81a50 <_malloc_r+0x44>
   81eb2:	f103 0b10 	add.w	fp, r3, #16
   81eb6:	e6af      	b.n	81c18 <_malloc_r+0x20c>
   81eb8:	2a54      	cmp	r2, #84	; 0x54
   81eba:	d829      	bhi.n	81f10 <_malloc_r+0x504>
   81ebc:	0b1a      	lsrs	r2, r3, #12
   81ebe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81ec2:	00c9      	lsls	r1, r1, #3
   81ec4:	326e      	adds	r2, #110	; 0x6e
   81ec6:	e74d      	b.n	81d64 <_malloc_r+0x358>
   81ec8:	4b20      	ldr	r3, [pc, #128]	; (81f4c <_malloc_r+0x540>)
   81eca:	6819      	ldr	r1, [r3, #0]
   81ecc:	4459      	add	r1, fp
   81ece:	6019      	str	r1, [r3, #0]
   81ed0:	e6b3      	b.n	81c3a <_malloc_r+0x22e>
   81ed2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   81ed6:	2800      	cmp	r0, #0
   81ed8:	f47f aeaf 	bne.w	81c3a <_malloc_r+0x22e>
   81edc:	eb08 030b 	add.w	r3, r8, fp
   81ee0:	68ba      	ldr	r2, [r7, #8]
   81ee2:	f043 0301 	orr.w	r3, r3, #1
   81ee6:	6053      	str	r3, [r2, #4]
   81ee8:	e6ef      	b.n	81cca <_malloc_r+0x2be>
   81eea:	207f      	movs	r0, #127	; 0x7f
   81eec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81ef0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   81ef4:	e5ac      	b.n	81a50 <_malloc_r+0x44>
   81ef6:	f104 0108 	add.w	r1, r4, #8
   81efa:	4628      	mov	r0, r5
   81efc:	9300      	str	r3, [sp, #0]
   81efe:	f000 fb83 	bl	82608 <_free_r>
   81f02:	9b00      	ldr	r3, [sp, #0]
   81f04:	6819      	ldr	r1, [r3, #0]
   81f06:	e6e0      	b.n	81cca <_malloc_r+0x2be>
   81f08:	2001      	movs	r0, #1
   81f0a:	f04f 0900 	mov.w	r9, #0
   81f0e:	e6bd      	b.n	81c8c <_malloc_r+0x280>
   81f10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81f14:	d805      	bhi.n	81f22 <_malloc_r+0x516>
   81f16:	0bda      	lsrs	r2, r3, #15
   81f18:	f102 0178 	add.w	r1, r2, #120	; 0x78
   81f1c:	00c9      	lsls	r1, r1, #3
   81f1e:	3277      	adds	r2, #119	; 0x77
   81f20:	e720      	b.n	81d64 <_malloc_r+0x358>
   81f22:	f240 5154 	movw	r1, #1364	; 0x554
   81f26:	428a      	cmp	r2, r1
   81f28:	d805      	bhi.n	81f36 <_malloc_r+0x52a>
   81f2a:	0c9a      	lsrs	r2, r3, #18
   81f2c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81f30:	00c9      	lsls	r1, r1, #3
   81f32:	327c      	adds	r2, #124	; 0x7c
   81f34:	e716      	b.n	81d64 <_malloc_r+0x358>
   81f36:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81f3a:	227e      	movs	r2, #126	; 0x7e
   81f3c:	e712      	b.n	81d64 <_malloc_r+0x358>
   81f3e:	687b      	ldr	r3, [r7, #4]
   81f40:	e780      	b.n	81e44 <_malloc_r+0x438>
   81f42:	08f0      	lsrs	r0, r6, #3
   81f44:	f106 0308 	add.w	r3, r6, #8
   81f48:	e60e      	b.n	81b68 <_malloc_r+0x15c>
   81f4a:	bf00      	nop
   81f4c:	20072b14 	.word	0x20072b14

00081f50 <memcpy>:
   81f50:	4684      	mov	ip, r0
   81f52:	ea41 0300 	orr.w	r3, r1, r0
   81f56:	f013 0303 	ands.w	r3, r3, #3
   81f5a:	d149      	bne.n	81ff0 <memcpy+0xa0>
   81f5c:	3a40      	subs	r2, #64	; 0x40
   81f5e:	d323      	bcc.n	81fa8 <memcpy+0x58>
   81f60:	680b      	ldr	r3, [r1, #0]
   81f62:	6003      	str	r3, [r0, #0]
   81f64:	684b      	ldr	r3, [r1, #4]
   81f66:	6043      	str	r3, [r0, #4]
   81f68:	688b      	ldr	r3, [r1, #8]
   81f6a:	6083      	str	r3, [r0, #8]
   81f6c:	68cb      	ldr	r3, [r1, #12]
   81f6e:	60c3      	str	r3, [r0, #12]
   81f70:	690b      	ldr	r3, [r1, #16]
   81f72:	6103      	str	r3, [r0, #16]
   81f74:	694b      	ldr	r3, [r1, #20]
   81f76:	6143      	str	r3, [r0, #20]
   81f78:	698b      	ldr	r3, [r1, #24]
   81f7a:	6183      	str	r3, [r0, #24]
   81f7c:	69cb      	ldr	r3, [r1, #28]
   81f7e:	61c3      	str	r3, [r0, #28]
   81f80:	6a0b      	ldr	r3, [r1, #32]
   81f82:	6203      	str	r3, [r0, #32]
   81f84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81f86:	6243      	str	r3, [r0, #36]	; 0x24
   81f88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81f8a:	6283      	str	r3, [r0, #40]	; 0x28
   81f8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81f8e:	62c3      	str	r3, [r0, #44]	; 0x2c
   81f90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81f92:	6303      	str	r3, [r0, #48]	; 0x30
   81f94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81f96:	6343      	str	r3, [r0, #52]	; 0x34
   81f98:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81f9a:	6383      	str	r3, [r0, #56]	; 0x38
   81f9c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81f9e:	63c3      	str	r3, [r0, #60]	; 0x3c
   81fa0:	3040      	adds	r0, #64	; 0x40
   81fa2:	3140      	adds	r1, #64	; 0x40
   81fa4:	3a40      	subs	r2, #64	; 0x40
   81fa6:	d2db      	bcs.n	81f60 <memcpy+0x10>
   81fa8:	3230      	adds	r2, #48	; 0x30
   81faa:	d30b      	bcc.n	81fc4 <memcpy+0x74>
   81fac:	680b      	ldr	r3, [r1, #0]
   81fae:	6003      	str	r3, [r0, #0]
   81fb0:	684b      	ldr	r3, [r1, #4]
   81fb2:	6043      	str	r3, [r0, #4]
   81fb4:	688b      	ldr	r3, [r1, #8]
   81fb6:	6083      	str	r3, [r0, #8]
   81fb8:	68cb      	ldr	r3, [r1, #12]
   81fba:	60c3      	str	r3, [r0, #12]
   81fbc:	3010      	adds	r0, #16
   81fbe:	3110      	adds	r1, #16
   81fc0:	3a10      	subs	r2, #16
   81fc2:	d2f3      	bcs.n	81fac <memcpy+0x5c>
   81fc4:	320c      	adds	r2, #12
   81fc6:	d305      	bcc.n	81fd4 <memcpy+0x84>
   81fc8:	f851 3b04 	ldr.w	r3, [r1], #4
   81fcc:	f840 3b04 	str.w	r3, [r0], #4
   81fd0:	3a04      	subs	r2, #4
   81fd2:	d2f9      	bcs.n	81fc8 <memcpy+0x78>
   81fd4:	3204      	adds	r2, #4
   81fd6:	d008      	beq.n	81fea <memcpy+0x9a>
   81fd8:	07d2      	lsls	r2, r2, #31
   81fda:	bf1c      	itt	ne
   81fdc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81fe0:	f800 3b01 	strbne.w	r3, [r0], #1
   81fe4:	d301      	bcc.n	81fea <memcpy+0x9a>
   81fe6:	880b      	ldrh	r3, [r1, #0]
   81fe8:	8003      	strh	r3, [r0, #0]
   81fea:	4660      	mov	r0, ip
   81fec:	4770      	bx	lr
   81fee:	bf00      	nop
   81ff0:	2a08      	cmp	r2, #8
   81ff2:	d313      	bcc.n	8201c <memcpy+0xcc>
   81ff4:	078b      	lsls	r3, r1, #30
   81ff6:	d0b1      	beq.n	81f5c <memcpy+0xc>
   81ff8:	f010 0303 	ands.w	r3, r0, #3
   81ffc:	d0ae      	beq.n	81f5c <memcpy+0xc>
   81ffe:	f1c3 0304 	rsb	r3, r3, #4
   82002:	1ad2      	subs	r2, r2, r3
   82004:	07db      	lsls	r3, r3, #31
   82006:	bf1c      	itt	ne
   82008:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8200c:	f800 3b01 	strbne.w	r3, [r0], #1
   82010:	d3a4      	bcc.n	81f5c <memcpy+0xc>
   82012:	f831 3b02 	ldrh.w	r3, [r1], #2
   82016:	f820 3b02 	strh.w	r3, [r0], #2
   8201a:	e79f      	b.n	81f5c <memcpy+0xc>
   8201c:	3a04      	subs	r2, #4
   8201e:	d3d9      	bcc.n	81fd4 <memcpy+0x84>
   82020:	3a01      	subs	r2, #1
   82022:	f811 3b01 	ldrb.w	r3, [r1], #1
   82026:	f800 3b01 	strb.w	r3, [r0], #1
   8202a:	d2f9      	bcs.n	82020 <memcpy+0xd0>
   8202c:	780b      	ldrb	r3, [r1, #0]
   8202e:	7003      	strb	r3, [r0, #0]
   82030:	784b      	ldrb	r3, [r1, #1]
   82032:	7043      	strb	r3, [r0, #1]
   82034:	788b      	ldrb	r3, [r1, #2]
   82036:	7083      	strb	r3, [r0, #2]
   82038:	4660      	mov	r0, ip
   8203a:	4770      	bx	lr

0008203c <memset>:
   8203c:	b470      	push	{r4, r5, r6}
   8203e:	0786      	lsls	r6, r0, #30
   82040:	d046      	beq.n	820d0 <memset+0x94>
   82042:	1e54      	subs	r4, r2, #1
   82044:	2a00      	cmp	r2, #0
   82046:	d041      	beq.n	820cc <memset+0x90>
   82048:	b2ca      	uxtb	r2, r1
   8204a:	4603      	mov	r3, r0
   8204c:	e002      	b.n	82054 <memset+0x18>
   8204e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82052:	d33b      	bcc.n	820cc <memset+0x90>
   82054:	f803 2b01 	strb.w	r2, [r3], #1
   82058:	079d      	lsls	r5, r3, #30
   8205a:	d1f8      	bne.n	8204e <memset+0x12>
   8205c:	2c03      	cmp	r4, #3
   8205e:	d92e      	bls.n	820be <memset+0x82>
   82060:	b2cd      	uxtb	r5, r1
   82062:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82066:	2c0f      	cmp	r4, #15
   82068:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8206c:	d919      	bls.n	820a2 <memset+0x66>
   8206e:	4626      	mov	r6, r4
   82070:	f103 0210 	add.w	r2, r3, #16
   82074:	3e10      	subs	r6, #16
   82076:	2e0f      	cmp	r6, #15
   82078:	f842 5c10 	str.w	r5, [r2, #-16]
   8207c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82080:	f842 5c08 	str.w	r5, [r2, #-8]
   82084:	f842 5c04 	str.w	r5, [r2, #-4]
   82088:	f102 0210 	add.w	r2, r2, #16
   8208c:	d8f2      	bhi.n	82074 <memset+0x38>
   8208e:	f1a4 0210 	sub.w	r2, r4, #16
   82092:	f022 020f 	bic.w	r2, r2, #15
   82096:	f004 040f 	and.w	r4, r4, #15
   8209a:	3210      	adds	r2, #16
   8209c:	2c03      	cmp	r4, #3
   8209e:	4413      	add	r3, r2
   820a0:	d90d      	bls.n	820be <memset+0x82>
   820a2:	461e      	mov	r6, r3
   820a4:	4622      	mov	r2, r4
   820a6:	3a04      	subs	r2, #4
   820a8:	2a03      	cmp	r2, #3
   820aa:	f846 5b04 	str.w	r5, [r6], #4
   820ae:	d8fa      	bhi.n	820a6 <memset+0x6a>
   820b0:	1f22      	subs	r2, r4, #4
   820b2:	f022 0203 	bic.w	r2, r2, #3
   820b6:	3204      	adds	r2, #4
   820b8:	4413      	add	r3, r2
   820ba:	f004 0403 	and.w	r4, r4, #3
   820be:	b12c      	cbz	r4, 820cc <memset+0x90>
   820c0:	b2c9      	uxtb	r1, r1
   820c2:	441c      	add	r4, r3
   820c4:	f803 1b01 	strb.w	r1, [r3], #1
   820c8:	429c      	cmp	r4, r3
   820ca:	d1fb      	bne.n	820c4 <memset+0x88>
   820cc:	bc70      	pop	{r4, r5, r6}
   820ce:	4770      	bx	lr
   820d0:	4614      	mov	r4, r2
   820d2:	4603      	mov	r3, r0
   820d4:	e7c2      	b.n	8205c <memset+0x20>
   820d6:	bf00      	nop

000820d8 <__malloc_lock>:
   820d8:	4801      	ldr	r0, [pc, #4]	; (820e0 <__malloc_lock+0x8>)
   820da:	f000 bba7 	b.w	8282c <__retarget_lock_acquire_recursive>
   820de:	bf00      	nop
   820e0:	20072b64 	.word	0x20072b64

000820e4 <__malloc_unlock>:
   820e4:	4801      	ldr	r0, [pc, #4]	; (820ec <__malloc_unlock+0x8>)
   820e6:	f000 bba3 	b.w	82830 <__retarget_lock_release_recursive>
   820ea:	bf00      	nop
   820ec:	20072b64 	.word	0x20072b64

000820f0 <_sbrk_r>:
   820f0:	b538      	push	{r3, r4, r5, lr}
   820f2:	2300      	movs	r3, #0
   820f4:	4c06      	ldr	r4, [pc, #24]	; (82110 <_sbrk_r+0x20>)
   820f6:	4605      	mov	r5, r0
   820f8:	4608      	mov	r0, r1
   820fa:	6023      	str	r3, [r4, #0]
   820fc:	f7ff fc0e 	bl	8191c <_sbrk>
   82100:	1c43      	adds	r3, r0, #1
   82102:	d000      	beq.n	82106 <_sbrk_r+0x16>
   82104:	bd38      	pop	{r3, r4, r5, pc}
   82106:	6823      	ldr	r3, [r4, #0]
   82108:	2b00      	cmp	r3, #0
   8210a:	d0fb      	beq.n	82104 <_sbrk_r+0x14>
   8210c:	602b      	str	r3, [r5, #0]
   8210e:	bd38      	pop	{r3, r4, r5, pc}
   82110:	20072b78 	.word	0x20072b78

00082114 <setbuf>:
   82114:	2900      	cmp	r1, #0
   82116:	bf0c      	ite	eq
   82118:	2202      	moveq	r2, #2
   8211a:	2200      	movne	r2, #0
   8211c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82120:	f000 b800 	b.w	82124 <setvbuf>

00082124 <setvbuf>:
   82124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82128:	4d61      	ldr	r5, [pc, #388]	; (822b0 <setvbuf+0x18c>)
   8212a:	b083      	sub	sp, #12
   8212c:	682d      	ldr	r5, [r5, #0]
   8212e:	4604      	mov	r4, r0
   82130:	460f      	mov	r7, r1
   82132:	4690      	mov	r8, r2
   82134:	461e      	mov	r6, r3
   82136:	b115      	cbz	r5, 8213e <setvbuf+0x1a>
   82138:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8213a:	2b00      	cmp	r3, #0
   8213c:	d064      	beq.n	82208 <setvbuf+0xe4>
   8213e:	f1b8 0f02 	cmp.w	r8, #2
   82142:	d006      	beq.n	82152 <setvbuf+0x2e>
   82144:	f1b8 0f01 	cmp.w	r8, #1
   82148:	f200 809f 	bhi.w	8228a <setvbuf+0x166>
   8214c:	2e00      	cmp	r6, #0
   8214e:	f2c0 809c 	blt.w	8228a <setvbuf+0x166>
   82152:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82154:	07d8      	lsls	r0, r3, #31
   82156:	d534      	bpl.n	821c2 <setvbuf+0x9e>
   82158:	4621      	mov	r1, r4
   8215a:	4628      	mov	r0, r5
   8215c:	f000 f956 	bl	8240c <_fflush_r>
   82160:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82162:	b141      	cbz	r1, 82176 <setvbuf+0x52>
   82164:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82168:	4299      	cmp	r1, r3
   8216a:	d002      	beq.n	82172 <setvbuf+0x4e>
   8216c:	4628      	mov	r0, r5
   8216e:	f000 fa4b 	bl	82608 <_free_r>
   82172:	2300      	movs	r3, #0
   82174:	6323      	str	r3, [r4, #48]	; 0x30
   82176:	2200      	movs	r2, #0
   82178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8217c:	61a2      	str	r2, [r4, #24]
   8217e:	6062      	str	r2, [r4, #4]
   82180:	061a      	lsls	r2, r3, #24
   82182:	d43a      	bmi.n	821fa <setvbuf+0xd6>
   82184:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82188:	f023 0303 	bic.w	r3, r3, #3
   8218c:	f1b8 0f02 	cmp.w	r8, #2
   82190:	81a3      	strh	r3, [r4, #12]
   82192:	d01d      	beq.n	821d0 <setvbuf+0xac>
   82194:	ab01      	add	r3, sp, #4
   82196:	466a      	mov	r2, sp
   82198:	4621      	mov	r1, r4
   8219a:	4628      	mov	r0, r5
   8219c:	f000 fb4a 	bl	82834 <__swhatbuf_r>
   821a0:	89a3      	ldrh	r3, [r4, #12]
   821a2:	4318      	orrs	r0, r3
   821a4:	81a0      	strh	r0, [r4, #12]
   821a6:	2e00      	cmp	r6, #0
   821a8:	d132      	bne.n	82210 <setvbuf+0xec>
   821aa:	9e00      	ldr	r6, [sp, #0]
   821ac:	4630      	mov	r0, r6
   821ae:	f7ff fc1d 	bl	819ec <malloc>
   821b2:	4607      	mov	r7, r0
   821b4:	2800      	cmp	r0, #0
   821b6:	d06b      	beq.n	82290 <setvbuf+0x16c>
   821b8:	89a3      	ldrh	r3, [r4, #12]
   821ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   821be:	81a3      	strh	r3, [r4, #12]
   821c0:	e028      	b.n	82214 <setvbuf+0xf0>
   821c2:	89a3      	ldrh	r3, [r4, #12]
   821c4:	0599      	lsls	r1, r3, #22
   821c6:	d4c7      	bmi.n	82158 <setvbuf+0x34>
   821c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   821ca:	f000 fb2f 	bl	8282c <__retarget_lock_acquire_recursive>
   821ce:	e7c3      	b.n	82158 <setvbuf+0x34>
   821d0:	2500      	movs	r5, #0
   821d2:	2600      	movs	r6, #0
   821d4:	2001      	movs	r0, #1
   821d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   821d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   821dc:	f043 0302 	orr.w	r3, r3, #2
   821e0:	60a6      	str	r6, [r4, #8]
   821e2:	07ce      	lsls	r6, r1, #31
   821e4:	81a3      	strh	r3, [r4, #12]
   821e6:	6160      	str	r0, [r4, #20]
   821e8:	6022      	str	r2, [r4, #0]
   821ea:	6122      	str	r2, [r4, #16]
   821ec:	d401      	bmi.n	821f2 <setvbuf+0xce>
   821ee:	0598      	lsls	r0, r3, #22
   821f0:	d53e      	bpl.n	82270 <setvbuf+0x14c>
   821f2:	4628      	mov	r0, r5
   821f4:	b003      	add	sp, #12
   821f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   821fa:	6921      	ldr	r1, [r4, #16]
   821fc:	4628      	mov	r0, r5
   821fe:	f000 fa03 	bl	82608 <_free_r>
   82202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82206:	e7bd      	b.n	82184 <setvbuf+0x60>
   82208:	4628      	mov	r0, r5
   8220a:	f000 f957 	bl	824bc <__sinit>
   8220e:	e796      	b.n	8213e <setvbuf+0x1a>
   82210:	2f00      	cmp	r7, #0
   82212:	d0cb      	beq.n	821ac <setvbuf+0x88>
   82214:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82216:	2b00      	cmp	r3, #0
   82218:	d033      	beq.n	82282 <setvbuf+0x15e>
   8221a:	9b00      	ldr	r3, [sp, #0]
   8221c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82220:	429e      	cmp	r6, r3
   82222:	bf1c      	itt	ne
   82224:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82228:	81a2      	strhne	r2, [r4, #12]
   8222a:	f1b8 0f01 	cmp.w	r8, #1
   8222e:	bf04      	itt	eq
   82230:	f042 0201 	orreq.w	r2, r2, #1
   82234:	81a2      	strheq	r2, [r4, #12]
   82236:	b292      	uxth	r2, r2
   82238:	f012 0308 	ands.w	r3, r2, #8
   8223c:	6027      	str	r7, [r4, #0]
   8223e:	6127      	str	r7, [r4, #16]
   82240:	6166      	str	r6, [r4, #20]
   82242:	d00e      	beq.n	82262 <setvbuf+0x13e>
   82244:	07d1      	lsls	r1, r2, #31
   82246:	d51a      	bpl.n	8227e <setvbuf+0x15a>
   82248:	2300      	movs	r3, #0
   8224a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8224c:	4276      	negs	r6, r6
   8224e:	f015 0501 	ands.w	r5, r5, #1
   82252:	61a6      	str	r6, [r4, #24]
   82254:	60a3      	str	r3, [r4, #8]
   82256:	d009      	beq.n	8226c <setvbuf+0x148>
   82258:	2500      	movs	r5, #0
   8225a:	4628      	mov	r0, r5
   8225c:	b003      	add	sp, #12
   8225e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82262:	60a3      	str	r3, [r4, #8]
   82264:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82266:	f015 0501 	ands.w	r5, r5, #1
   8226a:	d1f5      	bne.n	82258 <setvbuf+0x134>
   8226c:	0593      	lsls	r3, r2, #22
   8226e:	d4c0      	bmi.n	821f2 <setvbuf+0xce>
   82270:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82272:	f000 fadd 	bl	82830 <__retarget_lock_release_recursive>
   82276:	4628      	mov	r0, r5
   82278:	b003      	add	sp, #12
   8227a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8227e:	60a6      	str	r6, [r4, #8]
   82280:	e7f0      	b.n	82264 <setvbuf+0x140>
   82282:	4628      	mov	r0, r5
   82284:	f000 f91a 	bl	824bc <__sinit>
   82288:	e7c7      	b.n	8221a <setvbuf+0xf6>
   8228a:	f04f 35ff 	mov.w	r5, #4294967295
   8228e:	e7b0      	b.n	821f2 <setvbuf+0xce>
   82290:	f8dd 9000 	ldr.w	r9, [sp]
   82294:	45b1      	cmp	r9, r6
   82296:	d004      	beq.n	822a2 <setvbuf+0x17e>
   82298:	4648      	mov	r0, r9
   8229a:	f7ff fba7 	bl	819ec <malloc>
   8229e:	4607      	mov	r7, r0
   822a0:	b920      	cbnz	r0, 822ac <setvbuf+0x188>
   822a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   822a6:	f04f 35ff 	mov.w	r5, #4294967295
   822aa:	e792      	b.n	821d2 <setvbuf+0xae>
   822ac:	464e      	mov	r6, r9
   822ae:	e783      	b.n	821b8 <setvbuf+0x94>
   822b0:	20072234 	.word	0x20072234

000822b4 <register_fini>:
   822b4:	4b02      	ldr	r3, [pc, #8]	; (822c0 <register_fini+0xc>)
   822b6:	b113      	cbz	r3, 822be <register_fini+0xa>
   822b8:	4802      	ldr	r0, [pc, #8]	; (822c4 <register_fini+0x10>)
   822ba:	f000 b805 	b.w	822c8 <atexit>
   822be:	4770      	bx	lr
   822c0:	00000000 	.word	0x00000000
   822c4:	00082535 	.word	0x00082535

000822c8 <atexit>:
   822c8:	2300      	movs	r3, #0
   822ca:	4601      	mov	r1, r0
   822cc:	461a      	mov	r2, r3
   822ce:	4618      	mov	r0, r3
   822d0:	f000 bb38 	b.w	82944 <__register_exitproc>

000822d4 <__sflush_r>:
   822d4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   822d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822dc:	b29a      	uxth	r2, r3
   822de:	460d      	mov	r5, r1
   822e0:	0711      	lsls	r1, r2, #28
   822e2:	4680      	mov	r8, r0
   822e4:	d43a      	bmi.n	8235c <__sflush_r+0x88>
   822e6:	686a      	ldr	r2, [r5, #4]
   822e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   822ec:	2a00      	cmp	r2, #0
   822ee:	81ab      	strh	r3, [r5, #12]
   822f0:	dd70      	ble.n	823d4 <__sflush_r+0x100>
   822f2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   822f4:	2c00      	cmp	r4, #0
   822f6:	d04a      	beq.n	8238e <__sflush_r+0xba>
   822f8:	2200      	movs	r2, #0
   822fa:	b29b      	uxth	r3, r3
   822fc:	f8d8 6000 	ldr.w	r6, [r8]
   82300:	f8c8 2000 	str.w	r2, [r8]
   82304:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82308:	d068      	beq.n	823dc <__sflush_r+0x108>
   8230a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8230c:	075f      	lsls	r7, r3, #29
   8230e:	d505      	bpl.n	8231c <__sflush_r+0x48>
   82310:	6869      	ldr	r1, [r5, #4]
   82312:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82314:	1a52      	subs	r2, r2, r1
   82316:	b10b      	cbz	r3, 8231c <__sflush_r+0x48>
   82318:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8231a:	1ad2      	subs	r2, r2, r3
   8231c:	2300      	movs	r3, #0
   8231e:	69e9      	ldr	r1, [r5, #28]
   82320:	4640      	mov	r0, r8
   82322:	47a0      	blx	r4
   82324:	1c44      	adds	r4, r0, #1
   82326:	d03d      	beq.n	823a4 <__sflush_r+0xd0>
   82328:	2100      	movs	r1, #0
   8232a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8232e:	692a      	ldr	r2, [r5, #16]
   82330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82334:	81ab      	strh	r3, [r5, #12]
   82336:	04db      	lsls	r3, r3, #19
   82338:	6069      	str	r1, [r5, #4]
   8233a:	602a      	str	r2, [r5, #0]
   8233c:	d448      	bmi.n	823d0 <__sflush_r+0xfc>
   8233e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82340:	f8c8 6000 	str.w	r6, [r8]
   82344:	b319      	cbz	r1, 8238e <__sflush_r+0xba>
   82346:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8234a:	4299      	cmp	r1, r3
   8234c:	d002      	beq.n	82354 <__sflush_r+0x80>
   8234e:	4640      	mov	r0, r8
   82350:	f000 f95a 	bl	82608 <_free_r>
   82354:	2000      	movs	r0, #0
   82356:	6328      	str	r0, [r5, #48]	; 0x30
   82358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8235c:	692e      	ldr	r6, [r5, #16]
   8235e:	b1b6      	cbz	r6, 8238e <__sflush_r+0xba>
   82360:	0791      	lsls	r1, r2, #30
   82362:	bf18      	it	ne
   82364:	2300      	movne	r3, #0
   82366:	682c      	ldr	r4, [r5, #0]
   82368:	bf08      	it	eq
   8236a:	696b      	ldreq	r3, [r5, #20]
   8236c:	602e      	str	r6, [r5, #0]
   8236e:	1ba4      	subs	r4, r4, r6
   82370:	60ab      	str	r3, [r5, #8]
   82372:	e00a      	b.n	8238a <__sflush_r+0xb6>
   82374:	4623      	mov	r3, r4
   82376:	4632      	mov	r2, r6
   82378:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8237a:	69e9      	ldr	r1, [r5, #28]
   8237c:	4640      	mov	r0, r8
   8237e:	47b8      	blx	r7
   82380:	2800      	cmp	r0, #0
   82382:	eba4 0400 	sub.w	r4, r4, r0
   82386:	4406      	add	r6, r0
   82388:	dd04      	ble.n	82394 <__sflush_r+0xc0>
   8238a:	2c00      	cmp	r4, #0
   8238c:	dcf2      	bgt.n	82374 <__sflush_r+0xa0>
   8238e:	2000      	movs	r0, #0
   82390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82394:	89ab      	ldrh	r3, [r5, #12]
   82396:	f04f 30ff 	mov.w	r0, #4294967295
   8239a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8239e:	81ab      	strh	r3, [r5, #12]
   823a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823a4:	f8d8 4000 	ldr.w	r4, [r8]
   823a8:	2c1d      	cmp	r4, #29
   823aa:	d8f3      	bhi.n	82394 <__sflush_r+0xc0>
   823ac:	4b16      	ldr	r3, [pc, #88]	; (82408 <__sflush_r+0x134>)
   823ae:	40e3      	lsrs	r3, r4
   823b0:	43db      	mvns	r3, r3
   823b2:	f013 0301 	ands.w	r3, r3, #1
   823b6:	d1ed      	bne.n	82394 <__sflush_r+0xc0>
   823b8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   823bc:	6929      	ldr	r1, [r5, #16]
   823be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   823c2:	81aa      	strh	r2, [r5, #12]
   823c4:	04d2      	lsls	r2, r2, #19
   823c6:	606b      	str	r3, [r5, #4]
   823c8:	6029      	str	r1, [r5, #0]
   823ca:	d5b8      	bpl.n	8233e <__sflush_r+0x6a>
   823cc:	2c00      	cmp	r4, #0
   823ce:	d1b6      	bne.n	8233e <__sflush_r+0x6a>
   823d0:	6528      	str	r0, [r5, #80]	; 0x50
   823d2:	e7b4      	b.n	8233e <__sflush_r+0x6a>
   823d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   823d6:	2a00      	cmp	r2, #0
   823d8:	dc8b      	bgt.n	822f2 <__sflush_r+0x1e>
   823da:	e7d8      	b.n	8238e <__sflush_r+0xba>
   823dc:	2301      	movs	r3, #1
   823de:	69e9      	ldr	r1, [r5, #28]
   823e0:	4640      	mov	r0, r8
   823e2:	47a0      	blx	r4
   823e4:	1c43      	adds	r3, r0, #1
   823e6:	4602      	mov	r2, r0
   823e8:	d002      	beq.n	823f0 <__sflush_r+0x11c>
   823ea:	89ab      	ldrh	r3, [r5, #12]
   823ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
   823ee:	e78d      	b.n	8230c <__sflush_r+0x38>
   823f0:	f8d8 3000 	ldr.w	r3, [r8]
   823f4:	2b00      	cmp	r3, #0
   823f6:	d0f8      	beq.n	823ea <__sflush_r+0x116>
   823f8:	2b1d      	cmp	r3, #29
   823fa:	d001      	beq.n	82400 <__sflush_r+0x12c>
   823fc:	2b16      	cmp	r3, #22
   823fe:	d1c9      	bne.n	82394 <__sflush_r+0xc0>
   82400:	f8c8 6000 	str.w	r6, [r8]
   82404:	e7c3      	b.n	8238e <__sflush_r+0xba>
   82406:	bf00      	nop
   82408:	20400001 	.word	0x20400001

0008240c <_fflush_r>:
   8240c:	b538      	push	{r3, r4, r5, lr}
   8240e:	460d      	mov	r5, r1
   82410:	4604      	mov	r4, r0
   82412:	b108      	cbz	r0, 82418 <_fflush_r+0xc>
   82414:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82416:	b1bb      	cbz	r3, 82448 <_fflush_r+0x3c>
   82418:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8241c:	b188      	cbz	r0, 82442 <_fflush_r+0x36>
   8241e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82420:	07db      	lsls	r3, r3, #31
   82422:	d401      	bmi.n	82428 <_fflush_r+0x1c>
   82424:	0581      	lsls	r1, r0, #22
   82426:	d517      	bpl.n	82458 <_fflush_r+0x4c>
   82428:	4620      	mov	r0, r4
   8242a:	4629      	mov	r1, r5
   8242c:	f7ff ff52 	bl	822d4 <__sflush_r>
   82430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82432:	4604      	mov	r4, r0
   82434:	07da      	lsls	r2, r3, #31
   82436:	d402      	bmi.n	8243e <_fflush_r+0x32>
   82438:	89ab      	ldrh	r3, [r5, #12]
   8243a:	059b      	lsls	r3, r3, #22
   8243c:	d507      	bpl.n	8244e <_fflush_r+0x42>
   8243e:	4620      	mov	r0, r4
   82440:	bd38      	pop	{r3, r4, r5, pc}
   82442:	4604      	mov	r4, r0
   82444:	4620      	mov	r0, r4
   82446:	bd38      	pop	{r3, r4, r5, pc}
   82448:	f000 f838 	bl	824bc <__sinit>
   8244c:	e7e4      	b.n	82418 <_fflush_r+0xc>
   8244e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82450:	f000 f9ee 	bl	82830 <__retarget_lock_release_recursive>
   82454:	4620      	mov	r0, r4
   82456:	bd38      	pop	{r3, r4, r5, pc}
   82458:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8245a:	f000 f9e7 	bl	8282c <__retarget_lock_acquire_recursive>
   8245e:	e7e3      	b.n	82428 <_fflush_r+0x1c>

00082460 <_cleanup_r>:
   82460:	4901      	ldr	r1, [pc, #4]	; (82468 <_cleanup_r+0x8>)
   82462:	f000 b9b7 	b.w	827d4 <_fwalk_reent>
   82466:	bf00      	nop
   82468:	00082a2d 	.word	0x00082a2d

0008246c <std.isra.0>:
   8246c:	2300      	movs	r3, #0
   8246e:	b510      	push	{r4, lr}
   82470:	4604      	mov	r4, r0
   82472:	8181      	strh	r1, [r0, #12]
   82474:	81c2      	strh	r2, [r0, #14]
   82476:	6003      	str	r3, [r0, #0]
   82478:	6043      	str	r3, [r0, #4]
   8247a:	6083      	str	r3, [r0, #8]
   8247c:	6643      	str	r3, [r0, #100]	; 0x64
   8247e:	6103      	str	r3, [r0, #16]
   82480:	6143      	str	r3, [r0, #20]
   82482:	6183      	str	r3, [r0, #24]
   82484:	4619      	mov	r1, r3
   82486:	2208      	movs	r2, #8
   82488:	305c      	adds	r0, #92	; 0x5c
   8248a:	f7ff fdd7 	bl	8203c <memset>
   8248e:	4807      	ldr	r0, [pc, #28]	; (824ac <std.isra.0+0x40>)
   82490:	4907      	ldr	r1, [pc, #28]	; (824b0 <std.isra.0+0x44>)
   82492:	4a08      	ldr	r2, [pc, #32]	; (824b4 <std.isra.0+0x48>)
   82494:	4b08      	ldr	r3, [pc, #32]	; (824b8 <std.isra.0+0x4c>)
   82496:	6220      	str	r0, [r4, #32]
   82498:	61e4      	str	r4, [r4, #28]
   8249a:	6261      	str	r1, [r4, #36]	; 0x24
   8249c:	62a2      	str	r2, [r4, #40]	; 0x28
   8249e:	62e3      	str	r3, [r4, #44]	; 0x2c
   824a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   824a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824a8:	f000 b9bc 	b.w	82824 <__retarget_lock_init_recursive>
   824ac:	00082891 	.word	0x00082891
   824b0:	000828b5 	.word	0x000828b5
   824b4:	000828f1 	.word	0x000828f1
   824b8:	00082911 	.word	0x00082911

000824bc <__sinit>:
   824bc:	b510      	push	{r4, lr}
   824be:	4604      	mov	r4, r0
   824c0:	4814      	ldr	r0, [pc, #80]	; (82514 <__sinit+0x58>)
   824c2:	f000 f9b3 	bl	8282c <__retarget_lock_acquire_recursive>
   824c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   824c8:	b9fa      	cbnz	r2, 8250a <__sinit+0x4e>
   824ca:	2003      	movs	r0, #3
   824cc:	4912      	ldr	r1, [pc, #72]	; (82518 <__sinit+0x5c>)
   824ce:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   824d2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   824d6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   824da:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   824de:	63e1      	str	r1, [r4, #60]	; 0x3c
   824e0:	6860      	ldr	r0, [r4, #4]
   824e2:	2104      	movs	r1, #4
   824e4:	f7ff ffc2 	bl	8246c <std.isra.0>
   824e8:	68a0      	ldr	r0, [r4, #8]
   824ea:	2201      	movs	r2, #1
   824ec:	2109      	movs	r1, #9
   824ee:	f7ff ffbd 	bl	8246c <std.isra.0>
   824f2:	68e0      	ldr	r0, [r4, #12]
   824f4:	2202      	movs	r2, #2
   824f6:	2112      	movs	r1, #18
   824f8:	f7ff ffb8 	bl	8246c <std.isra.0>
   824fc:	2301      	movs	r3, #1
   824fe:	4805      	ldr	r0, [pc, #20]	; (82514 <__sinit+0x58>)
   82500:	63a3      	str	r3, [r4, #56]	; 0x38
   82502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82506:	f000 b993 	b.w	82830 <__retarget_lock_release_recursive>
   8250a:	4802      	ldr	r0, [pc, #8]	; (82514 <__sinit+0x58>)
   8250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82510:	f000 b98e 	b.w	82830 <__retarget_lock_release_recursive>
   82514:	20072b60 	.word	0x20072b60
   82518:	00082461 	.word	0x00082461

0008251c <__sfp_lock_acquire>:
   8251c:	4801      	ldr	r0, [pc, #4]	; (82524 <__sfp_lock_acquire+0x8>)
   8251e:	f000 b985 	b.w	8282c <__retarget_lock_acquire_recursive>
   82522:	bf00      	nop
   82524:	20072b74 	.word	0x20072b74

00082528 <__sfp_lock_release>:
   82528:	4801      	ldr	r0, [pc, #4]	; (82530 <__sfp_lock_release+0x8>)
   8252a:	f000 b981 	b.w	82830 <__retarget_lock_release_recursive>
   8252e:	bf00      	nop
   82530:	20072b74 	.word	0x20072b74

00082534 <__libc_fini_array>:
   82534:	b538      	push	{r3, r4, r5, lr}
   82536:	4c0a      	ldr	r4, [pc, #40]	; (82560 <__libc_fini_array+0x2c>)
   82538:	4d0a      	ldr	r5, [pc, #40]	; (82564 <__libc_fini_array+0x30>)
   8253a:	1b64      	subs	r4, r4, r5
   8253c:	10a4      	asrs	r4, r4, #2
   8253e:	d00a      	beq.n	82556 <__libc_fini_array+0x22>
   82540:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82544:	3b01      	subs	r3, #1
   82546:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8254a:	3c01      	subs	r4, #1
   8254c:	f855 3904 	ldr.w	r3, [r5], #-4
   82550:	4798      	blx	r3
   82552:	2c00      	cmp	r4, #0
   82554:	d1f9      	bne.n	8254a <__libc_fini_array+0x16>
   82556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8255a:	f000 bd1d 	b.w	82f98 <_fini>
   8255e:	bf00      	nop
   82560:	00082fcc 	.word	0x00082fcc
   82564:	00082fc8 	.word	0x00082fc8

00082568 <_malloc_trim_r>:
   82568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8256a:	460c      	mov	r4, r1
   8256c:	4f23      	ldr	r7, [pc, #140]	; (825fc <_malloc_trim_r+0x94>)
   8256e:	4606      	mov	r6, r0
   82570:	f7ff fdb2 	bl	820d8 <__malloc_lock>
   82574:	68bb      	ldr	r3, [r7, #8]
   82576:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8257a:	685d      	ldr	r5, [r3, #4]
   8257c:	310f      	adds	r1, #15
   8257e:	f025 0503 	bic.w	r5, r5, #3
   82582:	4429      	add	r1, r5
   82584:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82588:	f021 010f 	bic.w	r1, r1, #15
   8258c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82590:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82594:	db07      	blt.n	825a6 <_malloc_trim_r+0x3e>
   82596:	2100      	movs	r1, #0
   82598:	4630      	mov	r0, r6
   8259a:	f7ff fda9 	bl	820f0 <_sbrk_r>
   8259e:	68bb      	ldr	r3, [r7, #8]
   825a0:	442b      	add	r3, r5
   825a2:	4298      	cmp	r0, r3
   825a4:	d004      	beq.n	825b0 <_malloc_trim_r+0x48>
   825a6:	4630      	mov	r0, r6
   825a8:	f7ff fd9c 	bl	820e4 <__malloc_unlock>
   825ac:	2000      	movs	r0, #0
   825ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825b0:	4261      	negs	r1, r4
   825b2:	4630      	mov	r0, r6
   825b4:	f7ff fd9c 	bl	820f0 <_sbrk_r>
   825b8:	3001      	adds	r0, #1
   825ba:	d00d      	beq.n	825d8 <_malloc_trim_r+0x70>
   825bc:	4b10      	ldr	r3, [pc, #64]	; (82600 <_malloc_trim_r+0x98>)
   825be:	68ba      	ldr	r2, [r7, #8]
   825c0:	6819      	ldr	r1, [r3, #0]
   825c2:	1b2d      	subs	r5, r5, r4
   825c4:	f045 0501 	orr.w	r5, r5, #1
   825c8:	4630      	mov	r0, r6
   825ca:	1b09      	subs	r1, r1, r4
   825cc:	6055      	str	r5, [r2, #4]
   825ce:	6019      	str	r1, [r3, #0]
   825d0:	f7ff fd88 	bl	820e4 <__malloc_unlock>
   825d4:	2001      	movs	r0, #1
   825d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825d8:	2100      	movs	r1, #0
   825da:	4630      	mov	r0, r6
   825dc:	f7ff fd88 	bl	820f0 <_sbrk_r>
   825e0:	68ba      	ldr	r2, [r7, #8]
   825e2:	1a83      	subs	r3, r0, r2
   825e4:	2b0f      	cmp	r3, #15
   825e6:	ddde      	ble.n	825a6 <_malloc_trim_r+0x3e>
   825e8:	4c06      	ldr	r4, [pc, #24]	; (82604 <_malloc_trim_r+0x9c>)
   825ea:	4905      	ldr	r1, [pc, #20]	; (82600 <_malloc_trim_r+0x98>)
   825ec:	6824      	ldr	r4, [r4, #0]
   825ee:	f043 0301 	orr.w	r3, r3, #1
   825f2:	1b00      	subs	r0, r0, r4
   825f4:	6053      	str	r3, [r2, #4]
   825f6:	6008      	str	r0, [r1, #0]
   825f8:	e7d5      	b.n	825a6 <_malloc_trim_r+0x3e>
   825fa:	bf00      	nop
   825fc:	20072660 	.word	0x20072660
   82600:	20072b14 	.word	0x20072b14
   82604:	20072a68 	.word	0x20072a68

00082608 <_free_r>:
   82608:	2900      	cmp	r1, #0
   8260a:	d044      	beq.n	82696 <_free_r+0x8e>
   8260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82610:	460d      	mov	r5, r1
   82612:	4680      	mov	r8, r0
   82614:	f7ff fd60 	bl	820d8 <__malloc_lock>
   82618:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8261c:	4969      	ldr	r1, [pc, #420]	; (827c4 <_free_r+0x1bc>)
   8261e:	f1a5 0408 	sub.w	r4, r5, #8
   82622:	f027 0301 	bic.w	r3, r7, #1
   82626:	18e2      	adds	r2, r4, r3
   82628:	688e      	ldr	r6, [r1, #8]
   8262a:	6850      	ldr	r0, [r2, #4]
   8262c:	42b2      	cmp	r2, r6
   8262e:	f020 0003 	bic.w	r0, r0, #3
   82632:	d05e      	beq.n	826f2 <_free_r+0xea>
   82634:	07fe      	lsls	r6, r7, #31
   82636:	6050      	str	r0, [r2, #4]
   82638:	d40b      	bmi.n	82652 <_free_r+0x4a>
   8263a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8263e:	f101 0e08 	add.w	lr, r1, #8
   82642:	1be4      	subs	r4, r4, r7
   82644:	68a5      	ldr	r5, [r4, #8]
   82646:	443b      	add	r3, r7
   82648:	4575      	cmp	r5, lr
   8264a:	d06d      	beq.n	82728 <_free_r+0x120>
   8264c:	68e7      	ldr	r7, [r4, #12]
   8264e:	60ef      	str	r7, [r5, #12]
   82650:	60bd      	str	r5, [r7, #8]
   82652:	1815      	adds	r5, r2, r0
   82654:	686d      	ldr	r5, [r5, #4]
   82656:	07ed      	lsls	r5, r5, #31
   82658:	d53e      	bpl.n	826d8 <_free_r+0xd0>
   8265a:	f043 0201 	orr.w	r2, r3, #1
   8265e:	6062      	str	r2, [r4, #4]
   82660:	50e3      	str	r3, [r4, r3]
   82662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82666:	d217      	bcs.n	82698 <_free_r+0x90>
   82668:	2201      	movs	r2, #1
   8266a:	08db      	lsrs	r3, r3, #3
   8266c:	1098      	asrs	r0, r3, #2
   8266e:	684d      	ldr	r5, [r1, #4]
   82670:	4413      	add	r3, r2
   82672:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82676:	4082      	lsls	r2, r0
   82678:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8267c:	432a      	orrs	r2, r5
   8267e:	3808      	subs	r0, #8
   82680:	60e0      	str	r0, [r4, #12]
   82682:	60a7      	str	r7, [r4, #8]
   82684:	604a      	str	r2, [r1, #4]
   82686:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8268a:	60fc      	str	r4, [r7, #12]
   8268c:	4640      	mov	r0, r8
   8268e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82692:	f7ff bd27 	b.w	820e4 <__malloc_unlock>
   82696:	4770      	bx	lr
   82698:	0a5a      	lsrs	r2, r3, #9
   8269a:	2a04      	cmp	r2, #4
   8269c:	d852      	bhi.n	82744 <_free_r+0x13c>
   8269e:	099a      	lsrs	r2, r3, #6
   826a0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   826a4:	00ff      	lsls	r7, r7, #3
   826a6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   826aa:	19c8      	adds	r0, r1, r7
   826ac:	59ca      	ldr	r2, [r1, r7]
   826ae:	3808      	subs	r0, #8
   826b0:	4290      	cmp	r0, r2
   826b2:	d04f      	beq.n	82754 <_free_r+0x14c>
   826b4:	6851      	ldr	r1, [r2, #4]
   826b6:	f021 0103 	bic.w	r1, r1, #3
   826ba:	428b      	cmp	r3, r1
   826bc:	d232      	bcs.n	82724 <_free_r+0x11c>
   826be:	6892      	ldr	r2, [r2, #8]
   826c0:	4290      	cmp	r0, r2
   826c2:	d1f7      	bne.n	826b4 <_free_r+0xac>
   826c4:	68c3      	ldr	r3, [r0, #12]
   826c6:	60a0      	str	r0, [r4, #8]
   826c8:	60e3      	str	r3, [r4, #12]
   826ca:	609c      	str	r4, [r3, #8]
   826cc:	60c4      	str	r4, [r0, #12]
   826ce:	4640      	mov	r0, r8
   826d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   826d4:	f7ff bd06 	b.w	820e4 <__malloc_unlock>
   826d8:	6895      	ldr	r5, [r2, #8]
   826da:	4f3b      	ldr	r7, [pc, #236]	; (827c8 <_free_r+0x1c0>)
   826dc:	4403      	add	r3, r0
   826de:	42bd      	cmp	r5, r7
   826e0:	d040      	beq.n	82764 <_free_r+0x15c>
   826e2:	68d0      	ldr	r0, [r2, #12]
   826e4:	f043 0201 	orr.w	r2, r3, #1
   826e8:	60e8      	str	r0, [r5, #12]
   826ea:	6085      	str	r5, [r0, #8]
   826ec:	6062      	str	r2, [r4, #4]
   826ee:	50e3      	str	r3, [r4, r3]
   826f0:	e7b7      	b.n	82662 <_free_r+0x5a>
   826f2:	07ff      	lsls	r7, r7, #31
   826f4:	4403      	add	r3, r0
   826f6:	d407      	bmi.n	82708 <_free_r+0x100>
   826f8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   826fc:	1b64      	subs	r4, r4, r5
   826fe:	68e2      	ldr	r2, [r4, #12]
   82700:	68a0      	ldr	r0, [r4, #8]
   82702:	442b      	add	r3, r5
   82704:	60c2      	str	r2, [r0, #12]
   82706:	6090      	str	r0, [r2, #8]
   82708:	4a30      	ldr	r2, [pc, #192]	; (827cc <_free_r+0x1c4>)
   8270a:	f043 0001 	orr.w	r0, r3, #1
   8270e:	6812      	ldr	r2, [r2, #0]
   82710:	6060      	str	r0, [r4, #4]
   82712:	4293      	cmp	r3, r2
   82714:	608c      	str	r4, [r1, #8]
   82716:	d3b9      	bcc.n	8268c <_free_r+0x84>
   82718:	4b2d      	ldr	r3, [pc, #180]	; (827d0 <_free_r+0x1c8>)
   8271a:	4640      	mov	r0, r8
   8271c:	6819      	ldr	r1, [r3, #0]
   8271e:	f7ff ff23 	bl	82568 <_malloc_trim_r>
   82722:	e7b3      	b.n	8268c <_free_r+0x84>
   82724:	4610      	mov	r0, r2
   82726:	e7cd      	b.n	826c4 <_free_r+0xbc>
   82728:	1811      	adds	r1, r2, r0
   8272a:	6849      	ldr	r1, [r1, #4]
   8272c:	07c9      	lsls	r1, r1, #31
   8272e:	d444      	bmi.n	827ba <_free_r+0x1b2>
   82730:	6891      	ldr	r1, [r2, #8]
   82732:	4403      	add	r3, r0
   82734:	68d2      	ldr	r2, [r2, #12]
   82736:	f043 0001 	orr.w	r0, r3, #1
   8273a:	60ca      	str	r2, [r1, #12]
   8273c:	6091      	str	r1, [r2, #8]
   8273e:	6060      	str	r0, [r4, #4]
   82740:	50e3      	str	r3, [r4, r3]
   82742:	e7a3      	b.n	8268c <_free_r+0x84>
   82744:	2a14      	cmp	r2, #20
   82746:	d816      	bhi.n	82776 <_free_r+0x16e>
   82748:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8274c:	00ff      	lsls	r7, r7, #3
   8274e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82752:	e7aa      	b.n	826aa <_free_r+0xa2>
   82754:	2301      	movs	r3, #1
   82756:	10aa      	asrs	r2, r5, #2
   82758:	684d      	ldr	r5, [r1, #4]
   8275a:	4093      	lsls	r3, r2
   8275c:	432b      	orrs	r3, r5
   8275e:	604b      	str	r3, [r1, #4]
   82760:	4603      	mov	r3, r0
   82762:	e7b0      	b.n	826c6 <_free_r+0xbe>
   82764:	f043 0201 	orr.w	r2, r3, #1
   82768:	614c      	str	r4, [r1, #20]
   8276a:	610c      	str	r4, [r1, #16]
   8276c:	60e5      	str	r5, [r4, #12]
   8276e:	60a5      	str	r5, [r4, #8]
   82770:	6062      	str	r2, [r4, #4]
   82772:	50e3      	str	r3, [r4, r3]
   82774:	e78a      	b.n	8268c <_free_r+0x84>
   82776:	2a54      	cmp	r2, #84	; 0x54
   82778:	d806      	bhi.n	82788 <_free_r+0x180>
   8277a:	0b1a      	lsrs	r2, r3, #12
   8277c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82780:	00ff      	lsls	r7, r7, #3
   82782:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82786:	e790      	b.n	826aa <_free_r+0xa2>
   82788:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8278c:	d806      	bhi.n	8279c <_free_r+0x194>
   8278e:	0bda      	lsrs	r2, r3, #15
   82790:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82794:	00ff      	lsls	r7, r7, #3
   82796:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8279a:	e786      	b.n	826aa <_free_r+0xa2>
   8279c:	f240 5054 	movw	r0, #1364	; 0x554
   827a0:	4282      	cmp	r2, r0
   827a2:	d806      	bhi.n	827b2 <_free_r+0x1aa>
   827a4:	0c9a      	lsrs	r2, r3, #18
   827a6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   827aa:	00ff      	lsls	r7, r7, #3
   827ac:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   827b0:	e77b      	b.n	826aa <_free_r+0xa2>
   827b2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   827b6:	257e      	movs	r5, #126	; 0x7e
   827b8:	e777      	b.n	826aa <_free_r+0xa2>
   827ba:	f043 0101 	orr.w	r1, r3, #1
   827be:	6061      	str	r1, [r4, #4]
   827c0:	6013      	str	r3, [r2, #0]
   827c2:	e763      	b.n	8268c <_free_r+0x84>
   827c4:	20072660 	.word	0x20072660
   827c8:	20072668 	.word	0x20072668
   827cc:	20072a6c 	.word	0x20072a6c
   827d0:	20072b44 	.word	0x20072b44

000827d4 <_fwalk_reent>:
   827d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   827d8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   827dc:	d01e      	beq.n	8281c <_fwalk_reent+0x48>
   827de:	4688      	mov	r8, r1
   827e0:	4607      	mov	r7, r0
   827e2:	f04f 0900 	mov.w	r9, #0
   827e6:	6875      	ldr	r5, [r6, #4]
   827e8:	68b4      	ldr	r4, [r6, #8]
   827ea:	3d01      	subs	r5, #1
   827ec:	d410      	bmi.n	82810 <_fwalk_reent+0x3c>
   827ee:	89a3      	ldrh	r3, [r4, #12]
   827f0:	3d01      	subs	r5, #1
   827f2:	2b01      	cmp	r3, #1
   827f4:	d908      	bls.n	82808 <_fwalk_reent+0x34>
   827f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   827fa:	3301      	adds	r3, #1
   827fc:	d004      	beq.n	82808 <_fwalk_reent+0x34>
   827fe:	4621      	mov	r1, r4
   82800:	4638      	mov	r0, r7
   82802:	47c0      	blx	r8
   82804:	ea49 0900 	orr.w	r9, r9, r0
   82808:	1c6b      	adds	r3, r5, #1
   8280a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8280e:	d1ee      	bne.n	827ee <_fwalk_reent+0x1a>
   82810:	6836      	ldr	r6, [r6, #0]
   82812:	2e00      	cmp	r6, #0
   82814:	d1e7      	bne.n	827e6 <_fwalk_reent+0x12>
   82816:	4648      	mov	r0, r9
   82818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8281c:	46b1      	mov	r9, r6
   8281e:	4648      	mov	r0, r9
   82820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082824 <__retarget_lock_init_recursive>:
   82824:	4770      	bx	lr
   82826:	bf00      	nop

00082828 <__retarget_lock_close_recursive>:
   82828:	4770      	bx	lr
   8282a:	bf00      	nop

0008282c <__retarget_lock_acquire_recursive>:
   8282c:	4770      	bx	lr
   8282e:	bf00      	nop

00082830 <__retarget_lock_release_recursive>:
   82830:	4770      	bx	lr
   82832:	bf00      	nop

00082834 <__swhatbuf_r>:
   82834:	b570      	push	{r4, r5, r6, lr}
   82836:	460c      	mov	r4, r1
   82838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8283c:	b090      	sub	sp, #64	; 0x40
   8283e:	2900      	cmp	r1, #0
   82840:	4615      	mov	r5, r2
   82842:	461e      	mov	r6, r3
   82844:	db14      	blt.n	82870 <__swhatbuf_r+0x3c>
   82846:	aa01      	add	r2, sp, #4
   82848:	f000 f952 	bl	82af0 <_fstat_r>
   8284c:	2800      	cmp	r0, #0
   8284e:	db0f      	blt.n	82870 <__swhatbuf_r+0x3c>
   82850:	9a02      	ldr	r2, [sp, #8]
   82852:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8285a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8285e:	fab2 f282 	clz	r2, r2
   82862:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82866:	0952      	lsrs	r2, r2, #5
   82868:	6032      	str	r2, [r6, #0]
   8286a:	602b      	str	r3, [r5, #0]
   8286c:	b010      	add	sp, #64	; 0x40
   8286e:	bd70      	pop	{r4, r5, r6, pc}
   82870:	2300      	movs	r3, #0
   82872:	89a2      	ldrh	r2, [r4, #12]
   82874:	6033      	str	r3, [r6, #0]
   82876:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8287a:	d004      	beq.n	82886 <__swhatbuf_r+0x52>
   8287c:	2240      	movs	r2, #64	; 0x40
   8287e:	4618      	mov	r0, r3
   82880:	602a      	str	r2, [r5, #0]
   82882:	b010      	add	sp, #64	; 0x40
   82884:	bd70      	pop	{r4, r5, r6, pc}
   82886:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8288a:	602b      	str	r3, [r5, #0]
   8288c:	b010      	add	sp, #64	; 0x40
   8288e:	bd70      	pop	{r4, r5, r6, pc}

00082890 <__sread>:
   82890:	b510      	push	{r4, lr}
   82892:	460c      	mov	r4, r1
   82894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82898:	f000 f954 	bl	82b44 <_read_r>
   8289c:	2800      	cmp	r0, #0
   8289e:	db03      	blt.n	828a8 <__sread+0x18>
   828a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   828a2:	4403      	add	r3, r0
   828a4:	6523      	str	r3, [r4, #80]	; 0x50
   828a6:	bd10      	pop	{r4, pc}
   828a8:	89a3      	ldrh	r3, [r4, #12]
   828aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   828ae:	81a3      	strh	r3, [r4, #12]
   828b0:	bd10      	pop	{r4, pc}
   828b2:	bf00      	nop

000828b4 <__swrite>:
   828b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828b8:	460c      	mov	r4, r1
   828ba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   828be:	461f      	mov	r7, r3
   828c0:	05cb      	lsls	r3, r1, #23
   828c2:	4616      	mov	r6, r2
   828c4:	4605      	mov	r5, r0
   828c6:	d507      	bpl.n	828d8 <__swrite+0x24>
   828c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   828cc:	2302      	movs	r3, #2
   828ce:	2200      	movs	r2, #0
   828d0:	f000 f922 	bl	82b18 <_lseek_r>
   828d4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   828d8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   828dc:	81a1      	strh	r1, [r4, #12]
   828de:	463b      	mov	r3, r7
   828e0:	4632      	mov	r2, r6
   828e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   828e6:	4628      	mov	r0, r5
   828e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   828ec:	f000 b814 	b.w	82918 <_write_r>

000828f0 <__sseek>:
   828f0:	b510      	push	{r4, lr}
   828f2:	460c      	mov	r4, r1
   828f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   828f8:	f000 f90e 	bl	82b18 <_lseek_r>
   828fc:	89a3      	ldrh	r3, [r4, #12]
   828fe:	1c42      	adds	r2, r0, #1
   82900:	bf0e      	itee	eq
   82902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8290a:	6520      	strne	r0, [r4, #80]	; 0x50
   8290c:	81a3      	strh	r3, [r4, #12]
   8290e:	bd10      	pop	{r4, pc}

00082910 <__sclose>:
   82910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82914:	f000 b878 	b.w	82a08 <_close_r>

00082918 <_write_r>:
   82918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8291a:	460e      	mov	r6, r1
   8291c:	2500      	movs	r5, #0
   8291e:	4c08      	ldr	r4, [pc, #32]	; (82940 <_write_r+0x28>)
   82920:	4611      	mov	r1, r2
   82922:	4607      	mov	r7, r0
   82924:	461a      	mov	r2, r3
   82926:	4630      	mov	r0, r6
   82928:	6025      	str	r5, [r4, #0]
   8292a:	f7fd feef 	bl	8070c <_write>
   8292e:	1c43      	adds	r3, r0, #1
   82930:	d000      	beq.n	82934 <_write_r+0x1c>
   82932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82934:	6823      	ldr	r3, [r4, #0]
   82936:	2b00      	cmp	r3, #0
   82938:	d0fb      	beq.n	82932 <_write_r+0x1a>
   8293a:	603b      	str	r3, [r7, #0]
   8293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8293e:	bf00      	nop
   82940:	20072b78 	.word	0x20072b78

00082944 <__register_exitproc>:
   82944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82948:	4d2c      	ldr	r5, [pc, #176]	; (829fc <__register_exitproc+0xb8>)
   8294a:	4606      	mov	r6, r0
   8294c:	6828      	ldr	r0, [r5, #0]
   8294e:	4698      	mov	r8, r3
   82950:	460f      	mov	r7, r1
   82952:	4691      	mov	r9, r2
   82954:	f7ff ff6a 	bl	8282c <__retarget_lock_acquire_recursive>
   82958:	4b29      	ldr	r3, [pc, #164]	; (82a00 <__register_exitproc+0xbc>)
   8295a:	681c      	ldr	r4, [r3, #0]
   8295c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   82960:	2b00      	cmp	r3, #0
   82962:	d03e      	beq.n	829e2 <__register_exitproc+0x9e>
   82964:	685a      	ldr	r2, [r3, #4]
   82966:	2a1f      	cmp	r2, #31
   82968:	dc1c      	bgt.n	829a4 <__register_exitproc+0x60>
   8296a:	f102 0e01 	add.w	lr, r2, #1
   8296e:	b176      	cbz	r6, 8298e <__register_exitproc+0x4a>
   82970:	2101      	movs	r1, #1
   82972:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82976:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8297a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8297e:	4091      	lsls	r1, r2
   82980:	4308      	orrs	r0, r1
   82982:	2e02      	cmp	r6, #2
   82984:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82988:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8298c:	d023      	beq.n	829d6 <__register_exitproc+0x92>
   8298e:	3202      	adds	r2, #2
   82990:	f8c3 e004 	str.w	lr, [r3, #4]
   82994:	6828      	ldr	r0, [r5, #0]
   82996:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8299a:	f7ff ff49 	bl	82830 <__retarget_lock_release_recursive>
   8299e:	2000      	movs	r0, #0
   829a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829a4:	4b17      	ldr	r3, [pc, #92]	; (82a04 <__register_exitproc+0xc0>)
   829a6:	b30b      	cbz	r3, 829ec <__register_exitproc+0xa8>
   829a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   829ac:	f7ff f81e 	bl	819ec <malloc>
   829b0:	4603      	mov	r3, r0
   829b2:	b1d8      	cbz	r0, 829ec <__register_exitproc+0xa8>
   829b4:	2000      	movs	r0, #0
   829b6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   829ba:	f04f 0e01 	mov.w	lr, #1
   829be:	6058      	str	r0, [r3, #4]
   829c0:	6019      	str	r1, [r3, #0]
   829c2:	4602      	mov	r2, r0
   829c4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   829cc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   829d0:	2e00      	cmp	r6, #0
   829d2:	d0dc      	beq.n	8298e <__register_exitproc+0x4a>
   829d4:	e7cc      	b.n	82970 <__register_exitproc+0x2c>
   829d6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   829da:	4301      	orrs	r1, r0
   829dc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   829e0:	e7d5      	b.n	8298e <__register_exitproc+0x4a>
   829e2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   829e6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   829ea:	e7bb      	b.n	82964 <__register_exitproc+0x20>
   829ec:	6828      	ldr	r0, [r5, #0]
   829ee:	f7ff ff1f 	bl	82830 <__retarget_lock_release_recursive>
   829f2:	f04f 30ff 	mov.w	r0, #4294967295
   829f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829fa:	bf00      	nop
   829fc:	20072a70 	.word	0x20072a70
   82a00:	00082f80 	.word	0x00082f80
   82a04:	000819ed 	.word	0x000819ed

00082a08 <_close_r>:
   82a08:	b538      	push	{r3, r4, r5, lr}
   82a0a:	2300      	movs	r3, #0
   82a0c:	4c06      	ldr	r4, [pc, #24]	; (82a28 <_close_r+0x20>)
   82a0e:	4605      	mov	r5, r0
   82a10:	4608      	mov	r0, r1
   82a12:	6023      	str	r3, [r4, #0]
   82a14:	f7fe ff9e 	bl	81954 <_close>
   82a18:	1c43      	adds	r3, r0, #1
   82a1a:	d000      	beq.n	82a1e <_close_r+0x16>
   82a1c:	bd38      	pop	{r3, r4, r5, pc}
   82a1e:	6823      	ldr	r3, [r4, #0]
   82a20:	2b00      	cmp	r3, #0
   82a22:	d0fb      	beq.n	82a1c <_close_r+0x14>
   82a24:	602b      	str	r3, [r5, #0]
   82a26:	bd38      	pop	{r3, r4, r5, pc}
   82a28:	20072b78 	.word	0x20072b78

00082a2c <_fclose_r>:
   82a2c:	b570      	push	{r4, r5, r6, lr}
   82a2e:	b159      	cbz	r1, 82a48 <_fclose_r+0x1c>
   82a30:	4605      	mov	r5, r0
   82a32:	460c      	mov	r4, r1
   82a34:	b110      	cbz	r0, 82a3c <_fclose_r+0x10>
   82a36:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a38:	2b00      	cmp	r3, #0
   82a3a:	d03c      	beq.n	82ab6 <_fclose_r+0x8a>
   82a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82a3e:	07d8      	lsls	r0, r3, #31
   82a40:	d505      	bpl.n	82a4e <_fclose_r+0x22>
   82a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a46:	b92b      	cbnz	r3, 82a54 <_fclose_r+0x28>
   82a48:	2600      	movs	r6, #0
   82a4a:	4630      	mov	r0, r6
   82a4c:	bd70      	pop	{r4, r5, r6, pc}
   82a4e:	89a3      	ldrh	r3, [r4, #12]
   82a50:	0599      	lsls	r1, r3, #22
   82a52:	d53c      	bpl.n	82ace <_fclose_r+0xa2>
   82a54:	4621      	mov	r1, r4
   82a56:	4628      	mov	r0, r5
   82a58:	f7ff fc3c 	bl	822d4 <__sflush_r>
   82a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82a5e:	4606      	mov	r6, r0
   82a60:	b133      	cbz	r3, 82a70 <_fclose_r+0x44>
   82a62:	69e1      	ldr	r1, [r4, #28]
   82a64:	4628      	mov	r0, r5
   82a66:	4798      	blx	r3
   82a68:	2800      	cmp	r0, #0
   82a6a:	bfb8      	it	lt
   82a6c:	f04f 36ff 	movlt.w	r6, #4294967295
   82a70:	89a3      	ldrh	r3, [r4, #12]
   82a72:	061a      	lsls	r2, r3, #24
   82a74:	d422      	bmi.n	82abc <_fclose_r+0x90>
   82a76:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82a78:	b141      	cbz	r1, 82a8c <_fclose_r+0x60>
   82a7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82a7e:	4299      	cmp	r1, r3
   82a80:	d002      	beq.n	82a88 <_fclose_r+0x5c>
   82a82:	4628      	mov	r0, r5
   82a84:	f7ff fdc0 	bl	82608 <_free_r>
   82a88:	2300      	movs	r3, #0
   82a8a:	6323      	str	r3, [r4, #48]	; 0x30
   82a8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82a8e:	b121      	cbz	r1, 82a9a <_fclose_r+0x6e>
   82a90:	4628      	mov	r0, r5
   82a92:	f7ff fdb9 	bl	82608 <_free_r>
   82a96:	2300      	movs	r3, #0
   82a98:	6463      	str	r3, [r4, #68]	; 0x44
   82a9a:	f7ff fd3f 	bl	8251c <__sfp_lock_acquire>
   82a9e:	2200      	movs	r2, #0
   82aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82aa2:	81a2      	strh	r2, [r4, #12]
   82aa4:	07db      	lsls	r3, r3, #31
   82aa6:	d50e      	bpl.n	82ac6 <_fclose_r+0x9a>
   82aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82aaa:	f7ff febd 	bl	82828 <__retarget_lock_close_recursive>
   82aae:	f7ff fd3b 	bl	82528 <__sfp_lock_release>
   82ab2:	4630      	mov	r0, r6
   82ab4:	bd70      	pop	{r4, r5, r6, pc}
   82ab6:	f7ff fd01 	bl	824bc <__sinit>
   82aba:	e7bf      	b.n	82a3c <_fclose_r+0x10>
   82abc:	6921      	ldr	r1, [r4, #16]
   82abe:	4628      	mov	r0, r5
   82ac0:	f7ff fda2 	bl	82608 <_free_r>
   82ac4:	e7d7      	b.n	82a76 <_fclose_r+0x4a>
   82ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82ac8:	f7ff feb2 	bl	82830 <__retarget_lock_release_recursive>
   82acc:	e7ec      	b.n	82aa8 <_fclose_r+0x7c>
   82ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82ad0:	f7ff feac 	bl	8282c <__retarget_lock_acquire_recursive>
   82ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82ad8:	2b00      	cmp	r3, #0
   82ada:	d1bb      	bne.n	82a54 <_fclose_r+0x28>
   82adc:	6e66      	ldr	r6, [r4, #100]	; 0x64
   82ade:	f016 0601 	ands.w	r6, r6, #1
   82ae2:	d1b1      	bne.n	82a48 <_fclose_r+0x1c>
   82ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82ae6:	f7ff fea3 	bl	82830 <__retarget_lock_release_recursive>
   82aea:	4630      	mov	r0, r6
   82aec:	bd70      	pop	{r4, r5, r6, pc}
   82aee:	bf00      	nop

00082af0 <_fstat_r>:
   82af0:	b570      	push	{r4, r5, r6, lr}
   82af2:	460d      	mov	r5, r1
   82af4:	2300      	movs	r3, #0
   82af6:	4c07      	ldr	r4, [pc, #28]	; (82b14 <_fstat_r+0x24>)
   82af8:	4606      	mov	r6, r0
   82afa:	4611      	mov	r1, r2
   82afc:	4628      	mov	r0, r5
   82afe:	6023      	str	r3, [r4, #0]
   82b00:	f7fe ff2b 	bl	8195a <_fstat>
   82b04:	1c43      	adds	r3, r0, #1
   82b06:	d000      	beq.n	82b0a <_fstat_r+0x1a>
   82b08:	bd70      	pop	{r4, r5, r6, pc}
   82b0a:	6823      	ldr	r3, [r4, #0]
   82b0c:	2b00      	cmp	r3, #0
   82b0e:	d0fb      	beq.n	82b08 <_fstat_r+0x18>
   82b10:	6033      	str	r3, [r6, #0]
   82b12:	bd70      	pop	{r4, r5, r6, pc}
   82b14:	20072b78 	.word	0x20072b78

00082b18 <_lseek_r>:
   82b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b1a:	460e      	mov	r6, r1
   82b1c:	2500      	movs	r5, #0
   82b1e:	4c08      	ldr	r4, [pc, #32]	; (82b40 <_lseek_r+0x28>)
   82b20:	4611      	mov	r1, r2
   82b22:	4607      	mov	r7, r0
   82b24:	461a      	mov	r2, r3
   82b26:	4630      	mov	r0, r6
   82b28:	6025      	str	r5, [r4, #0]
   82b2a:	f7fe ff1b 	bl	81964 <_lseek>
   82b2e:	1c43      	adds	r3, r0, #1
   82b30:	d000      	beq.n	82b34 <_lseek_r+0x1c>
   82b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b34:	6823      	ldr	r3, [r4, #0]
   82b36:	2b00      	cmp	r3, #0
   82b38:	d0fb      	beq.n	82b32 <_lseek_r+0x1a>
   82b3a:	603b      	str	r3, [r7, #0]
   82b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b3e:	bf00      	nop
   82b40:	20072b78 	.word	0x20072b78

00082b44 <_read_r>:
   82b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b46:	460e      	mov	r6, r1
   82b48:	2500      	movs	r5, #0
   82b4a:	4c08      	ldr	r4, [pc, #32]	; (82b6c <_read_r+0x28>)
   82b4c:	4611      	mov	r1, r2
   82b4e:	4607      	mov	r7, r0
   82b50:	461a      	mov	r2, r3
   82b52:	4630      	mov	r0, r6
   82b54:	6025      	str	r5, [r4, #0]
   82b56:	f7fd fdbf 	bl	806d8 <_read>
   82b5a:	1c43      	adds	r3, r0, #1
   82b5c:	d000      	beq.n	82b60 <_read_r+0x1c>
   82b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b60:	6823      	ldr	r3, [r4, #0]
   82b62:	2b00      	cmp	r3, #0
   82b64:	d0fb      	beq.n	82b5e <_read_r+0x1a>
   82b66:	603b      	str	r3, [r7, #0]
   82b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b6a:	bf00      	nop
   82b6c:	20072b78 	.word	0x20072b78

00082b70 <crc32_tab>:
   82b70:	00000000 77073096 ee0e612c 990951ba     .....0.w,a...Q..
   82b80:	076dc419 706af48f e963a535 9e6495a3     ..m...jp5.c...d.
   82b90:	0edb8832 79dcb8a4 e0d5e91e 97d2d988     2......y........
   82ba0:	09b64c2b 7eb17cbd e7b82d07 90bf1d91     +L...|.~.-......
   82bb0:	1db71064 6ab020f2 f3b97148 84be41de     d.... .jHq...A..
   82bc0:	1adad47d 6ddde4eb f4d4b551 83d385c7     }......mQ.......
   82bd0:	136c9856 646ba8c0 fd62f97a 8a65c9ec     V.l...kdz.b...e.
   82be0:	14015c4f 63066cd9 fa0f3d63 8d080df5     O\...l.cc=......
   82bf0:	3b6e20c8 4c69105e d56041e4 a2677172     . n;^.iL.A`.rqg.
   82c00:	3c03e4d1 4b04d447 d20d85fd a50ab56b     ...<G..K....k...
   82c10:	35b5a8fa 42b2986c dbbbc9d6 acbcf940     ...5l..B....@...
   82c20:	32d86ce3 45df5c75 dcd60dcf abd13d59     .l.2u\.E....Y=..
   82c30:	26d930ac 51de003a c8d75180 bfd06116     .0.&:..Q.Q...a..
   82c40:	21b4f4b5 56b3c423 cfba9599 b8bda50f     ...!#..V........
   82c50:	2802b89e 5f058808 c60cd9b2 b10be924     ...(..._....$...
   82c60:	2f6f7c87 58684c11 c1611dab b6662d3d     .|o/.LhX..a.=-f.
   82c70:	76dc4190 01db7106 98d220bc efd5102a     .A.v.q... ..*...
   82c80:	71b18589 06b6b51f 9fbfe4a5 e8b8d433     ...q........3...
   82c90:	7807c9a2 0f00f934 9609a88e e10e9818     ...x4...........
   82ca0:	7f6a0dbb 086d3d2d 91646c97 e6635c01     ..j.-=m..ld..\c.
   82cb0:	6b6b51f4 1c6c6162 856530d8 f262004e     .Qkkbal..0e.N.b.
   82cc0:	6c0695ed 1b01a57b 8208f4c1 f50fc457     ...l{.......W...
   82cd0:	65b0d9c6 12b7e950 8bbeb8ea fcb9887c     ...eP.......|...
   82ce0:	62dd1ddf 15da2d49 8cd37cf3 fbd44c65     ...bI-...|..eL..
   82cf0:	4db26158 3ab551ce a3bc0074 d4bb30e2     Xa.M.Q.:t....0..
   82d00:	4adfa541 3dd895d7 a4d1c46d d3d6f4fb     A..J...=m.......
   82d10:	4369e96a 346ed9fc ad678846 da60b8d0     j.iC..n4F.g...`.
   82d20:	44042d73 33031de5 aa0a4c5f dd0d7cc9     s-.D...3_L...|..
   82d30:	5005713c 270241aa be0b1010 c90c2086     <q.P.A.'..... ..
   82d40:	5768b525 206f85b3 b966d409 ce61e49f     %.hW..o ..f...a.
   82d50:	5edef90e 29d9c998 b0d09822 c7d7a8b4     ...^...)".......
   82d60:	59b33d17 2eb40d81 b7bd5c3b c0ba6cad     .=.Y....;\...l..
   82d70:	edb88320 9abfb3b6 03b6e20c 74b1d29a      ..............t
   82d80:	ead54739 9dd277af 04db2615 73dc1683     9G...w...&.....s
   82d90:	e3630b12 94643b84 0d6d6a3e 7a6a5aa8     ..c..;d.>jm..Zjz
   82da0:	e40ecf0b 9309ff9d 0a00ae27 7d079eb1     ........'......}
   82db0:	f00f9344 8708a3d2 1e01f268 6906c2fe     D.......h......i
   82dc0:	f762575d 806567cb 196c3671 6e6b06e7     ]Wb..ge.q6l...kn
   82dd0:	fed41b76 89d32be0 10da7a5a 67dd4acc     v....+..Zz...J.g
   82de0:	f9b9df6f 8ebeeff9 17b7be43 60b08ed5     o.......C......`
   82df0:	d6d6a3e8 a1d1937e 38d8c2c4 4fdff252     ....~......8R..O
   82e00:	d1bb67f1 a6bc5767 3fb506dd 48b2364b     .g..gW.....?K6.H
   82e10:	d80d2bda af0a1b4c 36034af6 41047a60     .+..L....J.6`z.A
   82e20:	df60efc3 a867df55 316e8eef 4669be79     ..`.U.g...n1y.iF
   82e30:	cb61b38c bc66831a 256fd2a0 5268e236     ..a...f...o%6.hR
   82e40:	cc0c7795 bb0b4703 220216b9 5505262f     .w...G....."/&.U
   82e50:	c5ba3bbe b2bd0b28 2bb45a92 5cb36a04     .;..(....Z.+.j.\
   82e60:	c2d7ffa7 b5d0cf31 2cd99e8b 5bdeae1d     ....1......,...[
   82e70:	9b64c2b0 ec63f226 756aa39c 026d930a     ..d.&.c...ju..m.
   82e80:	9c0906a9 eb0e363f 72076785 05005713     ....?6...g.r.W..
   82e90:	95bf4a82 e2b87a14 7bb12bae 0cb61b38     .J...z...+.{8...
   82ea0:	92d28e9b e5d5be0d 7cdcefb7 0bdbdf21     ...........|!...
   82eb0:	86d3d2d4 f1d4e242 68ddb3f8 1fda836e     ....B......hn...
   82ec0:	81be16cd f6b9265b 6fb077e1 18b74777     ....[&...w.owG..
   82ed0:	88085ae6 ff0f6a70 66063bca 11010b5c     .Z..pj...;.f\...
   82ee0:	8f659eff f862ae69 616bffd3 166ccf45     ..e.i.b...kaE.l.
   82ef0:	a00ae278 d70dd2ee 4e048354 3903b3c2     x.......T..N...9
   82f00:	a7672661 d06016f7 4969474d 3e6e77db     a&g...`.MGiI.wn>
   82f10:	aed16a4a d9d65adc 40df0b66 37d83bf0     Jj...Z..f..@.;.7
   82f20:	a9bcae53 debb9ec5 47b2cf7f 30b5ffe9     S..........G...0
   82f30:	bdbdf21c cabac28a 53b39330 24b4a3a6     ........0..S...$
   82f40:	bad03605 cdd70693 54de5729 23d967bf     .6......)W.T.g.#
   82f50:	b3667a2e c4614ab8 5d681b02 2a6f2b94     .zf..Ja...h].+o*
   82f60:	b40bbe37 c30c8ea1 5a05df1b 2d02ef8d     7..........Z...-
   82f70:	92e84555 5962b1d6 f2c88afc 354ae1d6     UE....bY......J5

00082f80 <_global_impure_ptr>:
   82f80:	20072238                                8". 

00082f84 <_init>:
   82f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f86:	bf00      	nop
   82f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f8a:	bc08      	pop	{r3}
   82f8c:	469e      	mov	lr, r3
   82f8e:	4770      	bx	lr

00082f90 <__init_array_start>:
   82f90:	000822b5 	.word	0x000822b5

00082f94 <__frame_dummy_init_array_entry>:
   82f94:	00080119                                ....

00082f98 <_fini>:
   82f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f9a:	bf00      	nop
   82f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f9e:	bc08      	pop	{r3}
   82fa0:	469e      	mov	lr, r3
   82fa2:	4770      	bx	lr
   82fa4:	0000      	movs	r0, r0
	...

00082fa8 <__system_init_flash_veneer>:
   82fa8:	f85f f000 	ldr.w	pc, [pc]	; 82fac <__system_init_flash_veneer+0x4>
   82fac:	20070145 	.word	0x20070145

00082fb0 <__portable_delay_cycles_veneer>:
   82fb0:	f85f f000 	ldr.w	pc, [pc]	; 82fb4 <__portable_delay_cycles_veneer+0x4>
   82fb4:	20070095 	.word	0x20070095

00082fb8 <__efc_perform_fcr_veneer>:
   82fb8:	f85f f000 	ldr.w	pc, [pc]	; 82fbc <__efc_perform_fcr_veneer+0x4>
   82fbc:	20070079 	.word	0x20070079

00082fc0 <__efc_write_fmr_veneer>:
   82fc0:	f85f f000 	ldr.w	pc, [pc]	; 82fc4 <__efc_write_fmr_veneer+0x4>
   82fc4:	20070075 	.word	0x20070075

00082fc8 <__fini_array_start>:
   82fc8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9d06      	ldr	r5, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4c1a      	ldr	r4, [pc, #104]	; (20070070 <efc_perform_read_sequence+0x70>)
20070008:	42a0      	cmp	r0, r4
2007000a:	d012      	beq.n	20070032 <efc_perform_read_sequence+0x32>
2007000c:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070010:	b35b      	cbz	r3, 2007006a <efc_perform_read_sequence+0x6a>
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070012:	6804      	ldr	r4, [r0, #0]
20070014:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
20070018:	6004      	str	r4, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007001a:	b2c9      	uxtb	r1, r1
2007001c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070020:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070022:	6881      	ldr	r1, [r0, #8]
20070024:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070026:	9901      	ldr	r1, [sp, #4]
20070028:	f011 0f01 	tst.w	r1, #1
2007002c:	d1f9      	bne.n	20070022 <efc_perform_read_sequence+0x22>
2007002e:	2100      	movs	r1, #0
20070030:	e007      	b.n	20070042 <efc_perform_read_sequence+0x42>
			(uint32_t *) ((p_efc == EFC0) ?
20070032:	f44f 2600 	mov.w	r6, #524288	; 0x80000
20070036:	e7eb      	b.n	20070010 <efc_perform_read_sequence+0x10>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070038:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
2007003c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070040:	3101      	adds	r1, #1
20070042:	42a9      	cmp	r1, r5
20070044:	d3f8      	bcc.n	20070038 <efc_perform_read_sequence+0x38>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070046:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070048:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007004c:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007004e:	6883      	ldr	r3, [r0, #8]
20070050:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070052:	9b01      	ldr	r3, [sp, #4]
20070054:	f013 0f01 	tst.w	r3, #1
20070058:	d0f9      	beq.n	2007004e <efc_perform_read_sequence+0x4e>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005a:	6803      	ldr	r3, [r0, #0]
2007005c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070060:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070062:	2000      	movs	r0, #0
}
20070064:	b003      	add	sp, #12
20070066:	bc70      	pop	{r4, r5, r6}
20070068:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006a:	2002      	movs	r0, #2
2007006c:	e7fa      	b.n	20070064 <efc_perform_read_sequence+0x64>
2007006e:	bf00      	nop
20070070:	400e0a00 	.word	0x400e0a00

20070074 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070074:	6001      	str	r1, [r0, #0]
20070076:	4770      	bx	lr

20070078 <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
20070078:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007a:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
2007007c:	6883      	ldr	r3, [r0, #8]
2007007e:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070080:	9b01      	ldr	r3, [sp, #4]
20070082:	f013 0f01 	tst.w	r3, #1
20070086:	d0f9      	beq.n	2007007c <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
20070088:	9801      	ldr	r0, [sp, #4]
}
2007008a:	f000 0006 	and.w	r0, r0, #6
2007008e:	b002      	add	sp, #8
20070090:	4770      	bx	lr
20070092:	bf00      	nop

20070094 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070094:	f3bf 8f5f 	dmb	sy
20070098:	3801      	subs	r0, #1
2007009a:	d1fb      	bne.n	20070094 <portable_delay_cycles>
2007009c:	4770      	bx	lr
	...

200700a0 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200700a4:	4a20      	ldr	r2, [pc, #128]	; (20070128 <SystemInit+0x88>)
200700a6:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ac:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700ae:	4b1f      	ldr	r3, [pc, #124]	; (2007012c <SystemInit+0x8c>)
200700b0:	6a1b      	ldr	r3, [r3, #32]
200700b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700b6:	d107      	bne.n	200700c8 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b8:	4a1d      	ldr	r2, [pc, #116]	; (20070130 <SystemInit+0x90>)
200700ba:	4b1c      	ldr	r3, [pc, #112]	; (2007012c <SystemInit+0x8c>)
200700bc:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700be:	4b1b      	ldr	r3, [pc, #108]	; (2007012c <SystemInit+0x8c>)
200700c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700c2:	f013 0f01 	tst.w	r3, #1
200700c6:	d0fa      	beq.n	200700be <SystemInit+0x1e>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c8:	4a1a      	ldr	r2, [pc, #104]	; (20070134 <SystemInit+0x94>)
200700ca:	4b18      	ldr	r3, [pc, #96]	; (2007012c <SystemInit+0x8c>)
200700cc:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700ce:	4b17      	ldr	r3, [pc, #92]	; (2007012c <SystemInit+0x8c>)
200700d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700d6:	d0fa      	beq.n	200700ce <SystemInit+0x2e>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d8:	4a14      	ldr	r2, [pc, #80]	; (2007012c <SystemInit+0x8c>)
200700da:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700dc:	f023 0303 	bic.w	r3, r3, #3
200700e0:	f043 0301 	orr.w	r3, r3, #1
200700e4:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700e6:	4b11      	ldr	r3, [pc, #68]	; (2007012c <SystemInit+0x8c>)
200700e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700ea:	f013 0f08 	tst.w	r3, #8
200700ee:	d0fa      	beq.n	200700e6 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700f0:	4a11      	ldr	r2, [pc, #68]	; (20070138 <SystemInit+0x98>)
200700f2:	4b0e      	ldr	r3, [pc, #56]	; (2007012c <SystemInit+0x8c>)
200700f4:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700f6:	4b0d      	ldr	r3, [pc, #52]	; (2007012c <SystemInit+0x8c>)
200700f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
200700fa:	f013 0f02 	tst.w	r3, #2
200700fe:	d0fa      	beq.n	200700f6 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070100:	2211      	movs	r2, #17
20070102:	4b0a      	ldr	r3, [pc, #40]	; (2007012c <SystemInit+0x8c>)
20070104:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070106:	4b09      	ldr	r3, [pc, #36]	; (2007012c <SystemInit+0x8c>)
20070108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007010a:	f013 0f08 	tst.w	r3, #8
2007010e:	d0fa      	beq.n	20070106 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070110:	2212      	movs	r2, #18
20070112:	4b06      	ldr	r3, [pc, #24]	; (2007012c <SystemInit+0x8c>)
20070114:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070116:	4b05      	ldr	r3, [pc, #20]	; (2007012c <SystemInit+0x8c>)
20070118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007011a:	f013 0f08 	tst.w	r3, #8
2007011e:	d0fa      	beq.n	20070116 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070120:	4a06      	ldr	r2, [pc, #24]	; (2007013c <SystemInit+0x9c>)
20070122:	4b07      	ldr	r3, [pc, #28]	; (20070140 <SystemInit+0xa0>)
20070124:	601a      	str	r2, [r3, #0]
20070126:	4770      	bx	lr
20070128:	400e0a00 	.word	0x400e0a00
2007012c:	400e0600 	.word	0x400e0600
20070130:	00370809 	.word	0x00370809
20070134:	01370809 	.word	0x01370809
20070138:	200d3f01 	.word	0x200d3f01
2007013c:	0501bd00 	.word	0x0501bd00
20070140:	20072230 	.word	0x20072230

20070144 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
20070144:	4b1e      	ldr	r3, [pc, #120]	; (200701c0 <system_init_flash+0x7c>)
20070146:	4298      	cmp	r0, r3
20070148:	d913      	bls.n	20070172 <system_init_flash+0x2e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007014a:	4b1e      	ldr	r3, [pc, #120]	; (200701c4 <system_init_flash+0x80>)
2007014c:	4298      	cmp	r0, r3
2007014e:	d917      	bls.n	20070180 <system_init_flash+0x3c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070150:	4b1d      	ldr	r3, [pc, #116]	; (200701c8 <system_init_flash+0x84>)
20070152:	4298      	cmp	r0, r3
20070154:	d91c      	bls.n	20070190 <system_init_flash+0x4c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070156:	4b1d      	ldr	r3, [pc, #116]	; (200701cc <system_init_flash+0x88>)
20070158:	4298      	cmp	r0, r3
2007015a:	d921      	bls.n	200701a0 <system_init_flash+0x5c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007015c:	4b1c      	ldr	r3, [pc, #112]	; (200701d0 <system_init_flash+0x8c>)
2007015e:	4298      	cmp	r0, r3
20070160:	d926      	bls.n	200701b0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070162:	f44f 63a0 	mov.w	r3, #1280	; 0x500
20070166:	4a1b      	ldr	r2, [pc, #108]	; (200701d4 <system_init_flash+0x90>)
20070168:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007016a:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016e:	6013      	str	r3, [r2, #0]
20070170:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070172:	2300      	movs	r3, #0
20070174:	4a17      	ldr	r2, [pc, #92]	; (200701d4 <system_init_flash+0x90>)
20070176:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070178:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007017c:	6013      	str	r3, [r2, #0]
2007017e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
20070180:	f44f 7380 	mov.w	r3, #256	; 0x100
20070184:	4a13      	ldr	r2, [pc, #76]	; (200701d4 <system_init_flash+0x90>)
20070186:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070188:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007018c:	6013      	str	r3, [r2, #0]
2007018e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070190:	f44f 7300 	mov.w	r3, #512	; 0x200
20070194:	4a0f      	ldr	r2, [pc, #60]	; (200701d4 <system_init_flash+0x90>)
20070196:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070198:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007019c:	6013      	str	r3, [r2, #0]
2007019e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200701a0:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a4:	4a0b      	ldr	r2, [pc, #44]	; (200701d4 <system_init_flash+0x90>)
200701a6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701ac:	6013      	str	r3, [r2, #0]
200701ae:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200701b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200701b4:	4a07      	ldr	r2, [pc, #28]	; (200701d4 <system_init_flash+0x90>)
200701b6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
200701b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701bc:	6013      	str	r3, [r2, #0]
200701be:	4770      	bx	lr
200701c0:	0121eabf 	.word	0x0121eabf
200701c4:	02faf07f 	.word	0x02faf07f
200701c8:	03d08fff 	.word	0x03d08fff
200701cc:	04c4b3ff 	.word	0x04c4b3ff
200701d0:	055d4a7f 	.word	0x055d4a7f
200701d4:	400e0a00 	.word	0x400e0a00

200701d8 <mdi>:
200701d8:	00000a10 00000000 00000000 00000000     ................
	...

2007220c <rom_ops>:
2007220c:	00081059 00080fd9 00080f1d 00080e69     Y...........i...
2007221c:	00080e35 00080df5 00080d59 00080cb1     5.......Y.......

2007222c <g_interrupt_enabled>:
2007222c:	00000001                                ....

20072230 <SystemCoreClock>:
20072230:	003d0900                                ..=.

20072234 <_impure_ptr>:
20072234:	20072238                                8". 

20072238 <impure_data>:
20072238:	00000000 20072524 2007258c 200725f4     ....$%. .%. .%. 
	...
200722e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200722f0:	0005deec 0000000b 00000000 00000000     ................
	...

20072660 <__malloc_av_>:
	...
20072668:	20072660 20072660 20072668 20072668     `&. `&. h&. h&. 
20072678:	20072670 20072670 20072678 20072678     p&. p&. x&. x&. 
20072688:	20072680 20072680 20072688 20072688     .&. .&. .&. .&. 
20072698:	20072690 20072690 20072698 20072698     .&. .&. .&. .&. 
200726a8:	200726a0 200726a0 200726a8 200726a8     .&. .&. .&. .&. 
200726b8:	200726b0 200726b0 200726b8 200726b8     .&. .&. .&. .&. 
200726c8:	200726c0 200726c0 200726c8 200726c8     .&. .&. .&. .&. 
200726d8:	200726d0 200726d0 200726d8 200726d8     .&. .&. .&. .&. 
200726e8:	200726e0 200726e0 200726e8 200726e8     .&. .&. .&. .&. 
200726f8:	200726f0 200726f0 200726f8 200726f8     .&. .&. .&. .&. 
20072708:	20072700 20072700 20072708 20072708     .'. .'. .'. .'. 
20072718:	20072710 20072710 20072718 20072718     .'. .'. .'. .'. 
20072728:	20072720 20072720 20072728 20072728      '.  '. ('. ('. 
20072738:	20072730 20072730 20072738 20072738     0'. 0'. 8'. 8'. 
20072748:	20072740 20072740 20072748 20072748     @'. @'. H'. H'. 
20072758:	20072750 20072750 20072758 20072758     P'. P'. X'. X'. 
20072768:	20072760 20072760 20072768 20072768     `'. `'. h'. h'. 
20072778:	20072770 20072770 20072778 20072778     p'. p'. x'. x'. 
20072788:	20072780 20072780 20072788 20072788     .'. .'. .'. .'. 
20072798:	20072790 20072790 20072798 20072798     .'. .'. .'. .'. 
200727a8:	200727a0 200727a0 200727a8 200727a8     .'. .'. .'. .'. 
200727b8:	200727b0 200727b0 200727b8 200727b8     .'. .'. .'. .'. 
200727c8:	200727c0 200727c0 200727c8 200727c8     .'. .'. .'. .'. 
200727d8:	200727d0 200727d0 200727d8 200727d8     .'. .'. .'. .'. 
200727e8:	200727e0 200727e0 200727e8 200727e8     .'. .'. .'. .'. 
200727f8:	200727f0 200727f0 200727f8 200727f8     .'. .'. .'. .'. 
20072808:	20072800 20072800 20072808 20072808     .(. .(. .(. .(. 
20072818:	20072810 20072810 20072818 20072818     .(. .(. .(. .(. 
20072828:	20072820 20072820 20072828 20072828      (.  (. ((. ((. 
20072838:	20072830 20072830 20072838 20072838     0(. 0(. 8(. 8(. 
20072848:	20072840 20072840 20072848 20072848     @(. @(. H(. H(. 
20072858:	20072850 20072850 20072858 20072858     P(. P(. X(. X(. 
20072868:	20072860 20072860 20072868 20072868     `(. `(. h(. h(. 
20072878:	20072870 20072870 20072878 20072878     p(. p(. x(. x(. 
20072888:	20072880 20072880 20072888 20072888     .(. .(. .(. .(. 
20072898:	20072890 20072890 20072898 20072898     .(. .(. .(. .(. 
200728a8:	200728a0 200728a0 200728a8 200728a8     .(. .(. .(. .(. 
200728b8:	200728b0 200728b0 200728b8 200728b8     .(. .(. .(. .(. 
200728c8:	200728c0 200728c0 200728c8 200728c8     .(. .(. .(. .(. 
200728d8:	200728d0 200728d0 200728d8 200728d8     .(. .(. .(. .(. 
200728e8:	200728e0 200728e0 200728e8 200728e8     .(. .(. .(. .(. 
200728f8:	200728f0 200728f0 200728f8 200728f8     .(. .(. .(. .(. 
20072908:	20072900 20072900 20072908 20072908     .). .). .). .). 
20072918:	20072910 20072910 20072918 20072918     .). .). .). .). 
20072928:	20072920 20072920 20072928 20072928      ).  ). (). (). 
20072938:	20072930 20072930 20072938 20072938     0). 0). 8). 8). 
20072948:	20072940 20072940 20072948 20072948     @). @). H). H). 
20072958:	20072950 20072950 20072958 20072958     P). P). X). X). 
20072968:	20072960 20072960 20072968 20072968     `). `). h). h). 
20072978:	20072970 20072970 20072978 20072978     p). p). x). x). 
20072988:	20072980 20072980 20072988 20072988     .). .). .). .). 
20072998:	20072990 20072990 20072998 20072998     .). .). .). .). 
200729a8:	200729a0 200729a0 200729a8 200729a8     .). .). .). .). 
200729b8:	200729b0 200729b0 200729b8 200729b8     .). .). .). .). 
200729c8:	200729c0 200729c0 200729c8 200729c8     .). .). .). .). 
200729d8:	200729d0 200729d0 200729d8 200729d8     .). .). .). .). 
200729e8:	200729e0 200729e0 200729e8 200729e8     .). .). .). .). 
200729f8:	200729f0 200729f0 200729f8 200729f8     .). .). .). .). 
20072a08:	20072a00 20072a00 20072a08 20072a08     .*. .*. .*. .*. 
20072a18:	20072a10 20072a10 20072a18 20072a18     .*. .*. .*. .*. 
20072a28:	20072a20 20072a20 20072a28 20072a28      *.  *. (*. (*. 
20072a38:	20072a30 20072a30 20072a38 20072a38     0*. 0*. 8*. 8*. 
20072a48:	20072a40 20072a40 20072a48 20072a48     @*. @*. H*. H*. 
20072a58:	20072a50 20072a50 20072a58 20072a58     P*. P*. X*. X*. 

20072a68 <__malloc_sbrk_base>:
20072a68:	ffffffff                                ....

20072a6c <__malloc_trim_threshold>:
20072a6c:	00020000                                ....

20072a70 <__atexit_recursive_mutex>:
20072a70:	20072b54                                T+. 
